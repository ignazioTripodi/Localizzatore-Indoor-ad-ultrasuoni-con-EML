
nuovo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800a8a8  0800a8a8  0001a8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad2c  0800ad2c  000203dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad2c  0800ad2c  0001ad2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad34  0800ad34  000203dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad34  0800ad34  0001ad34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad38  0800ad38  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  20000000  0800ad3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011a30  200003dc  0800b118  000203dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011e0c  0800b118  00021e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016750  00000000  00000000  0002040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002671  00000000  00000000  00036b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003a430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003368a  00000000  00000000  0003b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153ed  00000000  00000000  0006ec32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013d164  00000000  00000000  0008401f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c1183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000610c  00000000  00000000  001c11d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200003dc 	.word	0x200003dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a88c 	.word	0x0800a88c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200003e0 	.word	0x200003e0
 80001fc:	0800a88c 	.word	0x0800a88c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <Cross_Correlation.0>:
  MX_ADC1_Init();
  MX_TIM2_Init();
  MX_USART2_UART_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
	void Cross_Correlation() {
 8000fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fc4:	b0cd      	sub	sp, #308	; 0x134
 8000fc6:	af08      	add	r7, sp, #32
 8000fc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fd0:	f8c3 c000 	str.w	ip, [r3]

		uint16_t cont = na;
 8000fd4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fd8:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
		uint32_t soglia =0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		uint16_t range = 10;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6

		for (uint16_t i = 0; i < 4; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000fee:	e012      	b.n	8001016 <Cross_Correlation.0+0x56>
			indici[i] = 0;
 8000ff0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000ff4:	4a9c      	ldr	r2, [pc, #624]	; (8001268 <Cross_Correlation.0+0x2a8>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			massimi[i] = 0;
 8000ffc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001000:	4a9a      	ldr	r2, [pc, #616]	; (800126c <Cross_Correlation.0+0x2ac>)
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
		for (uint16_t i = 0; i < 4; i++) {
 800100c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8001010:	3301      	adds	r3, #1
 8001012:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8001016:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800101a:	2b03      	cmp	r3, #3
 800101c:	d9e8      	bls.n	8000ff0 <Cross_Correlation.0+0x30>
		}
//		__HAL_TIM_SET_COUNTER(&htim3, 0);
//		HAL_TIM_Base_Start(&htim3);
//		uint16_t start_time=__HAL_TIM_GET_COUNTER(&htim3);

		for (uint8_t j = 0; j < 4; j++) {
 800101e:	2300      	movs	r3, #0
 8001020:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8001024:	e109      	b.n	800123a <Cross_Correlation.0+0x27a>
			i_max = 0;
 8001026:	4b92      	ldr	r3, [pc, #584]	; (8001270 <Cross_Correlation.0+0x2b0>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
			max_corrente = 0;
 800102c:	4b91      	ldr	r3, [pc, #580]	; (8001274 <Cross_Correlation.0+0x2b4>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
			flagghetto = 1;
 8001034:	4b90      	ldr	r3, [pc, #576]	; (8001278 <Cross_Correlation.0+0x2b8>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
			for (uint16_t i = nb + j * (na +  nb); i < cont + nb + j * (na + nb); i++)
 800103a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800103e:	b29b      	uxth	r3, r3
 8001040:	02db      	lsls	r3, r3, #11
 8001042:	b29b      	uxth	r3, r3
 8001044:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001048:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800104c:	e05b      	b.n	8001106 <Cross_Correlation.0+0x146>
			{
				acc = 0;
 800104e:	4b8b      	ldr	r3, [pc, #556]	; (800127c <Cross_Correlation.0+0x2bc>)
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	601a      	str	r2, [r3, #0]

				for (int t = 0; t < 512; t++) {
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800105c:	e022      	b.n	80010a4 <Cross_Correlation.0+0xe4>
					acc = acc + value2[i + t -1] * chirp[t];
 800105e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8001062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001066:	4413      	add	r3, r2
 8001068:	3b01      	subs	r3, #1
 800106a:	4a85      	ldr	r2, [pc, #532]	; (8001280 <Cross_Correlation.0+0x2c0>)
 800106c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001070:	4619      	mov	r1, r3
 8001072:	4a84      	ldr	r2, [pc, #528]	; (8001284 <Cross_Correlation.0+0x2c4>)
 8001074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001078:	4413      	add	r3, r2
 800107a:	f993 3000 	ldrsb.w	r3, [r3]
 800107e:	fb01 f303 	mul.w	r3, r1, r3
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108a:	4b7c      	ldr	r3, [pc, #496]	; (800127c <Cross_Correlation.0+0x2bc>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	4b79      	ldr	r3, [pc, #484]	; (800127c <Cross_Correlation.0+0x2bc>)
 8001096:	edc3 7a00 	vstr	s15, [r3]
				for (int t = 0; t < 512; t++) {
 800109a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800109e:	3301      	adds	r3, #1
 80010a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80010a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80010a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ac:	dbd7      	blt.n	800105e <Cross_Correlation.0+0x9e>
				}
				xc[i] = -acc;
 80010ae:	4b73      	ldr	r3, [pc, #460]	; (800127c <Cross_Correlation.0+0x2bc>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80010b8:	eef1 7a67 	vneg.f32	s15, s15
 80010bc:	4a72      	ldr	r2, [pc, #456]	; (8001288 <Cross_Correlation.0+0x2c8>)
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	edc3 7a00 	vstr	s15, [r3]
//				char bufferTx[50];
//				sprintf(bufferTx, "%f \r\n", xc[i]);
//				HAL_UART_Transmit(&huart2, (uint16_t*) bufferTx, strlen(bufferTx), 1000);


				if (xc[i]>max_corrente){
 80010c6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80010ca:	4a6f      	ldr	r2, [pc, #444]	; (8001288 <Cross_Correlation.0+0x2c8>)
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	ed93 7a00 	vldr	s14, [r3]
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <Cross_Correlation.0+0x2b4>)
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	dd0b      	ble.n	80010fc <Cross_Correlation.0+0x13c>
				         max_corrente=xc[i];
 80010e4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80010e8:	4a67      	ldr	r2, [pc, #412]	; (8001288 <Cross_Correlation.0+0x2c8>)
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a60      	ldr	r2, [pc, #384]	; (8001274 <Cross_Correlation.0+0x2b4>)
 80010f2:	6013      	str	r3, [r2, #0]
				         i_max=i;
 80010f4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80010f8:	4a5d      	ldr	r2, [pc, #372]	; (8001270 <Cross_Correlation.0+0x2b0>)
 80010fa:	6013      	str	r3, [r2, #0]
			for (uint16_t i = nb + j * (na +  nb); i < cont + nb + j * (na + nb); i++)
 80010fc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8001100:	3301      	adds	r3, #1
 8001102:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8001106:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800110a:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 800110e:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8001112:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001116:	02db      	lsls	r3, r3, #11
 8001118:	440b      	add	r3, r1
 800111a:	429a      	cmp	r2, r3
 800111c:	db97      	blt.n	800104e <Cross_Correlation.0+0x8e>
				}

			}
			soglia=max_corrente*0.7;
 800111e:	4b55      	ldr	r3, [pc, #340]	; (8001274 <Cross_Correlation.0+0x2b4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa28 	bl	8000578 <__aeabi_f2d>
 8001128:	a34d      	add	r3, pc, #308	; (adr r3, 8001260 <Cross_Correlation.0+0x2a0>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa7b 	bl	8000628 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd4d 	bl	8000bd8 <__aeabi_d2uiz>
 800113e:	4603      	mov	r3, r0
 8001140:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

			for (uint16_t i = nb + j * (na +  nb); i < cont + nb + j * (na + nb); i++)
 8001144:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001148:	b29b      	uxth	r3, r3
 800114a:	02db      	lsls	r3, r3, #11
 800114c:	b29b      	uxth	r3, r3
 800114e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001152:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 8001156:	e050      	b.n	80011fa <Cross_Correlation.0+0x23a>
						{
								if (xc[i]>max_corrente & xc[i]>soglia & (flagghetto|| i<i_max+range)){
 8001158:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 800115c:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <Cross_Correlation.0+0x2c8>)
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	ed93 7a00 	vldr	s14, [r3]
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <Cross_Correlation.0+0x2b4>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	bfcc      	ite	gt
 8001176:	2301      	movgt	r3, #1
 8001178:	2300      	movle	r3, #0
 800117a:	b2da      	uxtb	r2, r3
 800117c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8001180:	4941      	ldr	r1, [pc, #260]	; (8001288 <Cross_Correlation.0+0x2c8>)
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	bfcc      	ite	gt
 80011a0:	2301      	movgt	r3, #1
 80011a2:	2300      	movle	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4013      	ands	r3, r2
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	4b32      	ldr	r3, [pc, #200]	; (8001278 <Cross_Correlation.0+0x2b8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d108      	bne.n	80011c6 <Cross_Correlation.0+0x206>
 80011b4:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 80011b8:	f8b7 10e6 	ldrh.w	r1, [r7, #230]	; 0xe6
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <Cross_Correlation.0+0x2b0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	440b      	add	r3, r1
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d201      	bcs.n	80011ca <Cross_Correlation.0+0x20a>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <Cross_Correlation.0+0x20c>
 80011ca:	2300      	movs	r3, #0
 80011cc:	4003      	ands	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00e      	beq.n	80011f0 <Cross_Correlation.0+0x230>

							                flagghetto=0;
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <Cross_Correlation.0+0x2b8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
							                max_corrente=xc[i];
 80011d8:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80011dc:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <Cross_Correlation.0+0x2c8>)
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a23      	ldr	r2, [pc, #140]	; (8001274 <Cross_Correlation.0+0x2b4>)
 80011e6:	6013      	str	r3, [r2, #0]
							                i_max=i;
 80011e8:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80011ec:	4a20      	ldr	r2, [pc, #128]	; (8001270 <Cross_Correlation.0+0x2b0>)
 80011ee:	6013      	str	r3, [r2, #0]
			for (uint16_t i = nb + j * (na +  nb); i < cont + nb + j * (na + nb); i++)
 80011f0:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80011f4:	3301      	adds	r3, #1
 80011f6:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 80011fa:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 80011fe:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8001202:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8001206:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800120a:	02db      	lsls	r3, r3, #11
 800120c:	440b      	add	r3, r1
 800120e:	429a      	cmp	r2, r3
 8001210:	dba2      	blt.n	8001158 <Cross_Correlation.0+0x198>
							 }

						}
			massimi[j] = max_corrente;
 8001212:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <Cross_Correlation.0+0x2b4>)
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	4914      	ldr	r1, [pc, #80]	; (800126c <Cross_Correlation.0+0x2ac>)
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	601a      	str	r2, [r3, #0]
			indici[j] = i_max;
 8001222:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <Cross_Correlation.0+0x2b0>)
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	490f      	ldr	r1, [pc, #60]	; (8001268 <Cross_Correlation.0+0x2a8>)
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (uint8_t j = 0; j < 4; j++) {
 8001230:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001234:	3301      	adds	r3, #1
 8001236:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800123a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800123e:	2b03      	cmp	r3, #3
 8001240:	f67f aef1 	bls.w	8001026 <Cross_Correlation.0+0x66>
}
		uint16_t offset[] = { 0, 2048, 4096, 6144 };
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <Cross_Correlation.0+0x2cc>)
 8001246:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800124a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124e:	e883 0003 	stmia.w	r3, {r0, r1}
		uint16_t indici_corretti[4];
		for (int i = 0; i < 4; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001258:	e03b      	b.n	80012d2 <Cross_Correlation.0+0x312>
 800125a:	bf00      	nop
 800125c:	f3af 8000 	nop.w
 8001260:	66666666 	.word	0x66666666
 8001264:	3fe66666 	.word	0x3fe66666
 8001268:	20011da4 	.word	0x20011da4
 800126c:	20011db4 	.word	0x20011db4
 8001270:	20011d9c 	.word	0x20011d9c
 8001274:	20011da0 	.word	0x20011da0
 8001278:	20011dc4 	.word	0x20011dc4
 800127c:	20008d98 	.word	0x20008d98
 8001280:	20004994 	.word	0x20004994
 8001284:	20000000 	.word	0x20000000
 8001288:	20008d9c 	.word	0x20008d9c
 800128c:	0800a8cc 	.word	0x0800a8cc
			indici_corretti[i] = indici[i] - offset[i];
 8001290:	4af1      	ldr	r2, [pc, #964]	; (8001658 <Cross_Correlation.0+0x698>)
 8001292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	b29a      	uxth	r2, r3
 800129c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80012a6:	f107 0108 	add.w	r1, r7, #8
 80012aa:	440b      	add	r3, r1
 80012ac:	f833 3ca4 	ldrh.w	r3, [r3, #-164]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	440b      	add	r3, r1
 80012c4:	f823 2cac 	strh.w	r2, [r3, #-172]
		for (int i = 0; i < 4; i++) {
 80012c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012cc:	3301      	adds	r3, #1
 80012ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80012d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	ddda      	ble.n	8001290 <Cross_Correlation.0+0x2d0>

//		char bufferTx1[50];
//		sprintf(bufferTx1, "Indici: %Lu %Lu %Lu %Lu  \r\n", indici_corretti[0], indici_corretti[1], indici_corretti[2], indici_corretti[3]);
//		HAL_UART_Transmit(&huart2, (uint16_t*) bufferTx1, strlen(bufferTx1), 1000);

		float D1=indici_corretti[0]*343.0/192000.0;
 80012da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f938 	bl	8000554 <__aeabi_i2d>
 80012e4:	a3da      	add	r3, pc, #872	; (adr r3, 8001650 <Cross_Correlation.0+0x690>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f99d 	bl	8000628 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4bd8      	ldr	r3, [pc, #864]	; (800165c <Cross_Correlation.0+0x69c>)
 80012fc:	f7ff fabe 	bl	800087c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc86 	bl	8000c18 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		float D2=indici_corretti[1]*343.0/192000.0;
 8001312:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f91c 	bl	8000554 <__aeabi_i2d>
 800131c:	a3cc      	add	r3, pc, #816	; (adr r3, 8001650 <Cross_Correlation.0+0x690>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff f981 	bl	8000628 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4bca      	ldr	r3, [pc, #808]	; (800165c <Cross_Correlation.0+0x69c>)
 8001334:	f7ff faa2 	bl	800087c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fc6a 	bl	8000c18 <__aeabi_d2f>
 8001344:	4603      	mov	r3, r0
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		float D3=indici_corretti[2]*343.0/192000.0;
 800134a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f900 	bl	8000554 <__aeabi_i2d>
 8001354:	a3be      	add	r3, pc, #760	; (adr r3, 8001650 <Cross_Correlation.0+0x690>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f965 	bl	8000628 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	4bbc      	ldr	r3, [pc, #752]	; (800165c <Cross_Correlation.0+0x69c>)
 800136c:	f7ff fa86 	bl	800087c <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fc4e 	bl	8000c18 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		float D4=indici_corretti[3]*343.0/192000.0;
 8001382:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8e4 	bl	8000554 <__aeabi_i2d>
 800138c:	a3b0      	add	r3, pc, #704	; (adr r3, 8001650 <Cross_Correlation.0+0x690>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff f949 	bl	8000628 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4bae      	ldr	r3, [pc, #696]	; (800165c <Cross_Correlation.0+0x69c>)
 80013a4:	f7ff fa6a 	bl	800087c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fc32 	bl	8000c18 <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

//		char bufferTx[50];
//		sprintf(bufferTx, "D: %f %f %f %f  \r\n", D1, D2, D3, D4);
//		HAL_UART_Transmit(&huart2, (uint16_t*) bufferTx, strlen(bufferTx), 1000);
//
		float l1=D1;
 80013ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80013be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		float l2=D2;
 80013c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80013c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		float l3=D3;
 80013ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80013ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		float l4=D4;
 80013d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
//		char bufferTx2[50];
//		sprintf(bufferTx2, "Indici: %Lu %Lu %Lu %Lu  \r\n", indici[0], indici[1], indici[2], indici[3]);
//		HAL_UART_Transmit(&huart2, (uint16_t*) bufferTx2, strlen(bufferTx2), 1000);

		float x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, xp, yp, zp, a, b;
		int th=1;
 80013da:	2301      	movs	r3, #1
 80013dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		a=0.500;
 80013e0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80013e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		b = 0.500; //a e b indicano le posizioni degli emettitori e sono indicate su matlab
 80013e8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80013ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		x1 = (l2 * l2 - l1 * l1 - a * a) / (-2.0 * a);
 80013f0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80013f4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013f8:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80013fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001404:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001408:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800140c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001410:	ee17 0a90 	vmov	r0, s15
 8001414:	f7ff f8b0 	bl	8000578 <__aeabi_f2d>
 8001418:	4604      	mov	r4, r0
 800141a:	460d      	mov	r5, r1
 800141c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001420:	f7ff f8aa 	bl	8000578 <__aeabi_f2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800142c:	f7ff f8fc 	bl	8000628 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4620      	mov	r0, r4
 8001436:	4629      	mov	r1, r5
 8001438:	f7ff fa20 	bl	800087c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fbe8 	bl	8000c18 <__aeabi_d2f>
 8001448:	4603      	mov	r3, r0
 800144a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		y1 = (l4 * l4 - l1 * l1 - b * b) / (-2.0 * b);
 800144e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001452:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001456:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800145a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800145e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001462:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001466:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800146a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146e:	ee17 0a90 	vmov	r0, s15
 8001472:	f7ff f881 	bl	8000578 <__aeabi_f2d>
 8001476:	4604      	mov	r4, r0
 8001478:	460d      	mov	r5, r1
 800147a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800147e:	f7ff f87b 	bl	8000578 <__aeabi_f2d>
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800148a:	f7ff f8cd 	bl	8000628 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7ff f9f1 	bl	800087c <__aeabi_ddiv>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fbb9 	bl	8000c18 <__aeabi_d2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		z1 = sqrt(fabs(l1 * l1 - x1 * x1 - y1 * y1));
 80014ac:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80014b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014b4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80014b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80014c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	eef0 7ae7 	vabs.f32	s15, s15
 80014d0:	ee17 0a90 	vmov	r0, s15
 80014d4:	f7ff f850 	bl	8000578 <__aeabi_f2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	ec43 2b10 	vmov	d0, r2, r3
 80014e0:	f009 f8f6 	bl	800a6d0 <sqrt>
 80014e4:	ec53 2b10 	vmov	r2, r3, d0
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fb94 	bl	8000c18 <__aeabi_d2f>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		x2 = -(l1 * l1 - l2 * l2 - a * a) / (-2.0 * a) + a;
 80014f6:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80014fa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014fe:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001502:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800150a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800150e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001516:	eef1 7a67 	vneg.f32	s15, s15
 800151a:	ee17 3a90 	vmov	r3, s15
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f82a 	bl	8000578 <__aeabi_f2d>
 8001524:	4604      	mov	r4, r0
 8001526:	460d      	mov	r5, r1
 8001528:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800152c:	f7ff f824 	bl	8000578 <__aeabi_f2d>
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001538:	f7ff f876 	bl	8000628 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7ff f99a 	bl	800087c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001554:	f7ff f810 	bl	8000578 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4620      	mov	r0, r4
 800155e:	4629      	mov	r1, r5
 8001560:	f7fe feac 	bl	80002bc <__adddf3>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fb54 	bl	8000c18 <__aeabi_d2f>
 8001570:	4603      	mov	r3, r0
 8001572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		y2 = (l3 * l3 - l2 * l2 - b * b) / (-2.0 * b);
 8001576:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800157a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800157e:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001582:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001586:	ee37 7a67 	vsub.f32	s14, s14, s15
 800158a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800158e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001596:	ee17 0a90 	vmov	r0, s15
 800159a:	f7fe ffed 	bl	8000578 <__aeabi_f2d>
 800159e:	4604      	mov	r4, r0
 80015a0:	460d      	mov	r5, r1
 80015a2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80015a6:	f7fe ffe7 	bl	8000578 <__aeabi_f2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80015b2:	f7ff f839 	bl	8000628 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7ff f95d 	bl	800087c <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fb25 	bl	8000c18 <__aeabi_d2f>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		z2 = sqrt(fabs(l2 * l2 - (x2 - a) * (x2 - a) - y2 * y2));
 80015d4:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80015d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015dc:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 80015e0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80015e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015e8:	ed97 6a2a 	vldr	s12, [r7, #168]	; 0xa8
 80015ec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80015f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001600:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001608:	eef0 7ae7 	vabs.f32	s15, s15
 800160c:	ee17 0a90 	vmov	r0, s15
 8001610:	f7fe ffb2 	bl	8000578 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	ec43 2b10 	vmov	d0, r2, r3
 800161c:	f009 f858 	bl	800a6d0 <sqrt>
 8001620:	ec53 2b10 	vmov	r2, r3, d0
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff faf6 	bl	8000c18 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

		x3 = -(l4 * l4 - l3 * l3 - a * a) / (-2.0 * a) + a;
 8001632:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001636:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800163a:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800163e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001646:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800164a:	e009      	b.n	8001660 <Cross_Correlation.0+0x6a0>
 800164c:	f3af 8000 	nop.w
 8001650:	00000000 	.word	0x00000000
 8001654:	40757000 	.word	0x40757000
 8001658:	20011da4 	.word	0x20011da4
 800165c:	41077000 	.word	0x41077000
 8001660:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001668:	eef1 7a67 	vneg.f32	s15, s15
 800166c:	ee17 3a90 	vmov	r3, s15
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff81 	bl	8000578 <__aeabi_f2d>
 8001676:	4604      	mov	r4, r0
 8001678:	460d      	mov	r5, r1
 800167a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800167e:	f7fe ff7b 	bl	8000578 <__aeabi_f2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800168a:	f7fe ffcd 	bl	8000628 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4620      	mov	r0, r4
 8001694:	4629      	mov	r1, r5
 8001696:	f7ff f8f1 	bl	800087c <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4614      	mov	r4, r2
 80016a0:	461d      	mov	r5, r3
 80016a2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80016a6:	f7fe ff67 	bl	8000578 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fe03 	bl	80002bc <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff faab 	bl	8000c18 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		y3 = -(l2 * l2 - l3 * l3 - b * b) / (-2.0 * b) + b;
 80016c8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80016cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016d0:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80016d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016dc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80016e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e8:	eef1 7a67 	vneg.f32	s15, s15
 80016ec:	ee17 3a90 	vmov	r3, s15
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff41 	bl	8000578 <__aeabi_f2d>
 80016f6:	4604      	mov	r4, r0
 80016f8:	460d      	mov	r5, r1
 80016fa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80016fe:	f7fe ff3b 	bl	8000578 <__aeabi_f2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800170a:	f7fe ff8d 	bl	8000628 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4620      	mov	r0, r4
 8001714:	4629      	mov	r1, r5
 8001716:	f7ff f8b1 	bl	800087c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4614      	mov	r4, r2
 8001720:	461d      	mov	r5, r3
 8001722:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001726:	f7fe ff27 	bl	8000578 <__aeabi_f2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fdc3 	bl	80002bc <__adddf3>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff fa6b 	bl	8000c18 <__aeabi_d2f>
 8001742:	4603      	mov	r3, r0
 8001744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		z3 = sqrt(fabs(l3 * l3 - (x3 - a) * (x3 - a) - (y3 - b) * (y3 - b)));
 8001748:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800174c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001750:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8001754:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001758:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800175c:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8001760:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001764:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001770:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001774:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001778:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800177c:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 8001780:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001784:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001790:	eef0 7ae7 	vabs.f32	s15, s15
 8001794:	ee17 0a90 	vmov	r0, s15
 8001798:	f7fe feee 	bl	8000578 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	ec43 2b10 	vmov	d0, r2, r3
 80017a4:	f008 ff94 	bl	800a6d0 <sqrt>
 80017a8:	ec53 2b10 	vmov	r2, r3, d0
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff fa32 	bl	8000c18 <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		x4 = (l3 * l3 - l4 * l4 - a * a) / (-2.0 * a);
 80017ba:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80017be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017c2:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80017c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ce:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80017d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	ee17 0a90 	vmov	r0, s15
 80017de:	f7fe fecb 	bl	8000578 <__aeabi_f2d>
 80017e2:	4604      	mov	r4, r0
 80017e4:	460d      	mov	r5, r1
 80017e6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80017ea:	f7fe fec5 	bl	8000578 <__aeabi_f2d>
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80017f6:	f7fe ff17 	bl	8000628 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f7ff f83b 	bl	800087c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff fa03 	bl	8000c18 <__aeabi_d2f>
 8001812:	4603      	mov	r3, r0
 8001814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		y4 = -(l1 * l1 - l4 * l4 - b * b) / (-2.0 * b) + b;
 8001818:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800181c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001820:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001824:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001828:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001830:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001838:	eef1 7a67 	vneg.f32	s15, s15
 800183c:	ee17 3a90 	vmov	r3, s15
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe99 	bl	8000578 <__aeabi_f2d>
 8001846:	4604      	mov	r4, r0
 8001848:	460d      	mov	r5, r1
 800184a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800184e:	f7fe fe93 	bl	8000578 <__aeabi_f2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800185a:	f7fe fee5 	bl	8000628 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4620      	mov	r0, r4
 8001864:	4629      	mov	r1, r5
 8001866:	f7ff f809 	bl	800087c <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001876:	f7fe fe7f 	bl	8000578 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	f7fe fd1b 	bl	80002bc <__adddf3>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f9c3 	bl	8000c18 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		z4 = sqrt(fabs(l4 * l4 - x4 * x4 - (y4 - b) * (y4 - b)));
 8001898:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800189c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80018a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ac:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80018b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80018b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018b8:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80018bc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80018c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018cc:	eef0 7ae7 	vabs.f32	s15, s15
 80018d0:	ee17 0a90 	vmov	r0, s15
 80018d4:	f7fe fe50 	bl	8000578 <__aeabi_f2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	ec43 2b10 	vmov	d0, r2, r3
 80018e0:	f008 fef6 	bl	800a6d0 <sqrt>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f994 	bl	8000c18 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88



		xp = (x1 + x2 + x3 + x4) / 4.0;
 80018f6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80018fa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80018fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001902:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800190e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001912:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		yp = (y1 + y2 + y3 + y4) / 4.0;
 800191e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001922:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800192e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001932:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001936:	ee37 7a27 	vadd.f32	s14, s14, s15
 800193a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800193e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001942:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		zp = (z1 + z2 + z3 + z4) / 4.0;
 8001946:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800194a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800194e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001952:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800195e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001962:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

		test = fabs(x1 - xp) + fabs(x2 - xp) + fabs(x3 - xp) + fabs(x4 - xp)
 800196e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001972:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197a:	eef0 7ae7 	vabs.f32	s15, s15
 800197e:	ee17 0a90 	vmov	r0, s15
 8001982:	f7fe fdf9 	bl	8000578 <__aeabi_f2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800198e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	eef0 7ae7 	vabs.f32	s15, s15
 800199a:	ee17 0a90 	vmov	r0, s15
 800199e:	f7fe fdeb 	bl	8000578 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4620      	mov	r0, r4
 80019a8:	4629      	mov	r1, r5
 80019aa:	f7fe fc87 	bl	80002bc <__adddf3>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4614      	mov	r4, r2
 80019b4:	461d      	mov	r5, r3
 80019b6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80019ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	eef0 7ae7 	vabs.f32	s15, s15
 80019c6:	ee17 0a90 	vmov	r0, s15
 80019ca:	f7fe fdd5 	bl	8000578 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4620      	mov	r0, r4
 80019d4:	4629      	mov	r1, r5
 80019d6:	f7fe fc71 	bl	80002bc <__adddf3>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4614      	mov	r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80019e6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	eef0 7ae7 	vabs.f32	s15, s15
 80019f2:	ee17 0a90 	vmov	r0, s15
 80019f6:	f7fe fdbf 	bl	8000578 <__aeabi_f2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc5b 	bl	80002bc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
				+ fabs(y1 - yp) + fabs(y2 - yp) + fabs(y3 - yp) + fabs(y4 - yp)
 8001a0e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001a12:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a1e:	ee17 0a90 	vmov	r0, s15
 8001a22:	f7fe fda9 	bl	8000578 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f7fe fc45 	bl	80002bc <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	461d      	mov	r5, r3
 8001a3a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8001a3e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a46:	eef0 7ae7 	vabs.f32	s15, s15
 8001a4a:	ee17 0a90 	vmov	r0, s15
 8001a4e:	f7fe fd93 	bl	8000578 <__aeabi_f2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f7fe fc2f 	bl	80002bc <__adddf3>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4614      	mov	r4, r2
 8001a64:	461d      	mov	r5, r3
 8001a66:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001a6a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a72:	eef0 7ae7 	vabs.f32	s15, s15
 8001a76:	ee17 0a90 	vmov	r0, s15
 8001a7a:	f7fe fd7d 	bl	8000578 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4620      	mov	r0, r4
 8001a84:	4629      	mov	r1, r5
 8001a86:	f7fe fc19 	bl	80002bc <__adddf3>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4614      	mov	r4, r2
 8001a90:	461d      	mov	r5, r3
 8001a92:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001a96:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9e:	eef0 7ae7 	vabs.f32	s15, s15
 8001aa2:	ee17 0a90 	vmov	r0, s15
 8001aa6:	f7fe fd67 	bl	8000578 <__aeabi_f2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	f7fe fc03 	bl	80002bc <__adddf3>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4614      	mov	r4, r2
 8001abc:	461d      	mov	r5, r3
				+ fabs(z1 - zp) + fabs(z2 - zp) + fabs(z3 - zp) + fabs(z4 - zp);
 8001abe:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001ac2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	eef0 7ae7 	vabs.f32	s15, s15
 8001ace:	ee17 0a90 	vmov	r0, s15
 8001ad2:	f7fe fd51 	bl	8000578 <__aeabi_f2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fbed 	bl	80002bc <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	461d      	mov	r5, r3
 8001aea:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8001aee:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	eef0 7ae7 	vabs.f32	s15, s15
 8001afa:	ee17 0a90 	vmov	r0, s15
 8001afe:	f7fe fd3b 	bl	8000578 <__aeabi_f2d>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f7fe fbd7 	bl	80002bc <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4614      	mov	r4, r2
 8001b14:	461d      	mov	r5, r3
 8001b16:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001b1a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b22:	eef0 7ae7 	vabs.f32	s15, s15
 8001b26:	ee17 0a90 	vmov	r0, s15
 8001b2a:	f7fe fd25 	bl	8000578 <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fbc1 	bl	80002bc <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001b46:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b52:	ee17 0a90 	vmov	r0, s15
 8001b56:	f7fe fd0f 	bl	8000578 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fbab 	bl	80002bc <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
		test = fabs(x1 - xp) + fabs(x2 - xp) + fabs(x3 - xp) + fabs(x4 - xp)
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f853 	bl	8000c18 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	67bb      	str	r3, [r7, #120]	; 0x78


		for (uint8_t i = 0; i < 4; i++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8001b7c:	e012      	b.n	8001ba4 <Cross_Correlation.0+0xbe4>
							indici_acq[i] = 0;
 8001b7e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8001b82:	4ab1      	ldr	r2, [pc, #708]	; (8001e48 <Cross_Correlation.0+0xe88>)
 8001b84:	2100      	movs	r1, #0
 8001b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							massimi_acq[i] = 0;
 8001b8a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8001b8e:	4aaf      	ldr	r2, [pc, #700]	; (8001e4c <Cross_Correlation.0+0xe8c>)
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 4; i++) {
 8001b9a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8001ba4:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d9e8      	bls.n	8001b7e <Cross_Correlation.0+0xbbe>
						}
						for (uint8_t j = 0; j < 4; j++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 8001bb2:	e0c8      	b.n	8001d46 <Cross_Correlation.0+0xd86>
							z_max = 0;
 8001bb4:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <Cross_Correlation.0+0xe90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
							max_acq = 0;
 8001bba:	4ba6      	ldr	r3, [pc, #664]	; (8001e54 <Cross_Correlation.0+0xe94>)
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
							soglia_acq = 0;
 8001bc2:	4ba5      	ldr	r3, [pc, #660]	; (8001e58 <Cross_Correlation.0+0xe98>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
							uint16_t cont = na;
 8001bca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
							for (uint16_t z = nb + j * (na + nb);
 8001bd2:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	02db      	lsls	r3, r3, #11
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001be0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8001be4:	e025      	b.n	8001c32 <Cross_Correlation.0+0xc72>
									z < cont + nb + j * (na + nb); z++) {

								if (value2[z] > max_acq) {
 8001be6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001bea:	4a9c      	ldr	r2, [pc, #624]	; (8001e5c <Cross_Correlation.0+0xe9c>)
 8001bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <Cross_Correlation.0+0xe94>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	dd0f      	ble.n	8001c28 <Cross_Correlation.0+0xc68>
									max_acq = value2[z];
 8001c08:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001c0c:	4a93      	ldr	r2, [pc, #588]	; (8001e5c <Cross_Correlation.0+0xe9c>)
 8001c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	; (8001e54 <Cross_Correlation.0+0xe94>)
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
									z_max = z;
 8001c20:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001c24:	4a8a      	ldr	r2, [pc, #552]	; (8001e50 <Cross_Correlation.0+0xe90>)
 8001c26:	6013      	str	r3, [r2, #0]
									z < cont + nb + j * (na + nb); z++) {
 8001c28:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8001c32:	f8b7 20f8 	ldrh.w	r2, [r7, #248]	; 0xf8
 8001c36:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001c3a:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8001c3e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001c42:	02db      	lsls	r3, r3, #11
 8001c44:	440b      	add	r3, r1
							for (uint16_t z = nb + j * (na + nb);
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dbcd      	blt.n	8001be6 <Cross_Correlation.0+0xc26>
								}

							}
							soglia_acq = max_acq * 0.7;
 8001c4a:	4b82      	ldr	r3, [pc, #520]	; (8001e54 <Cross_Correlation.0+0xe94>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc92 	bl	8000578 <__aeabi_f2d>
 8001c54:	a37a      	add	r3, pc, #488	; (adr r3, 8001e40 <Cross_Correlation.0+0xe80>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fce5 	bl	8000628 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7fe ffd7 	bl	8000c18 <__aeabi_d2f>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a7a      	ldr	r2, [pc, #488]	; (8001e58 <Cross_Correlation.0+0xe98>)
 8001c6e:	6013      	str	r3, [r2, #0]

							for (uint16_t z = nb + j * (na + nb);
 8001c70:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	02db      	lsls	r3, r3, #11
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c7e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8001c82:	e040      	b.n	8001d06 <Cross_Correlation.0+0xd46>
									z < cont + nb + j * (na + nb); z++) {
								if (value2[z] > max_acq & value2[z] > soglia_acq) {
 8001c84:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001c88:	4a74      	ldr	r2, [pc, #464]	; (8001e5c <Cross_Correlation.0+0xe9c>)
 8001c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c96:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <Cross_Correlation.0+0xe94>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	bfcc      	ite	gt
 8001ca6:	2301      	movgt	r3, #1
 8001ca8:	2300      	movle	r3, #0
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001cb0:	496a      	ldr	r1, [pc, #424]	; (8001e5c <Cross_Correlation.0+0xe9c>)
 8001cb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cbe:	4b66      	ldr	r3, [pc, #408]	; (8001e58 <Cross_Correlation.0+0xe98>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ccc:	bfcc      	ite	gt
 8001cce:	2301      	movgt	r3, #1
 8001cd0:	2300      	movle	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00f      	beq.n	8001cfc <Cross_Correlation.0+0xd3c>

									max_acq = value2[z];
 8001cdc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001ce0:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <Cross_Correlation.0+0xe9c>)
 8001ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cee:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <Cross_Correlation.0+0xe94>)
 8001cf0:	edc3 7a00 	vstr	s15, [r3]
									z_max = z;
 8001cf4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001cf8:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <Cross_Correlation.0+0xe90>)
 8001cfa:	6013      	str	r3, [r2, #0]
									z < cont + nb + j * (na + nb); z++) {
 8001cfc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001d00:	3301      	adds	r3, #1
 8001d02:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
 8001d06:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 8001d0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d0e:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8001d12:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001d16:	02db      	lsls	r3, r3, #11
 8001d18:	440b      	add	r3, r1
							for (uint16_t z = nb + j * (na + nb);
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dbb2      	blt.n	8001c84 <Cross_Correlation.0+0xcc4>
								}

							}
							massimi_acq[j] = max_acq;
 8001d1e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001d22:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <Cross_Correlation.0+0xe94>)
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	4949      	ldr	r1, [pc, #292]	; (8001e4c <Cross_Correlation.0+0xe8c>)
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	601a      	str	r2, [r3, #0]
							indici_acq[j] = z_max;
 8001d2e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001d32:	4a47      	ldr	r2, [pc, #284]	; (8001e50 <Cross_Correlation.0+0xe90>)
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	4944      	ldr	r1, [pc, #272]	; (8001e48 <Cross_Correlation.0+0xe88>)
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						for (uint8_t j = 0; j < 4; j++) {
 8001d3c:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001d40:	3301      	adds	r3, #1
 8001d42:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 8001d46:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	f67f af32 	bls.w	8001bb4 <Cross_Correlation.0+0xbf4>
						}
						uint32_t offset_acq[] = { 512, 2560, 4608, 6656 }; //{ 0, 2048, 4096, 6144 }
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <Cross_Correlation.0+0xea0>)
 8001d52:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						uint32_t indici_corretti_acq[4];
						for (int i = 0; i < 4; i++) {
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d62:	e01e      	b.n	8001da2 <Cross_Correlation.0+0xde2>
							indici_corretti_acq[i] = indici_acq[i] - offset_acq[i];
 8001d64:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <Cross_Correlation.0+0xe88>)
 8001d66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 8001d82:	1ad2      	subs	r2, r2, r3
 8001d84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001d8e:	f107 0108 	add.w	r1, r7, #8
 8001d92:	440b      	add	r3, r1
 8001d94:	f843 2ccc 	str.w	r2, [r3, #-204]
						for (int i = 0; i < 4; i++) {
 8001d98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001da2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	dddc      	ble.n	8001d64 <Cross_Correlation.0+0xda4>
						}

		if (test<th)
 8001daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001dba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d400      	bmi.n	8001dc6 <Cross_Correlation.0+0xe06>
//					char bufferTx2[50];
//					sprintf(bufferTx2, "%Lu %Lu %Lu %Lu NaN NaN NaN\r\n", indici_corretti_acq[0],indici_corretti_acq[1],indici_corretti_acq[2], indici_corretti_acq[3]);
//					HAL_UART_Transmit(&huart2, (uint16_t*) bufferTx2, strlen(bufferTx2), 1000);
		}

}
 8001dc4:	e035      	b.n	8001e32 <Cross_Correlation.0+0xe72>
					sprintf(bufferTx2, "%Lu, %Lu, %Lu, %Lu, %f, %f, %f\r\n", indici_corretti_acq[0],indici_corretti_acq[1],indici_corretti_acq[2], indici_corretti_acq[3], xp, yp, zp);
 8001dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001dcc:	6079      	str	r1, [r7, #4]
 8001dce:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8001dd0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001dd2:	6038      	str	r0, [r7, #0]
 8001dd4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001dd8:	f7fe fbce 	bl	8000578 <__aeabi_f2d>
 8001ddc:	4604      	mov	r4, r0
 8001dde:	460d      	mov	r5, r1
 8001de0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001de4:	f7fe fbc8 	bl	8000578 <__aeabi_f2d>
 8001de8:	4680      	mov	r8, r0
 8001dea:	4689      	mov	r9, r1
 8001dec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001dee:	f7fe fbc3 	bl	8000578 <__aeabi_f2d>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	f107 0010 	add.w	r0, r7, #16
 8001dfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001dfe:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001e02:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001e06:	683c      	ldr	r4, [r7, #0]
 8001e08:	9401      	str	r4, [sp, #4]
 8001e0a:	9600      	str	r6, [sp, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4914      	ldr	r1, [pc, #80]	; (8001e64 <Cross_Correlation.0+0xea4>)
 8001e12:	f006 f9e3 	bl	80081dc <siprintf>
					HAL_UART_Transmit(&huart2, (uint16_t*) bufferTx2, strlen(bufferTx2), 1000);
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe f9f0 	bl	8000200 <strlen>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f107 0110 	add.w	r1, r7, #16
 8001e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2c:	480e      	ldr	r0, [pc, #56]	; (8001e68 <Cross_Correlation.0+0xea8>)
 8001e2e:	f004 feed 	bl	8006c0c <HAL_UART_Transmit>
}
 8001e32:	bf00      	nop
 8001e34:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e3e:	bf00      	nop
 8001e40:	66666666 	.word	0x66666666
 8001e44:	3fe66666 	.word	0x3fe66666
 8001e48:	20011dc8 	.word	0x20011dc8
 8001e4c:	20011dd8 	.word	0x20011dd8
 8001e50:	20011de8 	.word	0x20011de8
 8001e54:	20011dec 	.word	0x20011dec
 8001e58:	20011df0 	.word	0x20011df0
 8001e5c:	20004994 	.word	0x20004994
 8001e60:	0800a8d4 	.word	0x0800a8d4
 8001e64:	0800a8a8 	.word	0x0800a8a8
 8001e68:	200004f8 	.word	0x200004f8

08001e6c <main>:
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
int main(void)
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001e78:	f001 f807 	bl	8002e8a <HAL_Init>
  SystemClock_Config();
 8001e7c:	f000 f854 	bl	8001f28 <SystemClock_Config>
  MX_GPIO_Init();
 8001e80:	f000 f9f0 	bl	8002264 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e84:	f000 f8a0 	bl	8001fc8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001e88:	f000 f904 	bl	8002094 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001e8c:	f000 f99e 	bl	80021cc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001e90:	f000 f94c 	bl	800212c <MX_TIM3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (state == 1) {
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <main+0xa8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d1fb      	bne.n	8001e94 <main+0x28>
//					HAL_UART_Transmit(&huart2, (uint8_t*)bufferTx, strlen(bufferTx), 1000);
//			}


//				char bufferTx[50];
				k=0;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <main+0xac>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
						for (i = 0; i < dim_buff/2; i++) {
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <main+0xb0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	e021      	b.n	8001eee <main+0x82>
						value2[k]=value[i];
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <main+0xb0>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <main+0xac>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <main+0xb4>)
 8001eb6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001eba:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <main+0xb8>)
 8001ebc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						value2[k+1]=value[i];
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <main+0xb0>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <main+0xac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <main+0xb4>)
 8001ece:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <main+0xb8>)
 8001ed4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						k=k+2;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <main+0xac>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3302      	adds	r3, #2
 8001ede:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <main+0xac>)
 8001ee0:	6013      	str	r3, [r2, #0]
						for (i = 0; i < dim_buff/2; i++) {
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <main+0xb0>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <main+0xb0>)
 8001eec:	801a      	strh	r2, [r3, #0]
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <main+0xb0>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8001ef6:	d3d8      	bcc.n	8001eaa <main+0x3e>
				//			char bufferTx2[50];
				//			sprintf(bufferTx2, "%Lu %Lu %Lu %Lu\r\n", indici_corretti_acq[0], indici_corretti_acq[1], indici_corretti_acq[2], indici_corretti_acq[3]);
				//			HAL_UART_Transmit(&huart2, (uint16_t*) bufferTx2, strlen(bufferTx2), 1000);


				Cross_Correlation ();
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	469c      	mov	ip, r3
 8001efc:	f7ff f860 	bl	8000fc0 <Cross_Correlation.0>
				i = 0;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <main+0xb0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	801a      	strh	r2, [r3, #0]
				k=0;
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <main+0xac>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
				state = 2;
 8001f0c:	4b01      	ldr	r3, [pc, #4]	; (8001f14 <main+0xa8>)
 8001f0e:	2202      	movs	r2, #2
 8001f10:	701a      	strb	r2, [r3, #0]
		if (state == 1) {
 8001f12:	e7bf      	b.n	8001e94 <main+0x28>
 8001f14:	2000058a 	.word	0x2000058a
 8001f18:	20004990 	.word	0x20004990
 8001f1c:	20000588 	.word	0x20000588
 8001f20:	2000058c 	.word	0x2000058c
 8001f24:	20004994 	.word	0x20004994

08001f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b096      	sub	sp, #88	; 0x58
 8001f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2244      	movs	r2, #68	; 0x44
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f005 fcde 	bl	80078f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f002 fbba 	bl	80046c4 <HAL_PWREx_ControlVoltageScaling>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001f56:	f000 fc6b 	bl	8002830 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f64:	2340      	movs	r3, #64	; 0x40
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001f70:	2302      	movs	r3, #2
 8001f72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001f74:	231e      	movs	r3, #30
 8001f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f80:	2302      	movs	r3, #2
 8001f82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fc4f 	bl	800482c <HAL_RCC_OscConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001f94:	f000 fc4c 	bl	8002830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f98:	230f      	movs	r3, #15
 8001f9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fac:	463b      	mov	r3, r7
 8001fae:	2105      	movs	r1, #5
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 f855 	bl	8005060 <HAL_RCC_ClockConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fbc:	f000 fc38 	bl	8002830 <Error_Handler>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3758      	adds	r7, #88	; 0x58
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fce:	463b      	mov	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <MX_ADC1_Init+0xc0>)
 8001fe0:	4a2a      	ldr	r2, [pc, #168]	; (800208c <MX_ADC1_Init+0xc4>)
 8001fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <MX_ADC1_Init+0xc0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <MX_ADC1_Init+0xc0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <MX_ADC1_Init+0xc0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <MX_ADC1_Init+0xc0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <MX_ADC1_Init+0xc0>)
 8001ffe:	2204      	movs	r2, #4
 8002000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002004:	2200      	movs	r2, #0
 8002006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <MX_ADC1_Init+0xc0>)
 800200a:	2200      	movs	r2, #0
 800200c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002010:	2201      	movs	r2, #1
 8002012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_ADC1_Init+0xc0>)
 800201e:	2200      	movs	r2, #0
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002024:	2200      	movs	r2, #0
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MX_ADC1_Init+0xc0>)
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002032:	2200      	movs	r2, #0
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002040:	2204      	movs	r2, #4
 8002042:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002044:	4810      	ldr	r0, [pc, #64]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002046:	f001 f96f 	bl	8003328 <HAL_ADC_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002050:	f000 fbee 	bl	8002830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <MX_ADC1_Init+0xc8>)
 8002056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002058:	2306      	movs	r3, #6
 800205a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002060:	237f      	movs	r3, #127	; 0x7f
 8002062:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002064:	2304      	movs	r3, #4
 8002066:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_ADC1_Init+0xc0>)
 8002072:	f001 fba5 	bl	80037c0 <HAL_ADC_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800207c:	f000 fbd8 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200003f8 	.word	0x200003f8
 800208c:	50040000 	.word	0x50040000
 8002090:	08600004 	.word	0x08600004

08002094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <MX_TIM2_Init+0x94>)
 80020b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_TIM2_Init+0x94>)
 80020bc:	2204      	movs	r2, #4
 80020be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <MX_TIM2_Init+0x94>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_TIM2_Init+0x94>)
 80020c8:	227c      	movs	r2, #124	; 0x7c
 80020ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_TIM2_Init+0x94>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_TIM2_Init+0x94>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020d8:	4813      	ldr	r0, [pc, #76]	; (8002128 <MX_TIM2_Init+0x94>)
 80020da:	f003 fff3 	bl	80060c4 <HAL_TIM_Base_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020e4:	f000 fba4 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	4619      	mov	r1, r3
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <MX_TIM2_Init+0x94>)
 80020f6:	f004 fa63 	bl	80065c0 <HAL_TIM_ConfigClockSource>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002100:	f000 fb96 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_TIM2_Init+0x94>)
 8002112:	f004 fc85 	bl	8006a20 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800211c:	f000 fb88 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000460 	.word	0x20000460

0800212c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <MX_TIM3_Init+0x98>)
 800214c:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <MX_TIM3_Init+0x9c>)
 800214e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 30000;
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <MX_TIM3_Init+0x98>)
 8002152:	f247 5230 	movw	r2, #30000	; 0x7530
 8002156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_TIM3_Init+0x98>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19998;
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <MX_TIM3_Init+0x98>)
 8002160:	f644 621e 	movw	r2, #19998	; 0x4e1e
 8002164:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <MX_TIM3_Init+0x98>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_TIM3_Init+0x98>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <MX_TIM3_Init+0x98>)
 8002174:	f003 ffa6 	bl	80060c4 <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800217e:	f000 fb57 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4619      	mov	r1, r3
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <MX_TIM3_Init+0x98>)
 8002190:	f004 fa16 	bl	80065c0 <HAL_TIM_ConfigClockSource>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800219a:	f000 fb49 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <MX_TIM3_Init+0x98>)
 80021ac:	f004 fc38 	bl	8006a20 <HAL_TIMEx_MasterConfigSynchronization>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80021b6:	f000 fb3b 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200004ac 	.word	0x200004ac
 80021c8:	40000400 	.word	0x40000400

080021cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <MX_USART2_UART_Init+0x90>)
 80021d2:	4a23      	ldr	r2, [pc, #140]	; (8002260 <MX_USART2_UART_Init+0x94>)
 80021d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <MX_USART2_UART_Init+0x90>)
 80021d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <MX_USART2_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <MX_USART2_UART_Init+0x90>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	; (800225c <MX_USART2_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <MX_USART2_UART_Init+0x90>)
 80021f2:	220c      	movs	r2, #12
 80021f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <MX_USART2_UART_Init+0x90>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <MX_USART2_UART_Init+0x90>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_USART2_UART_Init+0x90>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_USART2_UART_Init+0x90>)
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <MX_USART2_UART_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002214:	4811      	ldr	r0, [pc, #68]	; (800225c <MX_USART2_UART_Init+0x90>)
 8002216:	f004 fca9 	bl	8006b6c <HAL_UART_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002220:	f000 fb06 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002224:	2100      	movs	r1, #0
 8002226:	480d      	ldr	r0, [pc, #52]	; (800225c <MX_USART2_UART_Init+0x90>)
 8002228:	f005 fa72 	bl	8007710 <HAL_UARTEx_SetTxFifoThreshold>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002232:	f000 fafd 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002236:	2100      	movs	r1, #0
 8002238:	4808      	ldr	r0, [pc, #32]	; (800225c <MX_USART2_UART_Init+0x90>)
 800223a:	f005 faa7 	bl	800778c <HAL_UARTEx_SetRxFifoThreshold>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002244:	f000 faf4 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_USART2_UART_Init+0x90>)
 800224a:	f005 fa28 	bl	800769e <HAL_UARTEx_DisableFifoMode>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002254:	f000 faec 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200004f8 	.word	0x200004f8
 8002260:	40004400 	.word	0x40004400

08002264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08e      	sub	sp, #56	; 0x38
 8002268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800227a:	4bb6      	ldr	r3, [pc, #728]	; (8002554 <MX_GPIO_Init+0x2f0>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	4ab5      	ldr	r2, [pc, #724]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002280:	f043 0310 	orr.w	r3, r3, #16
 8002284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002286:	4bb3      	ldr	r3, [pc, #716]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4bb0      	ldr	r3, [pc, #704]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	4aaf      	ldr	r2, [pc, #700]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229e:	4bad      	ldr	r3, [pc, #692]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022aa:	4baa      	ldr	r3, [pc, #680]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	4aa9      	ldr	r2, [pc, #676]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b6:	4ba7      	ldr	r3, [pc, #668]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c2:	4ba4      	ldr	r3, [pc, #656]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4aa3      	ldr	r2, [pc, #652]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ce:	4ba1      	ldr	r3, [pc, #644]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	4b9e      	ldr	r3, [pc, #632]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	4a9d      	ldr	r2, [pc, #628]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e6:	4b9b      	ldr	r3, [pc, #620]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	4b98      	ldr	r3, [pc, #608]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a97      	ldr	r2, [pc, #604]	; (8002554 <MX_GPIO_Init+0x2f0>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fe:	4b95      	ldr	r3, [pc, #596]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800230a:	4b92      	ldr	r3, [pc, #584]	; (8002554 <MX_GPIO_Init+0x2f0>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	4a91      	ldr	r2, [pc, #580]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002316:	4b8f      	ldr	r3, [pc, #572]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8002322:	f002 fa73 	bl	800480c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002326:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a8a      	ldr	r2, [pc, #552]	; (8002554 <MX_GPIO_Init+0x2f0>)
 800232c:	f043 0320 	orr.w	r3, r3, #32
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b88      	ldr	r3, [pc, #544]	; (8002554 <MX_GPIO_Init+0x2f0>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	f243 0102 	movw	r1, #12290	; 0x3002
 8002344:	4884      	ldr	r0, [pc, #528]	; (8002558 <MX_GPIO_Init+0x2f4>)
 8002346:	f002 f961 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	f648 0181 	movw	r1, #34945	; 0x8881
 8002350:	4882      	ldr	r0, [pc, #520]	; (800255c <MX_GPIO_Init+0x2f8>)
 8002352:	f002 f95b 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002360:	f002 f954 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_RST_Pin|SPI2_MISO_p2_Pin, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	2144      	movs	r1, #68	; 0x44
 8002368:	487d      	ldr	r0, [pc, #500]	; (8002560 <MX_GPIO_Init+0x2fc>)
 800236a:	f002 f94f 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 800236e:	2200      	movs	r2, #0
 8002370:	f247 5128 	movw	r1, #29992	; 0x7528
 8002374:	487b      	ldr	r0, [pc, #492]	; (8002564 <MX_GPIO_Init+0x300>)
 8002376:	f002 f949 	bl	800460c <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	2121      	movs	r1, #33	; 0x21
 800237e:	487a      	ldr	r0, [pc, #488]	; (8002568 <MX_GPIO_Init+0x304>)
 8002380:	f002 f944 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800238a:	4878      	ldr	r0, [pc, #480]	; (800256c <MX_GPIO_Init+0x308>)
 800238c:	f002 f93e 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8002390:	f240 4301 	movw	r3, #1025	; 0x401
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800239e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a2:	4619      	mov	r1, r3
 80023a4:	486c      	ldr	r0, [pc, #432]	; (8002558 <MX_GPIO_Init+0x2f4>)
 80023a6:	f001 ff9f 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 80023aa:	f244 3301 	movw	r3, #17153	; 0x4301
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b0:	2303      	movs	r3, #3
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	486b      	ldr	r0, [pc, #428]	; (800256c <MX_GPIO_Init+0x308>)
 80023c0:	f001 ff92 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 80023c4:	2308      	movs	r3, #8
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	4619      	mov	r1, r3
 80023d6:	4866      	ldr	r0, [pc, #408]	; (8002570 <MX_GPIO_Init+0x30c>)
 80023d8:	f001 ff86 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 80023dc:	2338      	movs	r3, #56	; 0x38
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023ec:	2306      	movs	r3, #6
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	4619      	mov	r1, r3
 80023f6:	485d      	ldr	r0, [pc, #372]	; (800256c <MX_GPIO_Init+0x308>)
 80023f8:	f001 ff76 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80023fc:	230a      	movs	r3, #10
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800240c:	2305      	movs	r3, #5
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	4851      	ldr	r0, [pc, #324]	; (800255c <MX_GPIO_Init+0x2f8>)
 8002418:	f001 ff66 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 800241c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800242e:	230c      	movs	r3, #12
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	4849      	ldr	r0, [pc, #292]	; (8002560 <MX_GPIO_Init+0x2fc>)
 800243a:	f001 ff55 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 800243e:	f64c 1308 	movw	r3, #51464	; 0xc908
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002444:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800244e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002452:	4619      	mov	r1, r3
 8002454:	4840      	ldr	r0, [pc, #256]	; (8002558 <MX_GPIO_Init+0x2f4>)
 8002456:	f001 ff47 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 800245a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800246c:	230a      	movs	r3, #10
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247a:	f001 ff35 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 800247e:	23f4      	movs	r3, #244	; 0xf4
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800248e:	230d      	movs	r3, #13
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002496:	4619      	mov	r1, r3
 8002498:	482f      	ldr	r0, [pc, #188]	; (8002558 <MX_GPIO_Init+0x2f4>)
 800249a:	f001 ff25 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin PE12 */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin|GPIO_PIN_12;
 800249e:	f243 0302 	movw	r3, #12290	; 0x3002
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a4:	2301      	movs	r3, #1
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b4:	4619      	mov	r1, r3
 80024b6:	4828      	ldr	r0, [pc, #160]	; (8002558 <MX_GPIO_Init+0x2f4>)
 80024b8:	f001 ff16 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 80024bc:	f648 0381 	movw	r3, #34945	; 0x8881
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c2:	2301      	movs	r3, #1
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	4821      	ldr	r0, [pc, #132]	; (800255c <MX_GPIO_Init+0x2f8>)
 80024d6:	f001 ff07 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 80024da:	f240 6313 	movw	r3, #1555	; 0x613
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e0:	2303      	movs	r3, #3
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f2:	f001 fef9 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 80024f6:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002500:	2302      	movs	r3, #2
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002508:	2306      	movs	r3, #6
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002510:	4619      	mov	r1, r3
 8002512:	4816      	ldr	r0, [pc, #88]	; (800256c <MX_GPIO_Init+0x308>)
 8002514:	f001 fee8 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8002518:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800251e:	2303      	movs	r3, #3
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252a:	4619      	mov	r1, r3
 800252c:	480e      	ldr	r0, [pc, #56]	; (8002568 <MX_GPIO_Init+0x304>)
 800252e:	f001 fedb 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002532:	2304      	movs	r3, #4
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002542:	230c      	movs	r3, #12
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254a:	4619      	mov	r1, r3
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <MX_GPIO_Init+0x2f8>)
 800254e:	f001 fecb 	bl	80042e8 <HAL_GPIO_Init>
 8002552:	e00f      	b.n	8002574 <MX_GPIO_Init+0x310>
 8002554:	40021000 	.word	0x40021000
 8002558:	48001000 	.word	0x48001000
 800255c:	48000c00 	.word	0x48000c00
 8002560:	48000800 	.word	0x48000800
 8002564:	48001400 	.word	0x48001400
 8002568:	48001800 	.word	0x48001800
 800256c:	48000400 	.word	0x48000400
 8002570:	48001c00 	.word	0x48001c00

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8002574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257a:	2301      	movs	r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	4619      	mov	r1, r3
 800258c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002590:	f001 feaa 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|SPI2_MISO_p2_Pin;
 8002594:	2344      	movs	r3, #68	; 0x44
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002598:	2301      	movs	r3, #1
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a8:	4619      	mov	r1, r3
 80025aa:	489b      	ldr	r0, [pc, #620]	; (8002818 <MX_GPIO_Init+0x5b4>)
 80025ac:	f001 fe9c 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 80025b0:	2307      	movs	r3, #7
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b4:	2312      	movs	r3, #18
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025c0:	2304      	movs	r3, #4
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	4894      	ldr	r0, [pc, #592]	; (800281c <MX_GPIO_Init+0x5b8>)
 80025cc:	f001 fe8c 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 80025d0:	f247 5328 	movw	r3, #29992	; 0x7528
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e6:	4619      	mov	r1, r3
 80025e8:	488c      	ldr	r0, [pc, #560]	; (800281c <MX_GPIO_Init+0x5b8>)
 80025ea:	f001 fe7d 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 80025ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f4:	2312      	movs	r3, #18
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002600:	2304      	movs	r3, #4
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002608:	4619      	mov	r1, r3
 800260a:	4885      	ldr	r0, [pc, #532]	; (8002820 <MX_GPIO_Init+0x5bc>)
 800260c:	f001 fe6c 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8002610:	2340      	movs	r3, #64	; 0x40
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261c:	2302      	movs	r3, #2
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002620:	2302      	movs	r3, #2
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8002624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002628:	4619      	mov	r1, r3
 800262a:	487c      	ldr	r0, [pc, #496]	; (800281c <MX_GPIO_Init+0x5b8>)
 800262c:	f001 fe5c 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8002630:	f44f 7324 	mov.w	r3, #656	; 0x290
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002636:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002644:	4619      	mov	r1, r3
 8002646:	4875      	ldr	r0, [pc, #468]	; (800281c <MX_GPIO_Init+0x5b8>)
 8002648:	f001 fe4e 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 800264c:	231c      	movs	r3, #28
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800265c:	2305      	movs	r3, #5
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002664:	4619      	mov	r1, r3
 8002666:	486e      	ldr	r0, [pc, #440]	; (8002820 <MX_GPIO_Init+0x5bc>)
 8002668:	f001 fe3e 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 800266c:	2321      	movs	r3, #33	; 0x21
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002670:	2301      	movs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800267c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002680:	4619      	mov	r1, r3
 8002682:	4867      	ldr	r0, [pc, #412]	; (8002820 <MX_GPIO_Init+0x5bc>)
 8002684:	f001 fe30 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8002688:	2342      	movs	r3, #66	; 0x42
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800268c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269a:	4619      	mov	r1, r3
 800269c:	4860      	ldr	r0, [pc, #384]	; (8002820 <MX_GPIO_Init+0x5bc>)
 800269e:	f001 fe23 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 80026a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a8:	2312      	movs	r3, #18
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80026b4:	2304      	movs	r3, #4
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	4619      	mov	r1, r3
 80026be:	4859      	ldr	r0, [pc, #356]	; (8002824 <MX_GPIO_Init+0x5c0>)
 80026c0:	f001 fe12 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 80026c4:	f241 0304 	movw	r3, #4100	; 0x1004
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d6:	4619      	mov	r1, r3
 80026d8:	4853      	ldr	r0, [pc, #332]	; (8002828 <MX_GPIO_Init+0x5c4>)
 80026da:	f001 fe05 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 80026de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	4619      	mov	r1, r3
 80026f2:	484a      	ldr	r0, [pc, #296]	; (800281c <MX_GPIO_Init+0x5b8>)
 80026f4:	f001 fdf8 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 80026f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002704:	2301      	movs	r3, #1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8002708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270c:	4619      	mov	r1, r3
 800270e:	4845      	ldr	r0, [pc, #276]	; (8002824 <MX_GPIO_Init+0x5c0>)
 8002710:	f001 fdea 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8002714:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002722:	2303      	movs	r3, #3
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002726:	2307      	movs	r3, #7
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272e:	4619      	mov	r1, r3
 8002730:	483c      	ldr	r0, [pc, #240]	; (8002824 <MX_GPIO_Init+0x5c0>)
 8002732:	f001 fdd9 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002736:	2308      	movs	r3, #8
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002746:	2305      	movs	r3, #5
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800274a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274e:	4619      	mov	r1, r3
 8002750:	4831      	ldr	r0, [pc, #196]	; (8002818 <MX_GPIO_Init+0x5b4>)
 8002752:	f001 fdc9 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8002756:	f242 0302 	movw	r3, #8194	; 0x2002
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002768:	2307      	movs	r3, #7
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	4619      	mov	r1, r3
 8002772:	482d      	ldr	r0, [pc, #180]	; (8002828 <MX_GPIO_Init+0x5c4>)
 8002774:	f001 fdb8 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002782:	2302      	movs	r3, #2
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002786:	2303      	movs	r3, #3
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800278a:	2306      	movs	r3, #6
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4825      	ldr	r0, [pc, #148]	; (800282c <MX_GPIO_Init+0x5c8>)
 8002796:	f001 fda7 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 800279a:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a0:	2301      	movs	r3, #1
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	481d      	ldr	r0, [pc, #116]	; (8002828 <MX_GPIO_Init+0x5c4>)
 80027b4:	f001 fd98 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80027b8:	2320      	movs	r3, #32
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	4812      	ldr	r0, [pc, #72]	; (8002818 <MX_GPIO_Init+0x5b4>)
 80027ce:	f001 fd8b 	bl	80042e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 80027d2:	2304      	movs	r3, #4
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e4:	4619      	mov	r1, r3
 80027e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ea:	f001 fd7d 	bl	80042e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	2017      	movs	r0, #23
 80027f4:	f001 fd41 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027f8:	2017      	movs	r0, #23
 80027fa:	f001 fd5a 	bl	80042b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2100      	movs	r1, #0
 8002802:	2028      	movs	r0, #40	; 0x28
 8002804:	f001 fd39 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002808:	2028      	movs	r0, #40	; 0x28
 800280a:	f001 fd52 	bl	80042b2 <HAL_NVIC_EnableIRQ>

}
 800280e:	bf00      	nop
 8002810:	3738      	adds	r7, #56	; 0x38
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	48000800 	.word	0x48000800
 800281c:	48001400 	.word	0x48001400
 8002820:	48001800 	.word	0x48001800
 8002824:	48000c00 	.word	0x48000c00
 8002828:	48000400 	.word	0x48000400
 800282c:	48001000 	.word	0x48001000

08002830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002834:	b672      	cpsid	i
}
 8002836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002838:	e7fe      	b.n	8002838 <Error_Handler+0x8>
	...

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_MspInit+0x44>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <HAL_MspInit+0x44>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6613      	str	r3, [r2, #96]	; 0x60
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <HAL_MspInit+0x44>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <HAL_MspInit+0x44>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <HAL_MspInit+0x44>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_MspInit+0x44>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b0b2      	sub	sp, #200	; 0xc8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800289c:	f107 0318 	add.w	r3, r7, #24
 80028a0:	229c      	movs	r2, #156	; 0x9c
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 f827 	bl	80078f8 <memset>
  if(hadc->Instance==ADC1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a35      	ldr	r2, [pc, #212]	; (8002984 <HAL_ADC_MspInit+0x100>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d162      	bne.n	800297a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80028c2:	2302      	movs	r3, #2
 80028c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80028c6:	2305      	movs	r3, #5
 80028c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80028ca:	2360      	movs	r3, #96	; 0x60
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 80028ce:	2319      	movs	r3, #25
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80028d2:	2304      	movs	r3, #4
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80028d6:	2304      	movs	r3, #4
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80028da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e0:	f107 0318 	add.w	r3, r7, #24
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fe75 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80028f0:	f7ff ff9e 	bl	8002830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80028f4:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_ADC_MspInit+0x104>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <HAL_ADC_MspInit+0x104>)
 80028fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002900:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_ADC_MspInit+0x104>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <HAL_ADC_MspInit+0x104>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <HAL_ADC_MspInit+0x104>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_ADC_MspInit+0x104>)
 800291a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_ADC_MspInit+0x104>)
 8002926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_ADC_MspInit+0x104>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_ADC_MspInit+0x104>)
 8002932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 800293c:	2313      	movs	r3, #19
 800293e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002942:	230b      	movs	r3, #11
 8002944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002952:	4619      	mov	r1, r3
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <HAL_ADC_MspInit+0x108>)
 8002956:	f001 fcc7 	bl	80042e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EX_ADC_Pin;
 800295a:	2320      	movs	r3, #32
 800295c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002960:	230b      	movs	r3, #11
 8002962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002970:	4619      	mov	r1, r3
 8002972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002976:	f001 fcb7 	bl	80042e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800297a:	bf00      	nop
 800297c:	37c8      	adds	r7, #200	; 0xc8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	50040000 	.word	0x50040000
 8002988:	40021000 	.word	0x40021000
 800298c:	48000800 	.word	0x48000800

08002990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d132      	bne.n	8002a18 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = EX_PWM_Pin;
 80029e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a02:	f001 fc71 	bl	80042e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	201c      	movs	r0, #28
 8002a0c:	f001 fc35 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a10:	201c      	movs	r0, #28
 8002a12:	f001 fc4e 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a16:	e018      	b.n	8002a4a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <HAL_TIM_Base_MspInit+0xc8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d113      	bne.n	8002a4a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_TIM_Base_MspInit+0xc4>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	201d      	movs	r0, #29
 8002a40:	f001 fc1b 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a44:	201d      	movs	r0, #29
 8002a46:	f001 fc34 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	; 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40000400 	.word	0x40000400

08002a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0b0      	sub	sp, #192	; 0xc0
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a74:	f107 0310 	add.w	r3, r7, #16
 8002a78:	229c      	movs	r2, #156	; 0x9c
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f004 ff3b 	bl	80078f8 <memset>
  if(huart->Instance==USART2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <HAL_UART_MspInit+0xb0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d13a      	bne.n	8002b02 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 fd9b 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002aa4:	f7ff fec4 	bl	8002830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_UART_MspInit+0xb4>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_UART_MspInit+0xb4>)
 8002aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_UART_MspInit+0xb4>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <HAL_UART_MspInit+0xb4>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac4:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <HAL_UART_MspInit+0xb4>)
 8002ac6:	f043 0308 	orr.w	r3, r3, #8
 8002aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_UART_MspInit+0xb4>)
 8002ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8002ad8:	2370      	movs	r3, #112	; 0x70
 8002ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aea:	2303      	movs	r3, #3
 8002aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002af0:	2307      	movs	r3, #7
 8002af2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002afa:	4619      	mov	r1, r3
 8002afc:	4805      	ldr	r0, [pc, #20]	; (8002b14 <HAL_UART_MspInit+0xb8>)
 8002afe:	f001 fbf3 	bl	80042e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	37c0      	adds	r7, #192	; 0xc0
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40004400 	.word	0x40004400
 8002b10:	40021000 	.word	0x40021000
 8002b14:	48000c00 	.word	0x48000c00

08002b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <NMI_Handler+0x4>

08002b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <HardFault_Handler+0x4>

08002b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <MemManage_Handler+0x4>

08002b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <BusFault_Handler+0x4>

08002b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <UsageFault_Handler+0x4>

08002b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b64:	f000 f9e6 	bl	8002f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if(state==0){
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <EXTI9_5_IRQHandler+0x50>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d106      	bne.n	8002b86 <EXTI9_5_IRQHandler+0x1a>
		HAL_TIM_Base_Start_IT(&htim2);
 8002b78:	4811      	ldr	r0, [pc, #68]	; (8002bc0 <EXTI9_5_IRQHandler+0x54>)
 8002b7a:	f003 fb63 	bl	8006244 <HAL_TIM_Base_Start_IT>
		i=0;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <EXTI9_5_IRQHandler+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	e006      	b.n	8002b94 <EXTI9_5_IRQHandler+0x28>
	}
	else if(state==2)
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <EXTI9_5_IRQHandler+0x50>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d102      	bne.n	8002b94 <EXTI9_5_IRQHandler+0x28>
		HAL_TIM_Base_Start_IT(&htim2);
 8002b8e:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <EXTI9_5_IRQHandler+0x54>)
 8002b90:	f003 fb58 	bl	8006244 <HAL_TIM_Base_Start_IT>


		//questo è per external interrrupt

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b94:	2020      	movs	r0, #32
 8002b96:	f001 fd51 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8002b9a:	2040      	movs	r0, #64	; 0x40
 8002b9c:	f001 fd4e 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PGOOD_Pin);
 8002ba0:	2080      	movs	r0, #128	; 0x80
 8002ba2:	f001 fd4b 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT1_DHC_Pin);
 8002ba6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002baa:	f001 fd47 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_M_Pin);
 8002bae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002bb2:	f001 fd43 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000058a 	.word	0x2000058a
 8002bc0:	20000460 	.word	0x20000460
 8002bc4:	20000588 	.word	0x20000588

08002bc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
			HAL_ADC_Start(&hadc1);
 8002bcc:	4819      	ldr	r0, [pc, #100]	; (8002c34 <TIM2_IRQHandler+0x6c>)
 8002bce:	f000 fcf7 	bl	80035c0 <HAL_ADC_Start>
			HAL_TIM_Base_Start(&htim3);
 8002bd2:	4819      	ldr	r0, [pc, #100]	; (8002c38 <TIM2_IRQHandler+0x70>)
 8002bd4:	f003 face 	bl	8006174 <HAL_TIM_Base_Start>
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <TIM2_IRQHandler+0x70>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_ADC_PollForConversion(&hadc1, 1);
 8002be0:	2101      	movs	r1, #1
 8002be2:	4814      	ldr	r0, [pc, #80]	; (8002c34 <TIM2_IRQHandler+0x6c>)
 8002be4:	f000 fd4f 	bl	8003686 <HAL_ADC_PollForConversion>
			value[i] = HAL_ADC_GetValue(&hadc1);
 8002be8:	4812      	ldr	r0, [pc, #72]	; (8002c34 <TIM2_IRQHandler+0x6c>)
 8002bea:	f000 fddb 	bl	80037a4 <HAL_ADC_GetValue>
 8002bee:	4601      	mov	r1, r0
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <TIM2_IRQHandler+0x74>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	b289      	uxth	r1, r1
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <TIM2_IRQHandler+0x78>)
 8002bfa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			i++;
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <TIM2_IRQHandler+0x74>)
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <TIM2_IRQHandler+0x74>)
 8002c08:	801a      	strh	r2, [r3, #0]
			if (i == dim_buff) {
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <TIM2_IRQHandler+0x74>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	f242 2201 	movw	r2, #8705	; 0x2201
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d108      	bne.n	8002c28 <TIM2_IRQHandler+0x60>
				i = 0;
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <TIM2_IRQHandler+0x74>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	801a      	strh	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim2);
 8002c1c:	4809      	ldr	r0, [pc, #36]	; (8002c44 <TIM2_IRQHandler+0x7c>)
 8002c1e:	f003 fb81 	bl	8006324 <HAL_TIM_Base_Stop_IT>
				state = 1;
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <TIM2_IRQHandler+0x80>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
			}



  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c28:	4806      	ldr	r0, [pc, #24]	; (8002c44 <TIM2_IRQHandler+0x7c>)
 8002c2a:	f003 fbaa 	bl	8006382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200003f8 	.word	0x200003f8
 8002c38:	200004ac 	.word	0x200004ac
 8002c3c:	20000588 	.word	0x20000588
 8002c40:	2000058c 	.word	0x2000058c
 8002c44:	20000460 	.word	0x20000460
 8002c48:	2000058a 	.word	0x2000058a

08002c4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <TIM3_IRQHandler+0x10>)
 8002c52:	f003 fb96 	bl	8006382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200004ac 	.word	0x200004ac

08002c60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
//		}
//		else if(state==2)
//			HAL_TIM_Base_Start_IT(&htim2);
//	questo serve per il power button
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8002c64:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c68:	f001 fce8 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(WIFI_DRDY_Pin);
 8002c6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c70:	f001 fce4 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT1_ADWB_Pin);
 8002c74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c78:	f001 fce0 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8002c7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c80:	f001 fcdc 	bl	800463c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return 1;
 8002c8c:	2301      	movs	r3, #1
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_kill>:

int _kill(int pid, int sig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ca2:	f004 fdff 	bl	80078a4 <__errno>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2216      	movs	r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
  return -1;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_exit>:

void _exit (int status)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ffe7 	bl	8002c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cca:	e7fe      	b.n	8002cca <_exit+0x12>

08002ccc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e00a      	b.n	8002cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cde:	f3af 8000 	nop.w
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	60ba      	str	r2, [r7, #8]
 8002cea:	b2ca      	uxtb	r2, r1
 8002cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf0      	blt.n	8002cde <_read+0x12>
  }

  return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e009      	b.n	8002d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	60ba      	str	r2, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	dbf1      	blt.n	8002d18 <_write+0x12>
  }
  return len;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_close>:

int _close(int file)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d66:	605a      	str	r2, [r3, #4]
  return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <_isatty>:

int _isatty(int file)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <_sbrk+0x5c>)
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <_sbrk+0x60>)
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <_sbrk+0x64>)
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <_sbrk+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d207      	bcs.n	8002de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd8:	f004 fd64 	bl	80078a4 <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	220c      	movs	r2, #12
 8002de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	e009      	b.n	8002dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <_sbrk+0x64>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <_sbrk+0x64>)
 8002df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	200a0000 	.word	0x200a0000
 8002e08:	00000400 	.word	0x00000400
 8002e0c:	20011df4 	.word	0x20011df4
 8002e10:	20011e10 	.word	0x20011e10

08002e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <SystemInit+0x20>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <SystemInit+0x20>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e3c:	f7ff ffea 	bl	8002e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e42:	490d      	ldr	r1, [pc, #52]	; (8002e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <LoopForever+0xe>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <LoopForever+0x16>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e66:	f004 fd23 	bl	80078b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e6a:	f7fe ffff 	bl	8001e6c <main>

08002e6e <LoopForever>:

LoopForever:
    b LoopForever
 8002e6e:	e7fe      	b.n	8002e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e70:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e78:	200003dc 	.word	0x200003dc
  ldr r2, =_sidata
 8002e7c:	0800ad3c 	.word	0x0800ad3c
  ldr r2, =_sbss
 8002e80:	200003dc 	.word	0x200003dc
  ldr r4, =_ebss
 8002e84:	20011e0c 	.word	0x20011e0c

08002e88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC1_IRQHandler>

08002e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f001 f9e5 	bl	8004264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f000 f80e 	bl	8002ebc <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	71fb      	strb	r3, [r7, #7]
 8002eaa:	e001      	b.n	8002eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002eac:	f7ff fcc6 	bl	800283c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <HAL_InitTick+0x6c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_InitTick+0x70>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_InitTick+0x6c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 f9f1 	bl	80042ce <HAL_SYSTICK_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b0f      	cmp	r3, #15
 8002ef6:	d809      	bhi.n	8002f0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f001 f9bb 	bl	800427a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f04:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_InitTick+0x74>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e007      	b.n	8002f1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e004      	b.n	8002f1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e001      	b.n	8002f1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000208 	.word	0x20000208
 8002f2c:	20000200 	.word	0x20000200
 8002f30:	20000204 	.word	0x20000204

08002f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_IncTick+0x20>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_IncTick+0x24>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_IncTick+0x24>)
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000208 	.word	0x20000208
 8002f58:	20011df8 	.word	0x20011df8

08002f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_GetTick+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20011df8 	.word	0x20011df8

08002f74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3360      	adds	r3, #96	; 0x60
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <LL_ADC_SetOffset+0x44>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	4313      	orrs	r3, r2
 800300c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	03fff000 	.word	0x03fff000

08003024 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3360      	adds	r3, #96	; 0x60
 8003032:	461a      	mov	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3360      	adds	r3, #96	; 0x60
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	431a      	orrs	r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	615a      	str	r2, [r3, #20]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b087      	sub	sp, #28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3330      	adds	r3, #48	; 0x30
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	4413      	add	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	211f      	movs	r1, #31
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	401a      	ands	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	f003 011f 	and.w	r1, r3, #31
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	431a      	orrs	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800312a:	b480      	push	{r7}
 800312c:	b087      	sub	sp, #28
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3314      	adds	r3, #20
 800313a:	461a      	mov	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	0e5b      	lsrs	r3, r3, #25
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	4413      	add	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	0d1b      	lsrs	r3, r3, #20
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2107      	movs	r1, #7
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	0d1b      	lsrs	r3, r3, #20
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	431a      	orrs	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003198:	43db      	mvns	r3, r3
 800319a:	401a      	ands	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0318 	and.w	r3, r3, #24
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031a4:	40d9      	lsrs	r1, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	400b      	ands	r3, r1
 80031aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	0007ffff 	.word	0x0007ffff

080031c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6093      	str	r3, [r2, #8]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003200:	d101      	bne.n	8003206 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003228:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003250:	d101      	bne.n	8003256 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <LL_ADC_IsEnabled+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_ADC_IsEnabled+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032c6:	f043 0204 	orr.w	r2, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d101      	bne.n	80032f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b08      	cmp	r3, #8
 8003312:	d101      	bne.n	8003318 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e12f      	b.n	80035a2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fa97 	bl	8002884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff3f 	bl	80031ec <LL_ADC_IsDeepPowerDownEnabled>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff25 	bl	80031c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ff5a 	bl	800323c <LL_ADC_IsInternalRegulatorEnabled>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d115      	bne.n	80033ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ff3e 	bl	8003214 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003398:	4b84      	ldr	r3, [pc, #528]	; (80035ac <HAL_ADC_Init+0x284>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	4a84      	ldr	r2, [pc, #528]	; (80035b0 <HAL_ADC_Init+0x288>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	3301      	adds	r3, #1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033ac:	e002      	b.n	80033b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f9      	bne.n	80033ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff3c 	bl	800323c <LL_ADC_IsInternalRegulatorEnabled>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10d      	bne.n	80033e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff75 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 80033f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 80c8 	bne.w	8003590 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 80c4 	bne.w	8003590 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003410:	f043 0202 	orr.w	r2, r3, #2
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff35 	bl	800328c <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003428:	4862      	ldr	r0, [pc, #392]	; (80035b4 <HAL_ADC_Init+0x28c>)
 800342a:	f7ff ff2f 	bl	800328c <LL_ADC_IsEnabled>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4619      	mov	r1, r3
 800343a:	485f      	ldr	r0, [pc, #380]	; (80035b8 <HAL_ADC_Init+0x290>)
 800343c:	f7ff fd9a 	bl	8002f74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	7e5b      	ldrb	r3, [r3, #25]
 8003444:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800344a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003450:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003456:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800345e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d106      	bne.n	800347c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	3b01      	subs	r3, #1
 8003474:	045b      	lsls	r3, r3, #17
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_ADC_Init+0x294>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff12 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 80034b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff1f 	bl	8003300 <LL_ADC_INJ_IsConversionOngoing>
 80034c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d140      	bne.n	800354c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d13d      	bne.n	800354c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e1b      	ldrb	r3, [r3, #24]
 80034d8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034da:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f2:	f023 0306 	bic.w	r3, r3, #6
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003506:	2b01      	cmp	r3, #1
 8003508:	d118      	bne.n	800353c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003520:	4311      	orrs	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800352c:	430a      	orrs	r2, r1
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	e007      	b.n	800354c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d10c      	bne.n	800356e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f023 010f 	bic.w	r1, r3, #15
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	1e5a      	subs	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
 800356c:	e007      	b.n	800357e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020f 	bic.w	r2, r2, #15
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	659a      	str	r2, [r3, #88]	; 0x58
 800358e:	e007      	b.n	80035a0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	f043 0210 	orr.w	r2, r3, #16
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000200 	.word	0x20000200
 80035b0:	053e2d63 	.word	0x053e2d63
 80035b4:	50040000 	.word	0x50040000
 80035b8:	50040300 	.word	0x50040300
 80035bc:	fff0c007 	.word	0xfff0c007

080035c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fe84 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d14f      	bne.n	8003678 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_Start+0x26>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e04b      	b.n	800367e <HAL_ADC_Start+0xbe>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fce2 	bl	8003fb8 <ADC_Enable>
 80035f4:	4603      	mov	r3, r0
 80035f6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d137      	bne.n	800366e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	d106      	bne.n	800362e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	f023 0206 	bic.w	r2, r3, #6
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	; 0x5c
 800362c:	e002      	b.n	8003634 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	221c      	movs	r2, #28
 800363a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800365a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fe23 	bl	80032b2 <LL_ADC_REG_StartConversion>
 800366c:	e006      	b.n	800367c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003676:	e001      	b.n	800367c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003678:	2302      	movs	r3, #2
 800367a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d102      	bne.n	800369e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003698:	2308      	movs	r3, #8
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e010      	b.n	80036c0 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e06f      	b.n	800379c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80036bc:	2304      	movs	r3, #4
 80036be:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80036c0:	f7ff fc4c 	bl	8002f5c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036c6:	e021      	b.n	800370c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d01d      	beq.n	800370c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036d0:	f7ff fc44 	bl	8002f5c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d302      	bcc.n	80036e6 <HAL_ADC_PollForConversion+0x60>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d112      	bne.n	800370c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e047      	b.n	800379c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0d6      	beq.n	80036c8 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fcbe 	bl	80030ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01c      	beq.n	8003770 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	7e5b      	ldrb	r3, [r3, #25]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b08      	cmp	r3, #8
 800374a:	d111      	bne.n	8003770 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b08      	cmp	r3, #8
 800377c:	d104      	bne.n	8003788 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2208      	movs	r2, #8
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e008      	b.n	800379a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	220c      	movs	r2, #12
 8003798:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b0b6      	sub	sp, #216	; 0xd8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x22>
 80037de:	2302      	movs	r3, #2
 80037e0:	e3d5      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x7ce>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fd73 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f040 83ba 	bne.w	8003f70 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b05      	cmp	r3, #5
 8003802:	d824      	bhi.n	800384e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	3b02      	subs	r3, #2
 800380a:	2b03      	cmp	r3, #3
 800380c:	d81b      	bhi.n	8003846 <HAL_ADC_ConfigChannel+0x86>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <HAL_ADC_ConfigChannel+0x54>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003825 	.word	0x08003825
 8003818:	0800382d 	.word	0x0800382d
 800381c:	08003835 	.word	0x08003835
 8003820:	0800383d 	.word	0x0800383d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	220c      	movs	r2, #12
 8003828:	605a      	str	r2, [r3, #4]
          break;
 800382a:	e011      	b.n	8003850 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2212      	movs	r2, #18
 8003830:	605a      	str	r2, [r3, #4]
          break;
 8003832:	e00d      	b.n	8003850 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2218      	movs	r2, #24
 8003838:	605a      	str	r2, [r3, #4]
          break;
 800383a:	e009      	b.n	8003850 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003842:	605a      	str	r2, [r3, #4]
          break;
 8003844:	e004      	b.n	8003850 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2206      	movs	r2, #6
 800384a:	605a      	str	r2, [r3, #4]
          break;
 800384c:	e000      	b.n	8003850 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800384e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	f7ff fc38 	bl	80030d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fd37 	bl	80032da <LL_ADC_REG_IsConversionOngoing>
 800386c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fd43 	bl	8003300 <LL_ADC_INJ_IsConversionOngoing>
 800387a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800387e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f040 81c1 	bne.w	8003c0a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800388c:	2b00      	cmp	r3, #0
 800388e:	f040 81bc 	bne.w	8003c0a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800389a:	d10f      	bne.n	80038bc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2200      	movs	r2, #0
 80038a6:	4619      	mov	r1, r3
 80038a8:	f7ff fc3f 	bl	800312a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fbe6 	bl	8003086 <LL_ADC_SetSamplingTimeCommonConfig>
 80038ba:	e00e      	b.n	80038da <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f7ff fc2e 	bl	800312a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fbd6 	bl	8003086 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d00a      	beq.n	8003912 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6919      	ldr	r1, [r3, #16]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800390c:	f7ff fb66 	bl	8002fdc <LL_ADC_SetOffset>
 8003910:	e17b      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fb83 	bl	8003024 <LL_ADC_GetOffsetChannel>
 800391e:	4603      	mov	r3, r0
 8003920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <HAL_ADC_ConfigChannel+0x17e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fb78 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003934:	4603      	mov	r3, r0
 8003936:	0e9b      	lsrs	r3, r3, #26
 8003938:	f003 021f 	and.w	r2, r3, #31
 800393c:	e01e      	b.n	800397c <HAL_ADC_ConfigChannel+0x1bc>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fb6d 	bl	8003024 <LL_ADC_GetOffsetChannel>
 800394a:	4603      	mov	r3, r0
 800394c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800395c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e004      	b.n	800397a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x1d4>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0e9b      	lsrs	r3, r3, #26
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	e018      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x206>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80039a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80039b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80039b8:	2320      	movs	r3, #32
 80039ba:	e004      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80039bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d106      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2200      	movs	r2, #0
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fb3c 	bl	8003050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fb20 	bl	8003024 <LL_ADC_GetOffsetChannel>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x244>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fb15 	bl	8003024 <LL_ADC_GetOffsetChannel>
 80039fa:	4603      	mov	r3, r0
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	f003 021f 	and.w	r2, r3, #31
 8003a02:	e01e      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x282>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fb0a 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003a32:	2320      	movs	r3, #32
 8003a34:	e004      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8003a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x29a>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	0e9b      	lsrs	r3, r3, #26
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	e018      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x2cc>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003a6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	e004      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d106      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fad9 	bl	8003050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fabd 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x30a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fab2 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	0e9b      	lsrs	r3, r3, #26
 8003ac4:	f003 021f 	and.w	r2, r3, #31
 8003ac8:	e01e      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x348>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2102      	movs	r1, #2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff faa7 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003af8:	2320      	movs	r3, #32
 8003afa:	e004      	b.n	8003b06 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x360>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0e9b      	lsrs	r3, r3, #26
 8003b1a:	f003 031f 	and.w	r3, r3, #31
 8003b1e:	e016      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x38e>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003b32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	e004      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d106      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fa78 	bl	8003050 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2103      	movs	r1, #3
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fa5c 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x3cc>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2103      	movs	r1, #3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fa51 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	0e9b      	lsrs	r3, r3, #26
 8003b86:	f003 021f 	and.w	r2, r3, #31
 8003b8a:	e017      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x3fc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2103      	movs	r1, #3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fa46 	bl	8003024 <LL_ADC_GetOffsetChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003bae:	2320      	movs	r3, #32
 8003bb0:	e003      	b.n	8003bba <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d105      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x414>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0e9b      	lsrs	r3, r3, #26
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	e011      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x438>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e003      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d106      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2103      	movs	r1, #3
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fa23 	bl	8003050 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fb3c 	bl	800328c <LL_ADC_IsEnabled>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 8140 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f7ff faa9 	bl	8003180 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4a8f      	ldr	r2, [pc, #572]	; (8003e70 <HAL_ADC_ConfigChannel+0x6b0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	f040 8131 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10b      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x4a2>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	0e9b      	lsrs	r3, r3, #26
 8003c50:	3301      	adds	r3, #1
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2b09      	cmp	r3, #9
 8003c58:	bf94      	ite	ls
 8003c5a:	2301      	movls	r3, #1
 8003c5c:	2300      	movhi	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e019      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x4d6>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c72:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	e003      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2b09      	cmp	r3, #9
 8003c8e:	bf94      	ite	ls
 8003c90:	2301      	movls	r3, #1
 8003c92:	2300      	movhi	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d079      	beq.n	8003d8e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x4f6>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0e9b      	lsrs	r3, r3, #26
 8003cac:	3301      	adds	r3, #1
 8003cae:	069b      	lsls	r3, r3, #26
 8003cb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb4:	e015      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x522>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003cce:	2320      	movs	r3, #32
 8003cd0:	e003      	b.n	8003cda <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	069b      	lsls	r3, r3, #26
 8003cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x542>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	0e9b      	lsrs	r3, r3, #26
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	e017      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x572>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0a:	fa93 f3a3 	rbit	r3, r3
 8003d0e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	e003      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	ea42 0103 	orr.w	r1, r2, r3
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x598>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	0e9b      	lsrs	r3, r3, #26
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f003 021f 	and.w	r2, r3, #31
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	051b      	lsls	r3, r3, #20
 8003d56:	e018      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x5ca>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003d70:	2320      	movs	r3, #32
 8003d72:	e003      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	f003 021f 	and.w	r2, r3, #31
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	e081      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d107      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x5ea>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	0e9b      	lsrs	r3, r3, #26
 8003da0:	3301      	adds	r3, #1
 8003da2:	069b      	lsls	r3, r3, #26
 8003da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003da8:	e015      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x616>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e003      	b.n	8003dce <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x636>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	0e9b      	lsrs	r3, r3, #26
 8003de8:	3301      	adds	r3, #1
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	2101      	movs	r1, #1
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	e017      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x666>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	61fb      	str	r3, [r7, #28]
  return result;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e003      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	ea42 0103 	orr.w	r1, r2, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10d      	bne.n	8003e52 <HAL_ADC_ConfigChannel+0x692>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	0e9b      	lsrs	r3, r3, #26
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f003 021f 	and.w	r2, r3, #31
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	3b1e      	subs	r3, #30
 8003e4a:	051b      	lsls	r3, r3, #20
 8003e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e50:	e01e      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x6d0>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	613b      	str	r3, [r7, #16]
  return result;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d104      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	e006      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x6bc>
 8003e6e:	bf00      	nop
 8003e70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	fab3 f383 	clz	r3, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	f003 021f 	and.w	r2, r3, #31
 8003e82:	4613      	mov	r3, r2
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	4413      	add	r3, r2
 8003e88:	3b1e      	subs	r3, #30
 8003e8a:	051b      	lsls	r3, r3, #20
 8003e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e90:	430b      	orrs	r3, r1
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	4619      	mov	r1, r3
 8003e98:	f7ff f947 	bl	800312a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d06c      	beq.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ea8:	483c      	ldr	r0, [pc, #240]	; (8003f9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003eaa:	f7ff f889 	bl	8002fc0 <LL_ADC_GetCommonPathInternalCh>
 8003eae:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d127      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d121      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a35      	ldr	r2, [pc, #212]	; (8003fa4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d157      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ed6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eda:	4619      	mov	r1, r3
 8003edc:	482f      	ldr	r0, [pc, #188]	; (8003f9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003ede:	f7ff f85c 	bl	8002f9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	099b      	lsrs	r3, r3, #6
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_ADC_ConfigChannel+0x7ec>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	099b      	lsrs	r3, r3, #6
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003efc:	e002      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f9      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f0a:	e03a      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a27      	ldr	r2, [pc, #156]	; (8003fb0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d113      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x77e>
 8003f16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d12a      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f34:	4619      	mov	r1, r3
 8003f36:	4819      	ldr	r0, [pc, #100]	; (8003f9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003f38:	f7ff f82f 	bl	8002f9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f3c:	e021      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d11c      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d116      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a12      	ldr	r2, [pc, #72]	; (8003fa4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d111      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f66:	4619      	mov	r1, r3
 8003f68:	480c      	ldr	r0, [pc, #48]	; (8003f9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003f6a:	f7ff f816 	bl	8002f9a <LL_ADC_SetCommonPathInternalCh>
 8003f6e:	e008      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003f8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	37d8      	adds	r7, #216	; 0xd8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	80080000 	.word	0x80080000
 8003f9c:	50040300 	.word	0x50040300
 8003fa0:	c7520000 	.word	0xc7520000
 8003fa4:	50040000 	.word	0x50040000
 8003fa8:	20000200 	.word	0x20000200
 8003fac:	053e2d63 	.word	0x053e2d63
 8003fb0:	cb840000 	.word	0xcb840000
 8003fb4:	80000001 	.word	0x80000001

08003fb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff f95f 	bl	800328c <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d169      	bne.n	80040a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <ADC_Enable+0xfc>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	f043 0210 	orr.w	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e055      	b.n	80040aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff f92e 	bl	8003264 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004008:	482b      	ldr	r0, [pc, #172]	; (80040b8 <ADC_Enable+0x100>)
 800400a:	f7fe ffd9 	bl	8002fc0 <LL_ADC_GetCommonPathInternalCh>
 800400e:	4603      	mov	r3, r0
 8004010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004018:	4b28      	ldr	r3, [pc, #160]	; (80040bc <ADC_Enable+0x104>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	4a28      	ldr	r2, [pc, #160]	; (80040c0 <ADC_Enable+0x108>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004032:	e002      	b.n	800403a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	3b01      	subs	r3, #1
 8004038:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f9      	bne.n	8004034 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004040:	f7fe ff8c 	bl	8002f5c <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004046:	e028      	b.n	800409a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff f91d 	bl	800328c <LL_ADC_IsEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d104      	bne.n	8004062 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff f901 	bl	8003264 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004062:	f7fe ff7b 	bl	8002f5c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d914      	bls.n	800409a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d00d      	beq.n	800409a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004082:	f043 0210 	orr.w	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e007      	b.n	80040aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d1cf      	bne.n	8004048 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	8000003f 	.word	0x8000003f
 80040b8:	50040300 	.word	0x50040300
 80040bc:	20000200 	.word	0x20000200
 80040c0:	053e2d63 	.word	0x053e2d63

080040c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f6:	4a04      	ldr	r2, [pc, #16]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	60d3      	str	r3, [r2, #12]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <__NVIC_GetPriorityGrouping+0x18>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0307 	and.w	r3, r3, #7
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db0b      	blt.n	8004152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	4907      	ldr	r1, [pc, #28]	; (8004160 <__NVIC_EnableIRQ+0x38>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2001      	movs	r0, #1
 800414a:	fa00 f202 	lsl.w	r2, r0, r2
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	490c      	ldr	r1, [pc, #48]	; (80041b0 <__NVIC_SetPriority+0x4c>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	440b      	add	r3, r1
 8004188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800418c:	e00a      	b.n	80041a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4908      	ldr	r1, [pc, #32]	; (80041b4 <__NVIC_SetPriority+0x50>)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3b04      	subs	r3, #4
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000e100 	.word	0xe000e100
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	bf28      	it	cs
 80041d6:	2304      	movcs	r3, #4
 80041d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3304      	adds	r3, #4
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d902      	bls.n	80041e8 <NVIC_EncodePriority+0x30>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b03      	subs	r3, #3
 80041e6:	e000      	b.n	80041ea <NVIC_EncodePriority+0x32>
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	401a      	ands	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004200:	f04f 31ff 	mov.w	r1, #4294967295
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	43d9      	mvns	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	4313      	orrs	r3, r2
         );
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	; 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004230:	d301      	bcc.n	8004236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004232:	2301      	movs	r3, #1
 8004234:	e00f      	b.n	8004256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <SysTick_Config+0x40>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800423e:	210f      	movs	r1, #15
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	f7ff ff8e 	bl	8004164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <SysTick_Config+0x40>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <SysTick_Config+0x40>)
 8004250:	2207      	movs	r2, #7
 8004252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010

08004264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff29 	bl	80040c4 <__NVIC_SetPriorityGrouping>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800428c:	f7ff ff3e 	bl	800410c <__NVIC_GetPriorityGrouping>
 8004290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ff8e 	bl	80041b8 <NVIC_EncodePriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff5d 	bl	8004164 <__NVIC_SetPriority>
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff31 	bl	8004128 <__NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffa2 	bl	8004220 <SysTick_Config>
 80042dc:	4603      	mov	r3, r0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042f6:	e166      	b.n	80045c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2101      	movs	r1, #1
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	4013      	ands	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8158 	beq.w	80045c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d005      	beq.n	8004328 <HAL_GPIO_Init+0x40>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d130      	bne.n	800438a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800435e:	2201      	movs	r2, #1
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 0201 	and.w	r2, r3, #1
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b03      	cmp	r3, #3
 8004394:	d017      	beq.n	80043c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	2203      	movs	r2, #3
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4013      	ands	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d123      	bne.n	800441a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	08da      	lsrs	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3208      	adds	r2, #8
 80043da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	220f      	movs	r2, #15
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	08da      	lsrs	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3208      	adds	r2, #8
 8004414:	6939      	ldr	r1, [r7, #16]
 8004416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	2203      	movs	r2, #3
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0203 	and.w	r2, r3, #3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80b2 	beq.w	80045c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445c:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <HAL_GPIO_Init+0x2fc>)
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	4a60      	ldr	r2, [pc, #384]	; (80045e4 <HAL_GPIO_Init+0x2fc>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6613      	str	r3, [r2, #96]	; 0x60
 8004468:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <HAL_GPIO_Init+0x2fc>)
 800446a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004474:	4a5c      	ldr	r2, [pc, #368]	; (80045e8 <HAL_GPIO_Init+0x300>)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	3302      	adds	r3, #2
 800447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	220f      	movs	r2, #15
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800449e:	d02b      	beq.n	80044f8 <HAL_GPIO_Init+0x210>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a52      	ldr	r2, [pc, #328]	; (80045ec <HAL_GPIO_Init+0x304>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d025      	beq.n	80044f4 <HAL_GPIO_Init+0x20c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a51      	ldr	r2, [pc, #324]	; (80045f0 <HAL_GPIO_Init+0x308>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01f      	beq.n	80044f0 <HAL_GPIO_Init+0x208>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a50      	ldr	r2, [pc, #320]	; (80045f4 <HAL_GPIO_Init+0x30c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d019      	beq.n	80044ec <HAL_GPIO_Init+0x204>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a4f      	ldr	r2, [pc, #316]	; (80045f8 <HAL_GPIO_Init+0x310>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_GPIO_Init+0x200>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a4e      	ldr	r2, [pc, #312]	; (80045fc <HAL_GPIO_Init+0x314>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00d      	beq.n	80044e4 <HAL_GPIO_Init+0x1fc>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a4d      	ldr	r2, [pc, #308]	; (8004600 <HAL_GPIO_Init+0x318>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <HAL_GPIO_Init+0x1f8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a4c      	ldr	r2, [pc, #304]	; (8004604 <HAL_GPIO_Init+0x31c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d101      	bne.n	80044dc <HAL_GPIO_Init+0x1f4>
 80044d8:	2307      	movs	r3, #7
 80044da:	e00e      	b.n	80044fa <HAL_GPIO_Init+0x212>
 80044dc:	2308      	movs	r3, #8
 80044de:	e00c      	b.n	80044fa <HAL_GPIO_Init+0x212>
 80044e0:	2306      	movs	r3, #6
 80044e2:	e00a      	b.n	80044fa <HAL_GPIO_Init+0x212>
 80044e4:	2305      	movs	r3, #5
 80044e6:	e008      	b.n	80044fa <HAL_GPIO_Init+0x212>
 80044e8:	2304      	movs	r3, #4
 80044ea:	e006      	b.n	80044fa <HAL_GPIO_Init+0x212>
 80044ec:	2303      	movs	r3, #3
 80044ee:	e004      	b.n	80044fa <HAL_GPIO_Init+0x212>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e002      	b.n	80044fa <HAL_GPIO_Init+0x212>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_GPIO_Init+0x212>
 80044f8:	2300      	movs	r3, #0
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	f002 0203 	and.w	r2, r2, #3
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	4093      	lsls	r3, r2
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800450a:	4937      	ldr	r1, [pc, #220]	; (80045e8 <HAL_GPIO_Init+0x300>)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	3302      	adds	r3, #2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004518:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_GPIO_Init+0x320>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4013      	ands	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800453c:	4a32      	ldr	r2, [pc, #200]	; (8004608 <HAL_GPIO_Init+0x320>)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004542:	4b31      	ldr	r3, [pc, #196]	; (8004608 <HAL_GPIO_Init+0x320>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	43db      	mvns	r3, r3
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004566:	4a28      	ldr	r2, [pc, #160]	; (8004608 <HAL_GPIO_Init+0x320>)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800456c:	4b26      	ldr	r3, [pc, #152]	; (8004608 <HAL_GPIO_Init+0x320>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004590:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <HAL_GPIO_Init+0x320>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004596:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <HAL_GPIO_Init+0x320>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <HAL_GPIO_Init+0x320>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3301      	adds	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f47f ae91 	bne.w	80042f8 <HAL_GPIO_Init+0x10>
  }
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40010000 	.word	0x40010000
 80045ec:	48000400 	.word	0x48000400
 80045f0:	48000800 	.word	0x48000800
 80045f4:	48000c00 	.word	0x48000c00
 80045f8:	48001000 	.word	0x48001000
 80045fc:	48001400 	.word	0x48001400
 8004600:	48001800 	.word	0x48001800
 8004604:	48001c00 	.word	0x48001c00
 8004608:	40010400 	.word	0x40010400

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004628:	e002      	b.n	8004630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d006      	beq.n	8004660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004652:	4a05      	ldr	r2, [pc, #20]	; (8004668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 f806 	bl	800466c <HAL_GPIO_EXTI_Callback>
  }
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40010400 	.word	0x40010400

0800466c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004694:	d102      	bne.n	800469c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469a:	e00b      	b.n	80046b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800469e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	d102      	bne.n	80046b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80046ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046b0:	e000      	b.n	80046b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80046b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40007000 	.word	0x40007000

080046c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d141      	bne.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046d2:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d131      	bne.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e0:	4b47      	ldr	r3, [pc, #284]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e6:	4a46      	ldr	r2, [pc, #280]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f0:	4b43      	ldr	r3, [pc, #268]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f8:	4a41      	ldr	r2, [pc, #260]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004700:	4b40      	ldr	r3, [pc, #256]	; (8004804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2232      	movs	r2, #50	; 0x32
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	4a3f      	ldr	r2, [pc, #252]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	0c9b      	lsrs	r3, r3, #18
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004716:	e002      	b.n	800471e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471e:	4b38      	ldr	r3, [pc, #224]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472a:	d102      	bne.n	8004732 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f2      	bne.n	8004718 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004732:	4b33      	ldr	r3, [pc, #204]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473e:	d158      	bne.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e057      	b.n	80047f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004744:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474a:	4a2d      	ldr	r2, [pc, #180]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004754:	e04d      	b.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800475c:	d141      	bne.n	80047e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800475e:	4b28      	ldr	r3, [pc, #160]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d131      	bne.n	80047d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800476c:	4b24      	ldr	r3, [pc, #144]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004772:	4a23      	ldr	r2, [pc, #140]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800477c:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004784:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800478a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800478c:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2232      	movs	r2, #50	; 0x32
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	0c9b      	lsrs	r3, r3, #18
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a2:	e002      	b.n	80047aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b6:	d102      	bne.n	80047be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f2      	bne.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ca:	d112      	bne.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e011      	b.n	80047f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d6:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047e0:	e007      	b.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047ea:	4a05      	ldr	r2, [pc, #20]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40007000 	.word	0x40007000
 8004804:	20000200 	.word	0x20000200
 8004808:	431bde83 	.word	0x431bde83

0800480c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a04      	ldr	r2, [pc, #16]	; (8004828 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800481a:	6053      	str	r3, [r2, #4]
}
 800481c:	bf00      	nop
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40007000 	.word	0x40007000

0800482c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f000 bc08 	b.w	8005050 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004840:	4b96      	ldr	r3, [pc, #600]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 030c 	and.w	r3, r3, #12
 8004848:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800484a:	4b94      	ldr	r3, [pc, #592]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80e4 	beq.w	8004a2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <HAL_RCC_OscConfig+0x4c>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b0c      	cmp	r3, #12
 800486c:	f040 808b 	bne.w	8004986 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b01      	cmp	r3, #1
 8004874:	f040 8087 	bne.w	8004986 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004878:	4b88      	ldr	r3, [pc, #544]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_OscConfig+0x64>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e3df      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	4b81      	ldr	r3, [pc, #516]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <HAL_RCC_OscConfig+0x7e>
 80048a0:	4b7e      	ldr	r3, [pc, #504]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a8:	e005      	b.n	80048b6 <HAL_RCC_OscConfig+0x8a>
 80048aa:	4b7c      	ldr	r3, [pc, #496]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d223      	bcs.n	8004902 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fdca 	bl	8005458 <RCC_SetFlashLatencyFromMSIRange>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e3c0      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ce:	4b73      	ldr	r3, [pc, #460]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a72      	ldr	r2, [pc, #456]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80048d4:	f043 0308 	orr.w	r3, r3, #8
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b70      	ldr	r3, [pc, #448]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	496d      	ldr	r1, [pc, #436]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ec:	4b6b      	ldr	r3, [pc, #428]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	4968      	ldr	r1, [pc, #416]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
 8004900:	e025      	b.n	800494e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004902:	4b66      	ldr	r3, [pc, #408]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a65      	ldr	r2, [pc, #404]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004908:	f043 0308 	orr.w	r3, r3, #8
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	4b63      	ldr	r3, [pc, #396]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	4960      	ldr	r1, [pc, #384]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 800491c:	4313      	orrs	r3, r2
 800491e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004920:	4b5e      	ldr	r3, [pc, #376]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	495b      	ldr	r1, [pc, #364]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fd8a 	bl	8005458 <RCC_SetFlashLatencyFromMSIRange>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e380      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800494e:	f000 fcc1 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 8004952:	4602      	mov	r2, r0
 8004954:	4b51      	ldr	r3, [pc, #324]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	4950      	ldr	r1, [pc, #320]	; (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004960:	5ccb      	ldrb	r3, [r1, r3]
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	fa22 f303 	lsr.w	r3, r2, r3
 800496a:	4a4e      	ldr	r2, [pc, #312]	; (8004aa4 <HAL_RCC_OscConfig+0x278>)
 800496c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800496e:	4b4e      	ldr	r3, [pc, #312]	; (8004aa8 <HAL_RCC_OscConfig+0x27c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe faa2 	bl	8002ebc <HAL_InitTick>
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d052      	beq.n	8004a28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	e364      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d032      	beq.n	80049f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800498e:	4b43      	ldr	r3, [pc, #268]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a42      	ldr	r2, [pc, #264]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800499a:	f7fe fadf 	bl	8002f5c <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049a2:	f7fe fadb 	bl	8002f5c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e34d      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049b4:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c0:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049c6:	f043 0308 	orr.w	r3, r3, #8
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b33      	ldr	r3, [pc, #204]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4930      	ldr	r1, [pc, #192]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049de:	4b2f      	ldr	r3, [pc, #188]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	492b      	ldr	r1, [pc, #172]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	604b      	str	r3, [r1, #4]
 80049f2:	e01a      	b.n	8004a2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049f4:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a00:	f7fe faac 	bl	8002f5c <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a08:	f7fe faa8 	bl	8002f5c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e31a      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x1dc>
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d073      	beq.n	8004b1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_OscConfig+0x21c>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d10e      	bne.n	8004a60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d10b      	bne.n	8004a60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d063      	beq.n	8004b1c <HAL_RCC_OscConfig+0x2f0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d15f      	bne.n	8004b1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e2f7      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a68:	d106      	bne.n	8004a78 <HAL_RCC_OscConfig+0x24c>
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e025      	b.n	8004ac4 <HAL_RCC_OscConfig+0x298>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a80:	d114      	bne.n	8004aac <HAL_RCC_OscConfig+0x280>
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a02      	ldr	r2, [pc, #8]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e013      	b.n	8004ac4 <HAL_RCC_OscConfig+0x298>
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	0800a8e4 	.word	0x0800a8e4
 8004aa4:	20000200 	.word	0x20000200
 8004aa8:	20000204 	.word	0x20000204
 8004aac:	4ba0      	ldr	r3, [pc, #640]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a9f      	ldr	r2, [pc, #636]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b9d      	ldr	r3, [pc, #628]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a9c      	ldr	r2, [pc, #624]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fe fa46 	bl	8002f5c <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fe fa42 	bl	8002f5c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e2b4      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae6:	4b92      	ldr	r3, [pc, #584]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x2a8>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fe fa32 	bl	8002f5c <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fe fa2e 	bl	8002f5c <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	; 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e2a0      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b0e:	4b88      	ldr	r3, [pc, #544]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x2d0>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d060      	beq.n	8004bec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_OscConfig+0x310>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d119      	bne.n	8004b6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d116      	bne.n	8004b6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b3c:	4b7c      	ldr	r3, [pc, #496]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <HAL_RCC_OscConfig+0x328>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e27d      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b54:	4b76      	ldr	r3, [pc, #472]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	4973      	ldr	r1, [pc, #460]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b68:	e040      	b.n	8004bec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d023      	beq.n	8004bba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b72:	4b6f      	ldr	r3, [pc, #444]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6e      	ldr	r2, [pc, #440]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7e:	f7fe f9ed 	bl	8002f5c <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b86:	f7fe f9e9 	bl	8002f5c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e25b      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b98:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0f0      	beq.n	8004b86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba4:	4b62      	ldr	r3, [pc, #392]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	061b      	lsls	r3, r3, #24
 8004bb2:	495f      	ldr	r1, [pc, #380]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]
 8004bb8:	e018      	b.n	8004bec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bba:	4b5d      	ldr	r3, [pc, #372]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a5c      	ldr	r2, [pc, #368]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe f9c9 	bl	8002f5c <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe f9c5 	bl	8002f5c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e237      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004be0:	4b53      	ldr	r3, [pc, #332]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d03c      	beq.n	8004c72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c06:	4a4a      	ldr	r2, [pc, #296]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fe f9a4 	bl	8002f5c <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c18:	f7fe f9a0 	bl	8002f5c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e212      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c2a:	4b41      	ldr	r3, [pc, #260]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ef      	beq.n	8004c18 <HAL_RCC_OscConfig+0x3ec>
 8004c38:	e01b      	b.n	8004c72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c3a:	4b3d      	ldr	r3, [pc, #244]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c40:	4a3b      	ldr	r2, [pc, #236]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fe f987 	bl	8002f5c <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c52:	f7fe f983 	bl	8002f5c <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e1f5      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c64:	4b32      	ldr	r3, [pc, #200]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1ef      	bne.n	8004c52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80a6 	beq.w	8004dcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c80:	2300      	movs	r3, #0
 8004c82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c84:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10d      	bne.n	8004cac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	4a26      	ldr	r2, [pc, #152]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c9c:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x508>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d118      	bne.n	8004cea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb8:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <HAL_RCC_OscConfig+0x508>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <HAL_RCC_OscConfig+0x508>)
 8004cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc4:	f7fe f94a 	bl	8002f5c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ccc:	f7fe f946 	bl	8002f5c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e1b8      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cde:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <HAL_RCC_OscConfig+0x508>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d108      	bne.n	8004d04 <HAL_RCC_OscConfig+0x4d8>
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d02:	e029      	b.n	8004d58 <HAL_RCC_OscConfig+0x52c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b05      	cmp	r3, #5
 8004d0a:	d115      	bne.n	8004d38 <HAL_RCC_OscConfig+0x50c>
 8004d0c:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	4a07      	ldr	r2, [pc, #28]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004d14:	f043 0304 	orr.w	r3, r3, #4
 8004d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	4a03      	ldr	r2, [pc, #12]	; (8004d30 <HAL_RCC_OscConfig+0x504>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2c:	e014      	b.n	8004d58 <HAL_RCC_OscConfig+0x52c>
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40007000 	.word	0x40007000
 8004d38:	4b9d      	ldr	r3, [pc, #628]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	4a9c      	ldr	r2, [pc, #624]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d48:	4b99      	ldr	r3, [pc, #612]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	4a98      	ldr	r2, [pc, #608]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004d50:	f023 0304 	bic.w	r3, r3, #4
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d016      	beq.n	8004d8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d60:	f7fe f8fc 	bl	8002f5c <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fe f8f8 	bl	8002f5c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e168      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7e:	4b8c      	ldr	r3, [pc, #560]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0ed      	beq.n	8004d68 <HAL_RCC_OscConfig+0x53c>
 8004d8c:	e015      	b.n	8004dba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7fe f8e5 	bl	8002f5c <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fe f8e1 	bl	8002f5c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e151      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dac:	4b80      	ldr	r3, [pc, #512]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1ed      	bne.n	8004d96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dba:	7ffb      	ldrb	r3, [r7, #31]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc0:	4b7b      	ldr	r3, [pc, #492]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	4a7a      	ldr	r2, [pc, #488]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d03c      	beq.n	8004e52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01c      	beq.n	8004e1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004de0:	4b73      	ldr	r3, [pc, #460]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de6:	4a72      	ldr	r2, [pc, #456]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fe f8b4 	bl	8002f5c <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004df8:	f7fe f8b0 	bl	8002f5c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e122      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e0a:	4b69      	ldr	r3, [pc, #420]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004e0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ef      	beq.n	8004df8 <HAL_RCC_OscConfig+0x5cc>
 8004e18:	e01b      	b.n	8004e52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e1a:	4b65      	ldr	r3, [pc, #404]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e20:	4a63      	ldr	r2, [pc, #396]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fe f897 	bl	8002f5c <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e32:	f7fe f893 	bl	8002f5c <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e105      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e44:	4b5a      	ldr	r3, [pc, #360]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1ef      	bne.n	8004e32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 80f9 	beq.w	800504e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	f040 80cf 	bne.w	8005004 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e66:	4b52      	ldr	r3, [pc, #328]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f003 0203 	and.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d12c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	3b01      	subs	r3, #1
 8004e86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d123      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d113      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d109      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d071      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d068      	beq.n	8004fac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004eda:	4b35      	ldr	r3, [pc, #212]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ee6:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e0ac      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ef6:	4b2e      	ldr	r3, [pc, #184]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2d      	ldr	r2, [pc, #180]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f02:	f7fe f82b 	bl	8002f5c <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0a:	f7fe f827 	bl	8002f5c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e099      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1c:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f28:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <HAL_RCC_OscConfig+0x788>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	0112      	lsls	r2, r2, #4
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f42:	0212      	lsls	r2, r2, #8
 8004f44:	4311      	orrs	r1, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f4a:	0852      	lsrs	r2, r2, #1
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	0552      	lsls	r2, r2, #21
 8004f50:	4311      	orrs	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f56:	0852      	lsrs	r2, r2, #1
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0652      	lsls	r2, r2, #25
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f62:	06d2      	lsls	r2, r2, #27
 8004f64:	430a      	orrs	r2, r1
 8004f66:	4912      	ldr	r1, [pc, #72]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0f      	ldr	r2, [pc, #60]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f84:	f7fd ffea 	bl	8002f5c <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fd ffe6 	bl	8002f5c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e058      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <HAL_RCC_OscConfig+0x784>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004faa:	e050      	b.n	800504e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04f      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb8:	4b27      	ldr	r3, [pc, #156]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d144      	bne.n	800504e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a23      	ldr	r2, [pc, #140]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fd0:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a20      	ldr	r2, [pc, #128]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fdc:	f7fd ffbe 	bl	8002f5c <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fd ffba 	bl	8002f5c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e02c      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x7b8>
 8005002:	e024      	b.n	800504e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d01f      	beq.n	800504a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a12      	ldr	r2, [pc, #72]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8005010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005016:	f7fd ffa1 	bl	8002f5c <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501e:	f7fd ff9d 	bl	8002f5c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e00f      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	4905      	ldr	r1, [pc, #20]	; (8005058 <HAL_RCC_OscConfig+0x82c>)
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_RCC_OscConfig+0x830>)
 8005044:	4013      	ands	r3, r2
 8005046:	60cb      	str	r3, [r1, #12]
 8005048:	e001      	b.n	800504e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	feeefffc 	.word	0xfeeefffc

08005060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e11d      	b.n	80052b4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b90      	ldr	r3, [pc, #576]	; (80052bc <HAL_RCC_ClockConfig+0x25c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d910      	bls.n	80050a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b8d      	ldr	r3, [pc, #564]	; (80052bc <HAL_RCC_ClockConfig+0x25c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 020f 	bic.w	r2, r3, #15
 800508e:	498b      	ldr	r1, [pc, #556]	; (80052bc <HAL_RCC_ClockConfig+0x25c>)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b89      	ldr	r3, [pc, #548]	; (80052bc <HAL_RCC_ClockConfig+0x25c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e105      	b.n	80052b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d010      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	4b81      	ldr	r3, [pc, #516]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d908      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c4:	4b7e      	ldr	r3, [pc, #504]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	497b      	ldr	r1, [pc, #492]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d079      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d11e      	bne.n	8005128 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ea:	4b75      	ldr	r3, [pc, #468]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e0dc      	b.n	80052b4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80050fa:	f000 fa07 	bl	800550c <RCC_GetSysClockFreqFromPLLSource>
 80050fe:	4603      	mov	r3, r0
 8005100:	4a70      	ldr	r2, [pc, #448]	; (80052c4 <HAL_RCC_ClockConfig+0x264>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d946      	bls.n	8005194 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005106:	4b6e      	ldr	r3, [pc, #440]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d140      	bne.n	8005194 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005112:	4b6b      	ldr	r3, [pc, #428]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511a:	4a69      	ldr	r2, [pc, #420]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 800511c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005120:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e035      	b.n	8005194 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d107      	bne.n	8005140 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005130:	4b63      	ldr	r3, [pc, #396]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d115      	bne.n	8005168 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0b9      	b.n	80052b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d107      	bne.n	8005158 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005148:	4b5d      	ldr	r3, [pc, #372]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d109      	bne.n	8005168 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0ad      	b.n	80052b4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005158:	4b59      	ldr	r3, [pc, #356]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0a5      	b.n	80052b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005168:	f000 f8b4 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 800516c:	4603      	mov	r3, r0
 800516e:	4a55      	ldr	r2, [pc, #340]	; (80052c4 <HAL_RCC_ClockConfig+0x264>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d90f      	bls.n	8005194 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005174:	4b52      	ldr	r3, [pc, #328]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005180:	4b4f      	ldr	r3, [pc, #316]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005188:	4a4d      	ldr	r2, [pc, #308]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 800518a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005194:	4b4a      	ldr	r3, [pc, #296]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 0203 	bic.w	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	4947      	ldr	r1, [pc, #284]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a6:	f7fd fed9 	bl	8002f5c <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ac:	e00a      	b.n	80051c4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ae:	f7fd fed5 	bl	8002f5c <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e077      	b.n	80052b4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c4:	4b3e      	ldr	r3, [pc, #248]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 020c 	and.w	r2, r3, #12
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d1eb      	bne.n	80051ae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d105      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051dc:	4b38      	ldr	r3, [pc, #224]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a37      	ldr	r2, [pc, #220]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80051e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005200:	429a      	cmp	r2, r3
 8005202:	d208      	bcs.n	8005216 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005204:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	492b      	ldr	r1, [pc, #172]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005216:	4b29      	ldr	r3, [pc, #164]	; (80052bc <HAL_RCC_ClockConfig+0x25c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d210      	bcs.n	8005246 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005224:	4b25      	ldr	r3, [pc, #148]	; (80052bc <HAL_RCC_ClockConfig+0x25c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 020f 	bic.w	r2, r3, #15
 800522c:	4923      	ldr	r1, [pc, #140]	; (80052bc <HAL_RCC_ClockConfig+0x25c>)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	4313      	orrs	r3, r2
 8005232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005234:	4b21      	ldr	r3, [pc, #132]	; (80052bc <HAL_RCC_ClockConfig+0x25c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d001      	beq.n	8005246 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e036      	b.n	80052b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005252:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4918      	ldr	r1, [pc, #96]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005260:	4313      	orrs	r3, r2
 8005262:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005270:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4910      	ldr	r1, [pc, #64]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005284:	f000 f826 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <HAL_RCC_ClockConfig+0x260>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	490c      	ldr	r1, [pc, #48]	; (80052c8 <HAL_RCC_ClockConfig+0x268>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <HAL_RCC_ClockConfig+0x26c>)
 80052a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052a4:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <HAL_RCC_ClockConfig+0x270>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fd fe07 	bl	8002ebc <HAL_InitTick>
 80052ae:	4603      	mov	r3, r0
 80052b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40022000 	.word	0x40022000
 80052c0:	40021000 	.word	0x40021000
 80052c4:	04c4b400 	.word	0x04c4b400
 80052c8:	0800a8e4 	.word	0x0800a8e4
 80052cc:	20000200 	.word	0x20000200
 80052d0:	20000204 	.word	0x20000204

080052d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b089      	sub	sp, #36	; 0x24
 80052d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052e2:	4b3e      	ldr	r3, [pc, #248]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052ec:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x34>
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d121      	bne.n	8005346 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d11e      	bne.n	8005346 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005308:	4b34      	ldr	r3, [pc, #208]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d107      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005314:	4b31      	ldr	r3, [pc, #196]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	f003 030f 	and.w	r3, r3, #15
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	e005      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005324:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005330:	4a2b      	ldr	r2, [pc, #172]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005338:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10d      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005344:	e00a      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d102      	bne.n	8005352 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800534c:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	e004      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d101      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005358:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800535a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b0c      	cmp	r3, #12
 8005360:	d134      	bne.n	80053cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005362:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d003      	beq.n	800537a <HAL_RCC_GetSysClockFreq+0xa6>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d003      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0xac>
 8005378:	e005      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800537a:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800537c:	617b      	str	r3, [r7, #20]
      break;
 800537e:	e005      	b.n	800538c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005380:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005382:	617b      	str	r3, [r7, #20]
      break;
 8005384:	e002      	b.n	800538c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	617b      	str	r3, [r7, #20]
      break;
 800538a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800538c:	4b13      	ldr	r3, [pc, #76]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	3301      	adds	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	fb03 f202 	mul.w	r2, r3, r2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053b2:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <HAL_RCC_GetSysClockFreq+0x108>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	0e5b      	lsrs	r3, r3, #25
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	3301      	adds	r3, #1
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053cc:	69bb      	ldr	r3, [r7, #24]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3724      	adds	r7, #36	; 0x24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800a8fc 	.word	0x0800a8fc
 80053e4:	00f42400 	.word	0x00f42400

080053e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053ec:	4b03      	ldr	r3, [pc, #12]	; (80053fc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ee:	681b      	ldr	r3, [r3, #0]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000200 	.word	0x20000200

08005400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005404:	f7ff fff0 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b06      	ldr	r3, [pc, #24]	; (8005424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	0a1b      	lsrs	r3, r3, #8
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4904      	ldr	r1, [pc, #16]	; (8005428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40021000 	.word	0x40021000
 8005428:	0800a8f4 	.word	0x0800a8f4

0800542c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005430:	f7ff ffda 	bl	80053e8 <HAL_RCC_GetHCLKFreq>
 8005434:	4602      	mov	r2, r0
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	0adb      	lsrs	r3, r3, #11
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	4904      	ldr	r1, [pc, #16]	; (8005454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005442:	5ccb      	ldrb	r3, [r1, r3]
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021000 	.word	0x40021000
 8005454:	0800a8f4 	.word	0x0800a8f4

08005458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005470:	f7ff f908 	bl	8004684 <HAL_PWREx_GetVoltageRange>
 8005474:	6178      	str	r0, [r7, #20]
 8005476:	e014      	b.n	80054a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547c:	4a21      	ldr	r2, [pc, #132]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800547e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005482:	6593      	str	r3, [r2, #88]	; 0x58
 8005484:	4b1f      	ldr	r3, [pc, #124]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005490:	f7ff f8f8 	bl	8004684 <HAL_PWREx_GetVoltageRange>
 8005494:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800549c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a8:	d10b      	bne.n	80054c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b80      	cmp	r3, #128	; 0x80
 80054ae:	d913      	bls.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2ba0      	cmp	r3, #160	; 0xa0
 80054b4:	d902      	bls.n	80054bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054b6:	2302      	movs	r3, #2
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e00d      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054bc:	2301      	movs	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	e00a      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b7f      	cmp	r3, #127	; 0x7f
 80054c6:	d902      	bls.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80054c8:	2302      	movs	r3, #2
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e004      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b70      	cmp	r3, #112	; 0x70
 80054d2:	d101      	bne.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054d4:	2301      	movs	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f023 020f 	bic.w	r2, r3, #15
 80054e0:	4909      	ldr	r1, [pc, #36]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d001      	beq.n	80054fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000
 8005508:	40022000 	.word	0x40022000

0800550c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005512:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b03      	cmp	r3, #3
 8005520:	d00b      	beq.n	800553a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d825      	bhi.n	8005574 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d008      	beq.n	8005540 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d11f      	bne.n	8005574 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005536:	613b      	str	r3, [r7, #16]
    break;
 8005538:	e01f      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800553a:	4b24      	ldr	r3, [pc, #144]	; (80055cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800553c:	613b      	str	r3, [r7, #16]
    break;
 800553e:	e01c      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d107      	bne.n	800555c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800554c:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800554e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e005      	b.n	8005568 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800555c:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005568:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005570:	613b      	str	r3, [r7, #16]
    break;
 8005572:	e002      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
    break;
 8005578:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	091b      	lsrs	r3, r3, #4
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	3301      	adds	r3, #1
 8005586:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005588:	4b0f      	ldr	r3, [pc, #60]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	fb03 f202 	mul.w	r2, r3, r2
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055a0:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	0e5b      	lsrs	r3, r3, #25
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	3301      	adds	r3, #1
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80055ba:	683b      	ldr	r3, [r7, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40021000 	.word	0x40021000
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	0800a8fc 	.word	0x0800a8fc

080055d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055dc:	2300      	movs	r3, #0
 80055de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055e0:	2300      	movs	r3, #0
 80055e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d040      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d02a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055f8:	2b80      	cmp	r3, #128	; 0x80
 80055fa:	d825      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055fc:	2b60      	cmp	r3, #96	; 0x60
 80055fe:	d026      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005600:	2b60      	cmp	r3, #96	; 0x60
 8005602:	d821      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005604:	2b40      	cmp	r3, #64	; 0x40
 8005606:	d006      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d81d      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d010      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005614:	e018      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005616:	4b89      	ldr	r3, [pc, #548]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4a88      	ldr	r2, [pc, #544]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005622:	e015      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fb62 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005634:	e00c      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3320      	adds	r3, #32
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fc4d 	bl	8005edc <RCCEx_PLLSAI2_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005646:	e003      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	74fb      	strb	r3, [r7, #19]
      break;
 800564c:	e000      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800564e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005656:	4b79      	ldr	r3, [pc, #484]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800565c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005664:	4975      	ldr	r1, [pc, #468]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800566c:	e001      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d047      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005686:	d030      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568c:	d82a      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800568e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005692:	d02a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005698:	d824      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800569a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569e:	d008      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d81e      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80056aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ae:	d010      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056b0:	e018      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056b2:	4b62      	ldr	r3, [pc, #392]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4a61      	ldr	r2, [pc, #388]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056bc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056be:	e015      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3304      	adds	r3, #4
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fb14 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056d0:	e00c      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3320      	adds	r3, #32
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fbff 	bl	8005edc <RCCEx_PLLSAI2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056e2:	e003      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	74fb      	strb	r3, [r7, #19]
      break;
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80056ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056f2:	4b52      	ldr	r3, [pc, #328]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	494e      	ldr	r1, [pc, #312]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005708:	e001      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	7cfb      	ldrb	r3, [r7, #19]
 800570c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 809f 	beq.w	800585a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800571c:	2300      	movs	r3, #0
 800571e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005720:	4b46      	ldr	r3, [pc, #280]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005736:	4b41      	ldr	r3, [pc, #260]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573a:	4a40      	ldr	r2, [pc, #256]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800573c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005740:	6593      	str	r3, [r2, #88]	; 0x58
 8005742:	4b3e      	ldr	r3, [pc, #248]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800574e:	2301      	movs	r3, #1
 8005750:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005752:	4b3b      	ldr	r3, [pc, #236]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a3a      	ldr	r2, [pc, #232]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800575e:	f7fd fbfd 	bl	8002f5c <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005764:	e009      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005766:	f7fd fbf9 	bl	8002f5c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d902      	bls.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	74fb      	strb	r3, [r7, #19]
        break;
 8005778:	e005      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800577a:	4b31      	ldr	r3, [pc, #196]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0ef      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005786:	7cfb      	ldrb	r3, [r7, #19]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d15b      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800578c:	4b2b      	ldr	r3, [pc, #172]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01f      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d019      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057aa:	4b24      	ldr	r3, [pc, #144]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057b6:	4b21      	ldr	r3, [pc, #132]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	4a1f      	ldr	r2, [pc, #124]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	4a1b      	ldr	r2, [pc, #108]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057d6:	4a19      	ldr	r2, [pc, #100]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d016      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fd fbb8 	bl	8002f5c <HAL_GetTick>
 80057ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ee:	e00b      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f0:	f7fd fbb4 	bl	8002f5c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fe:	4293      	cmp	r3, r2
 8005800:	d902      	bls.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	74fb      	strb	r3, [r7, #19]
            break;
 8005806:	e006      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005808:	4b0c      	ldr	r3, [pc, #48]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ec      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005816:	7cfb      	ldrb	r3, [r7, #19]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10c      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800581c:	4b07      	ldr	r3, [pc, #28]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005822:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800582c:	4903      	ldr	r1, [pc, #12]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005834:	e008      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005836:	7cfb      	ldrb	r3, [r7, #19]
 8005838:	74bb      	strb	r3, [r7, #18]
 800583a:	e005      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800583c:	40021000 	.word	0x40021000
 8005840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	7cfb      	ldrb	r3, [r7, #19]
 8005846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005848:	7c7b      	ldrb	r3, [r7, #17]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d105      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800584e:	4ba0      	ldr	r3, [pc, #640]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	4a9f      	ldr	r2, [pc, #636]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005858:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005866:	4b9a      	ldr	r3, [pc, #616]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f023 0203 	bic.w	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005874:	4996      	ldr	r1, [pc, #600]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005888:	4b91      	ldr	r3, [pc, #580]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588e:	f023 020c 	bic.w	r2, r3, #12
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	498e      	ldr	r1, [pc, #568]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058aa:	4b89      	ldr	r3, [pc, #548]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	4985      	ldr	r1, [pc, #532]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058cc:	4b80      	ldr	r3, [pc, #512]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058da:	497d      	ldr	r1, [pc, #500]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058ee:	4b78      	ldr	r3, [pc, #480]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fc:	4974      	ldr	r1, [pc, #464]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005910:	4b6f      	ldr	r3, [pc, #444]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591e:	496c      	ldr	r1, [pc, #432]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005932:	4b67      	ldr	r3, [pc, #412]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005940:	4963      	ldr	r1, [pc, #396]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005954:	4b5e      	ldr	r3, [pc, #376]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005962:	495b      	ldr	r1, [pc, #364]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005976:	4b56      	ldr	r3, [pc, #344]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005984:	4952      	ldr	r1, [pc, #328]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005998:	4b4d      	ldr	r3, [pc, #308]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a6:	494a      	ldr	r1, [pc, #296]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059ba:	4b45      	ldr	r3, [pc, #276]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c8:	4941      	ldr	r1, [pc, #260]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059dc:	4b3c      	ldr	r3, [pc, #240]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059e2:	f023 0203 	bic.w	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ea:	4939      	ldr	r1, [pc, #228]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d028      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059fe:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0c:	4930      	ldr	r1, [pc, #192]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	4a2b      	ldr	r2, [pc, #172]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a28:	60d3      	str	r3, [r2, #12]
 8005a2a:	e011      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 f959 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a46:	7cfb      	ldrb	r3, [r7, #19]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005a4c:	7cfb      	ldrb	r3, [r7, #19]
 8005a4e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d04d      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a64:	d108      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a66:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a6c:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a76:	e012      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a78:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a7e:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a84:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a88:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a96:	490e      	ldr	r1, [pc, #56]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab2:	60d3      	str	r3, [r2, #12]
 8005ab4:	e020      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005abe:	d109      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ac0:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4a02      	ldr	r2, [pc, #8]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aca:	60d3      	str	r3, [r2, #12]
 8005acc:	e014      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f905 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aee:	7cfb      	ldrb	r3, [r7, #19]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005af4:	7cfb      	ldrb	r3, [r7, #19]
 8005af6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d028      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b04:	4b7a      	ldr	r3, [pc, #488]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b12:	4977      	ldr	r1, [pc, #476]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b22:	d106      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b24:	4b72      	ldr	r3, [pc, #456]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a71      	ldr	r2, [pc, #452]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b2e:	60d3      	str	r3, [r2, #12]
 8005b30:	e011      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b3a:	d10c      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	2101      	movs	r1, #1
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f8d6 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b4c:	7cfb      	ldrb	r3, [r7, #19]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005b52:	7cfb      	ldrb	r3, [r7, #19]
 8005b54:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01e      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b62:	4b63      	ldr	r3, [pc, #396]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b72:	495f      	ldr	r1, [pc, #380]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 f8b1 	bl	8005cf4 <RCCEx_PLLSAI1_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005b9c:	7cfb      	ldrb	r3, [r7, #19]
 8005b9e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bac:	4b50      	ldr	r3, [pc, #320]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bb2:	f023 0204 	bic.w	r2, r3, #4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbc:	494c      	ldr	r1, [pc, #304]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bd0:	4b47      	ldr	r3, [pc, #284]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd6:	f023 0218 	bic.w	r2, r3, #24
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be0:	4943      	ldr	r1, [pc, #268]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d035      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bf4:	4b3e      	ldr	r3, [pc, #248]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a3d      	ldr	r2, [pc, #244]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c00:	f7fd f9ac 	bl	8002f5c <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c06:	e009      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c08:	f7fd f9a8 	bl	8002f5c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d902      	bls.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	74fb      	strb	r3, [r7, #19]
        break;
 8005c1a:	e005      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c1c:	4b34      	ldr	r3, [pc, #208]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1ef      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005c28:	7cfb      	ldrb	r3, [r7, #19]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d113      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005c2e:	4b30      	ldr	r3, [pc, #192]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3e:	492c      	ldr	r1, [pc, #176]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3320      	adds	r3, #32
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 f945 	bl	8005edc <RCCEx_PLLSAI2_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005c56:	7cfb      	ldrb	r3, [r7, #19]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005c5c:	7cfb      	ldrb	r3, [r7, #19]
 8005c5e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01e      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005c6c:	4b20      	ldr	r3, [pc, #128]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7c:	491c      	ldr	r1, [pc, #112]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8e:	d10c      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3320      	adds	r3, #32
 8005c94:	2101      	movs	r1, #1
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 f920 	bl	8005edc <RCCEx_PLLSAI2_Config>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005ca6:	7cfb      	ldrb	r3, [r7, #19]
 8005ca8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d017      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005cb6:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc6:	490a      	ldr	r1, [pc, #40]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ce4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ce6:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40021000 	.word	0x40021000

08005cf4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d02:	4b72      	ldr	r3, [pc, #456]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d0e:	4b6f      	ldr	r3, [pc, #444]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0203 	and.w	r2, r3, #3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d103      	bne.n	8005d26 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
       ||
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d142      	bne.n	8005dac <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
 8005d2a:	e03f      	b.n	8005dac <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d018      	beq.n	8005d66 <RCCEx_PLLSAI1_Config+0x72>
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d825      	bhi.n	8005d84 <RCCEx_PLLSAI1_Config+0x90>
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d002      	beq.n	8005d42 <RCCEx_PLLSAI1_Config+0x4e>
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d009      	beq.n	8005d54 <RCCEx_PLLSAI1_Config+0x60>
 8005d40:	e020      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d42:	4b62      	ldr	r3, [pc, #392]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11d      	bne.n	8005d8a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d52:	e01a      	b.n	8005d8a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d54:	4b5d      	ldr	r3, [pc, #372]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d64:	e013      	b.n	8005d8e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d66:	4b59      	ldr	r3, [pc, #356]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d72:	4b56      	ldr	r3, [pc, #344]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d82:	e006      	b.n	8005d92 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e004      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e002      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d108      	bne.n	8005dac <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005d9a:	4b4c      	ldr	r3, [pc, #304]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f023 0203 	bic.w	r2, r3, #3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4949      	ldr	r1, [pc, #292]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f040 8086 	bne.w	8005ec0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005db4:	4b45      	ldr	r3, [pc, #276]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a44      	ldr	r2, [pc, #272]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc0:	f7fd f8cc 	bl	8002f5c <HAL_GetTick>
 8005dc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dc6:	e009      	b.n	8005ddc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dc8:	f7fd f8c8 	bl	8002f5c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d902      	bls.n	8005ddc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8005dda:	e005      	b.n	8005de8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ef      	bne.n	8005dc8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d168      	bne.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d113      	bne.n	8005e1c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005df4:	4b35      	ldr	r3, [pc, #212]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	4b35      	ldr	r3, [pc, #212]	; (8005ed0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6892      	ldr	r2, [r2, #8]
 8005e00:	0211      	lsls	r1, r2, #8
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68d2      	ldr	r2, [r2, #12]
 8005e06:	06d2      	lsls	r2, r2, #27
 8005e08:	4311      	orrs	r1, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6852      	ldr	r2, [r2, #4]
 8005e0e:	3a01      	subs	r2, #1
 8005e10:	0112      	lsls	r2, r2, #4
 8005e12:	430a      	orrs	r2, r1
 8005e14:	492d      	ldr	r1, [pc, #180]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	610b      	str	r3, [r1, #16]
 8005e1a:	e02d      	b.n	8005e78 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d115      	bne.n	8005e4e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e22:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6892      	ldr	r2, [r2, #8]
 8005e2e:	0211      	lsls	r1, r2, #8
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6912      	ldr	r2, [r2, #16]
 8005e34:	0852      	lsrs	r2, r2, #1
 8005e36:	3a01      	subs	r2, #1
 8005e38:	0552      	lsls	r2, r2, #21
 8005e3a:	4311      	orrs	r1, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6852      	ldr	r2, [r2, #4]
 8005e40:	3a01      	subs	r2, #1
 8005e42:	0112      	lsls	r2, r2, #4
 8005e44:	430a      	orrs	r2, r1
 8005e46:	4921      	ldr	r1, [pc, #132]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	610b      	str	r3, [r1, #16]
 8005e4c:	e014      	b.n	8005e78 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e4e:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	4b21      	ldr	r3, [pc, #132]	; (8005ed8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6892      	ldr	r2, [r2, #8]
 8005e5a:	0211      	lsls	r1, r2, #8
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6952      	ldr	r2, [r2, #20]
 8005e60:	0852      	lsrs	r2, r2, #1
 8005e62:	3a01      	subs	r2, #1
 8005e64:	0652      	lsls	r2, r2, #25
 8005e66:	4311      	orrs	r1, r2
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6852      	ldr	r2, [r2, #4]
 8005e6c:	3a01      	subs	r2, #1
 8005e6e:	0112      	lsls	r2, r2, #4
 8005e70:	430a      	orrs	r2, r1
 8005e72:	4916      	ldr	r1, [pc, #88]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e78:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e84:	f7fd f86a 	bl	8002f5c <HAL_GetTick>
 8005e88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e8a:	e009      	b.n	8005ea0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e8c:	f7fd f866 	bl	8002f5c <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d902      	bls.n	8005ea0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	73fb      	strb	r3, [r7, #15]
          break;
 8005e9e:	e005      	b.n	8005eac <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0ef      	beq.n	8005e8c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	4904      	ldr	r1, [pc, #16]	; (8005ecc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	07ff800f 	.word	0x07ff800f
 8005ed4:	ff9f800f 	.word	0xff9f800f
 8005ed8:	f9ff800f 	.word	0xf9ff800f

08005edc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005eea:	4b72      	ldr	r3, [pc, #456]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ef6:	4b6f      	ldr	r3, [pc, #444]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0203 	and.w	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d103      	bne.n	8005f0e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
       ||
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d142      	bne.n	8005f94 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	73fb      	strb	r3, [r7, #15]
 8005f12:	e03f      	b.n	8005f94 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d018      	beq.n	8005f4e <RCCEx_PLLSAI2_Config+0x72>
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d825      	bhi.n	8005f6c <RCCEx_PLLSAI2_Config+0x90>
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d002      	beq.n	8005f2a <RCCEx_PLLSAI2_Config+0x4e>
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d009      	beq.n	8005f3c <RCCEx_PLLSAI2_Config+0x60>
 8005f28:	e020      	b.n	8005f6c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f2a:	4b62      	ldr	r3, [pc, #392]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11d      	bne.n	8005f72 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f3a:	e01a      	b.n	8005f72 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f3c:	4b5d      	ldr	r3, [pc, #372]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d116      	bne.n	8005f76 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f4c:	e013      	b.n	8005f76 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f4e:	4b59      	ldr	r3, [pc, #356]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10f      	bne.n	8005f7a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f5a:	4b56      	ldr	r3, [pc, #344]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f6a:	e006      	b.n	8005f7a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f70:	e004      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d108      	bne.n	8005f94 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005f82:	4b4c      	ldr	r3, [pc, #304]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f023 0203 	bic.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4949      	ldr	r1, [pc, #292]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 8086 	bne.w	80060a8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f9c:	4b45      	ldr	r3, [pc, #276]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a44      	ldr	r2, [pc, #272]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa8:	f7fc ffd8 	bl	8002f5c <HAL_GetTick>
 8005fac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fae:	e009      	b.n	8005fc4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fb0:	f7fc ffd4 	bl	8002f5c <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d902      	bls.n	8005fc4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	73fb      	strb	r3, [r7, #15]
        break;
 8005fc2:	e005      	b.n	8005fd0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fc4:	4b3b      	ldr	r3, [pc, #236]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ef      	bne.n	8005fb0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d168      	bne.n	80060a8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d113      	bne.n	8006004 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fdc:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	4b35      	ldr	r3, [pc, #212]	; (80060b8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6892      	ldr	r2, [r2, #8]
 8005fe8:	0211      	lsls	r1, r2, #8
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68d2      	ldr	r2, [r2, #12]
 8005fee:	06d2      	lsls	r2, r2, #27
 8005ff0:	4311      	orrs	r1, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6852      	ldr	r2, [r2, #4]
 8005ff6:	3a01      	subs	r2, #1
 8005ff8:	0112      	lsls	r2, r2, #4
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	492d      	ldr	r1, [pc, #180]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	614b      	str	r3, [r1, #20]
 8006002:	e02d      	b.n	8006060 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d115      	bne.n	8006036 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800600a:	4b2a      	ldr	r3, [pc, #168]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <RCCEx_PLLSAI2_Config+0x1e0>)
 8006010:	4013      	ands	r3, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6892      	ldr	r2, [r2, #8]
 8006016:	0211      	lsls	r1, r2, #8
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6912      	ldr	r2, [r2, #16]
 800601c:	0852      	lsrs	r2, r2, #1
 800601e:	3a01      	subs	r2, #1
 8006020:	0552      	lsls	r2, r2, #21
 8006022:	4311      	orrs	r1, r2
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6852      	ldr	r2, [r2, #4]
 8006028:	3a01      	subs	r2, #1
 800602a:	0112      	lsls	r2, r2, #4
 800602c:	430a      	orrs	r2, r1
 800602e:	4921      	ldr	r1, [pc, #132]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006030:	4313      	orrs	r3, r2
 8006032:	614b      	str	r3, [r1, #20]
 8006034:	e014      	b.n	8006060 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006036:	4b1f      	ldr	r3, [pc, #124]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	4b21      	ldr	r3, [pc, #132]	; (80060c0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800603c:	4013      	ands	r3, r2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6892      	ldr	r2, [r2, #8]
 8006042:	0211      	lsls	r1, r2, #8
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6952      	ldr	r2, [r2, #20]
 8006048:	0852      	lsrs	r2, r2, #1
 800604a:	3a01      	subs	r2, #1
 800604c:	0652      	lsls	r2, r2, #25
 800604e:	4311      	orrs	r1, r2
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6852      	ldr	r2, [r2, #4]
 8006054:	3a01      	subs	r2, #1
 8006056:	0112      	lsls	r2, r2, #4
 8006058:	430a      	orrs	r2, r1
 800605a:	4916      	ldr	r1, [pc, #88]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605c:	4313      	orrs	r3, r2
 800605e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006060:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fc ff76 	bl	8002f5c <HAL_GetTick>
 8006070:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006072:	e009      	b.n	8006088 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006074:	f7fc ff72 	bl	8002f5c <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d902      	bls.n	8006088 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	73fb      	strb	r3, [r7, #15]
          break;
 8006086:	e005      	b.n	8006094 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006088:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ef      	beq.n	8006074 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800609a:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800609c:	695a      	ldr	r2, [r3, #20]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	4904      	ldr	r1, [pc, #16]	; (80060b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40021000 	.word	0x40021000
 80060b8:	07ff800f 	.word	0x07ff800f
 80060bc:	ff9f800f 	.word	0xff9f800f
 80060c0:	f9ff800f 	.word	0xf9ff800f

080060c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e049      	b.n	800616a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fc fc50 	bl	8002990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f000 fb58 	bl	80067b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b01      	cmp	r3, #1
 8006186:	d001      	beq.n	800618c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e047      	b.n	800621c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a23      	ldr	r2, [pc, #140]	; (8006228 <HAL_TIM_Base_Start+0xb4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <HAL_TIM_Base_Start+0x66>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a6:	d018      	beq.n	80061da <HAL_TIM_Base_Start+0x66>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a1f      	ldr	r2, [pc, #124]	; (800622c <HAL_TIM_Base_Start+0xb8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_TIM_Base_Start+0x66>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <HAL_TIM_Base_Start+0xbc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_TIM_Base_Start+0x66>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <HAL_TIM_Base_Start+0xc0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_TIM_Base_Start+0x66>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <HAL_TIM_Base_Start+0xc4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_TIM_Base_Start+0x66>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a19      	ldr	r2, [pc, #100]	; (800623c <HAL_TIM_Base_Start+0xc8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d115      	bne.n	8006206 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <HAL_TIM_Base_Start+0xcc>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b06      	cmp	r3, #6
 80061ea:	d015      	beq.n	8006218 <HAL_TIM_Base_Start+0xa4>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f2:	d011      	beq.n	8006218 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006204:	e008      	b.n	8006218 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0201 	orr.w	r2, r2, #1
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	e000      	b.n	800621a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006218:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40013400 	.word	0x40013400
 800623c:	40014000 	.word	0x40014000
 8006240:	00010007 	.word	0x00010007

08006244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	d001      	beq.n	800625c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e04f      	b.n	80062fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a23      	ldr	r2, [pc, #140]	; (8006308 <HAL_TIM_Base_Start_IT+0xc4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01d      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006286:	d018      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1f      	ldr	r2, [pc, #124]	; (800630c <HAL_TIM_Base_Start_IT+0xc8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1e      	ldr	r2, [pc, #120]	; (8006310 <HAL_TIM_Base_Start_IT+0xcc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_TIM_Base_Start_IT+0xd0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d009      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <HAL_TIM_Base_Start_IT+0xd4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <HAL_TIM_Base_Start_IT+0x76>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a19      	ldr	r2, [pc, #100]	; (800631c <HAL_TIM_Base_Start_IT+0xd8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d115      	bne.n	80062e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	4b17      	ldr	r3, [pc, #92]	; (8006320 <HAL_TIM_Base_Start_IT+0xdc>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b06      	cmp	r3, #6
 80062ca:	d015      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0xb4>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d2:	d011      	beq.n	80062f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e4:	e008      	b.n	80062f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0201 	orr.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e000      	b.n	80062fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40013400 	.word	0x40013400
 800631c:	40014000 	.word	0x40014000
 8006320:	00010007 	.word	0x00010007

08006324 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0201 	bic.w	r2, r2, #1
 800633a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6a1a      	ldr	r2, [r3, #32]
 8006342:	f241 1311 	movw	r3, #4369	; 0x1111
 8006346:	4013      	ands	r3, r2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10f      	bne.n	800636c <HAL_TIM_Base_Stop_IT+0x48>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6a1a      	ldr	r2, [r3, #32]
 8006352:	f240 4344 	movw	r3, #1092	; 0x444
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d107      	bne.n	800636c <HAL_TIM_Base_Stop_IT+0x48>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0201 	bic.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b02      	cmp	r3, #2
 8006396:	d122      	bne.n	80063de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d11b      	bne.n	80063de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f06f 0202 	mvn.w	r2, #2
 80063ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f9d8 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 80063ca:	e005      	b.n	80063d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f9ca 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f9db 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d122      	bne.n	8006432 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d11b      	bne.n	8006432 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f06f 0204 	mvn.w	r2, #4
 8006402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f9ae 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 800641e:	e005      	b.n	800642c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f9a0 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9b1 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f003 0308 	and.w	r3, r3, #8
 800643c:	2b08      	cmp	r3, #8
 800643e:	d122      	bne.n	8006486 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b08      	cmp	r3, #8
 800644c:	d11b      	bne.n	8006486 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f06f 0208 	mvn.w	r2, #8
 8006456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2204      	movs	r2, #4
 800645c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f984 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 8006472:	e005      	b.n	8006480 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f976 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f987 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b10      	cmp	r3, #16
 8006492:	d122      	bne.n	80064da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0310 	and.w	r3, r3, #16
 800649e:	2b10      	cmp	r3, #16
 80064a0:	d11b      	bne.n	80064da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f06f 0210 	mvn.w	r2, #16
 80064aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2208      	movs	r2, #8
 80064b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f95a 	bl	800677a <HAL_TIM_IC_CaptureCallback>
 80064c6:	e005      	b.n	80064d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f94c 	bl	8006766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f95d 	bl	800678e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d10e      	bne.n	8006506 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d107      	bne.n	8006506 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f06f 0201 	mvn.w	r2, #1
 80064fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f926 	bl	8006752 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d10e      	bne.n	8006532 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651e:	2b80      	cmp	r3, #128	; 0x80
 8006520:	d107      	bne.n	8006532 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800652a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fb09 	bl	8006b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654c:	2b80      	cmp	r3, #128	; 0x80
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fafc 	bl	8006b58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d10e      	bne.n	800658c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d107      	bne.n	800658c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f90b 	bl	80067a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b20      	cmp	r3, #32
 8006598:	d10e      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d107      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0220 	mvn.w	r2, #32
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fabc 	bl	8006b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_TIM_ConfigClockSource+0x1c>
 80065d8:	2302      	movs	r3, #2
 80065da:	e0b6      	b.n	800674a <HAL_TIM_ConfigClockSource+0x18a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006618:	d03e      	beq.n	8006698 <HAL_TIM_ConfigClockSource+0xd8>
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661e:	f200 8087 	bhi.w	8006730 <HAL_TIM_ConfigClockSource+0x170>
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006626:	f000 8086 	beq.w	8006736 <HAL_TIM_ConfigClockSource+0x176>
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d87f      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x170>
 8006630:	2b70      	cmp	r3, #112	; 0x70
 8006632:	d01a      	beq.n	800666a <HAL_TIM_ConfigClockSource+0xaa>
 8006634:	2b70      	cmp	r3, #112	; 0x70
 8006636:	d87b      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x170>
 8006638:	2b60      	cmp	r3, #96	; 0x60
 800663a:	d050      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x11e>
 800663c:	2b60      	cmp	r3, #96	; 0x60
 800663e:	d877      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x170>
 8006640:	2b50      	cmp	r3, #80	; 0x50
 8006642:	d03c      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xfe>
 8006644:	2b50      	cmp	r3, #80	; 0x50
 8006646:	d873      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x170>
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d058      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x13e>
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d86f      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x170>
 8006650:	2b30      	cmp	r3, #48	; 0x30
 8006652:	d064      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x15e>
 8006654:	2b30      	cmp	r3, #48	; 0x30
 8006656:	d86b      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x170>
 8006658:	2b20      	cmp	r3, #32
 800665a:	d060      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x15e>
 800665c:	2b20      	cmp	r3, #32
 800665e:	d867      	bhi.n	8006730 <HAL_TIM_ConfigClockSource+0x170>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d05c      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x15e>
 8006664:	2b10      	cmp	r3, #16
 8006666:	d05a      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x15e>
 8006668:	e062      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	6899      	ldr	r1, [r3, #8]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f000 f9b1 	bl	80069e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800668c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	609a      	str	r2, [r3, #8]
      break;
 8006696:	e04f      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	6899      	ldr	r1, [r3, #8]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f000 f99a 	bl	80069e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ba:	609a      	str	r2, [r3, #8]
      break;
 80066bc:	e03c      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 f90e 	bl	80068ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2150      	movs	r1, #80	; 0x50
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 f967 	bl	80069aa <TIM_ITRx_SetConfig>
      break;
 80066dc:	e02c      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f000 f92d 	bl	800694a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2160      	movs	r1, #96	; 0x60
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f957 	bl	80069aa <TIM_ITRx_SetConfig>
      break;
 80066fc:	e01c      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	461a      	mov	r2, r3
 800670c:	f000 f8ee 	bl	80068ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2140      	movs	r1, #64	; 0x40
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f947 	bl	80069aa <TIM_ITRx_SetConfig>
      break;
 800671c:	e00c      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f000 f93e 	bl	80069aa <TIM_ITRx_SetConfig>
      break;
 800672e:	e003      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
      break;
 8006734:	e000      	b.n	8006738 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a40      	ldr	r2, [pc, #256]	; (80068cc <TIM_Base_SetConfig+0x114>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d00f      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3d      	ldr	r2, [pc, #244]	; (80068d0 <TIM_Base_SetConfig+0x118>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3c      	ldr	r2, [pc, #240]	; (80068d4 <TIM_Base_SetConfig+0x11c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3b      	ldr	r2, [pc, #236]	; (80068d8 <TIM_Base_SetConfig+0x120>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a3a      	ldr	r2, [pc, #232]	; (80068dc <TIM_Base_SetConfig+0x124>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d108      	bne.n	800680a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <TIM_Base_SetConfig+0x114>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01f      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d01b      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2c      	ldr	r2, [pc, #176]	; (80068d0 <TIM_Base_SetConfig+0x118>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d017      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2b      	ldr	r2, [pc, #172]	; (80068d4 <TIM_Base_SetConfig+0x11c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <TIM_Base_SetConfig+0x120>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a29      	ldr	r2, [pc, #164]	; (80068dc <TIM_Base_SetConfig+0x124>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <TIM_Base_SetConfig+0x128>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <TIM_Base_SetConfig+0x12c>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_Base_SetConfig+0x9a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <TIM_Base_SetConfig+0x130>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a10      	ldr	r2, [pc, #64]	; (80068cc <TIM_Base_SetConfig+0x114>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a12      	ldr	r2, [pc, #72]	; (80068dc <TIM_Base_SetConfig+0x124>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a11      	ldr	r2, [pc, #68]	; (80068e0 <TIM_Base_SetConfig+0x128>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <TIM_Base_SetConfig+0x12c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_Base_SetConfig+0xf8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <TIM_Base_SetConfig+0x130>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d103      	bne.n	80068b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	615a      	str	r2, [r3, #20]
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	40000400 	.word	0x40000400
 80068d4:	40000800 	.word	0x40000800
 80068d8:	40000c00 	.word	0x40000c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f023 0201 	bic.w	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f023 030a 	bic.w	r3, r3, #10
 8006928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800694a:	b480      	push	{r7}
 800694c:	b087      	sub	sp, #28
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f023 0210 	bic.w	r2, r3, #16
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	031b      	lsls	r3, r3, #12
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b085      	sub	sp, #20
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f043 0307 	orr.w	r3, r3, #7
 80069cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	609a      	str	r2, [r3, #8]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	021a      	lsls	r2, r3, #8
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	609a      	str	r2, [r3, #8]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a34:	2302      	movs	r3, #2
 8006a36:	e068      	b.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a2e      	ldr	r2, [pc, #184]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d004      	beq.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a2d      	ldr	r2, [pc, #180]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d108      	bne.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d01d      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aaa:	d018      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d013      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1a      	ldr	r2, [pc, #104]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00e      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d009      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d004      	beq.n	8006ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a14      	ldr	r2, [pc, #80]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d10c      	bne.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	40012c00 	.word	0x40012c00
 8006b1c:	40013400 	.word	0x40013400
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40014000 	.word	0x40014000

08006b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e042      	b.n	8006c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d106      	bne.n	8006b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fb ff63 	bl	8002a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2224      	movs	r2, #36	; 0x24
 8006b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f8c4 	bl	8006d3c <UART_SetConfig>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e022      	b.n	8006c04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fbb4 	bl	8007334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fc3b 	bl	8007478 <UART_CheckIdleState>
 8006c02:	4603      	mov	r3, r0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	f040 8084 	bne.w	8006d30 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_UART_Transmit+0x28>
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e07c      	b.n	8006d32 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_UART_Transmit+0x3a>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e075      	b.n	8006d32 <HAL_UART_Transmit+0x126>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2221      	movs	r2, #33	; 0x21
 8006c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c5e:	f7fc f97d 	bl	8002f5c <HAL_GetTick>
 8006c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	88fa      	ldrh	r2, [r7, #6]
 8006c70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7c:	d108      	bne.n	8006c90 <HAL_UART_Transmit+0x84>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	e003      	b.n	8006c98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006ca0:	e02d      	b.n	8006cfe <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2180      	movs	r1, #128	; 0x80
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 fc2e 	bl	800750e <UART_WaitOnFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e03a      	b.n	8006d32 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10b      	bne.n	8006cda <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	881a      	ldrh	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cce:	b292      	uxth	r2, r2
 8006cd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	e008      	b.n	8006cec <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	781a      	ldrb	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	b292      	uxth	r2, r2
 8006ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1cb      	bne.n	8006ca2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2140      	movs	r1, #64	; 0x40
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fbfa 	bl	800750e <UART_WaitOnFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e006      	b.n	8006d32 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e000      	b.n	8006d32 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006d30:	2302      	movs	r3, #2
  }
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3720      	adds	r7, #32
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d40:	b08c      	sub	sp, #48	; 0x30
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	431a      	orrs	r2, r3
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4baa      	ldr	r3, [pc, #680]	; (8007014 <UART_SetConfig+0x2d8>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d74:	430b      	orrs	r3, r1
 8006d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a9f      	ldr	r2, [pc, #636]	; (8007018 <UART_SetConfig+0x2dc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da4:	4313      	orrs	r3, r2
 8006da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006db2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	f023 010f 	bic.w	r1, r3, #15
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a90      	ldr	r2, [pc, #576]	; (800701c <UART_SetConfig+0x2e0>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d125      	bne.n	8006e2c <UART_SetConfig+0xf0>
 8006de0:	4b8f      	ldr	r3, [pc, #572]	; (8007020 <UART_SetConfig+0x2e4>)
 8006de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d81a      	bhi.n	8006e24 <UART_SetConfig+0xe8>
 8006dee:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0xb8>)
 8006df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df4:	08006e05 	.word	0x08006e05
 8006df8:	08006e15 	.word	0x08006e15
 8006dfc:	08006e0d 	.word	0x08006e0d
 8006e00:	08006e1d 	.word	0x08006e1d
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0a:	e116      	b.n	800703a <UART_SetConfig+0x2fe>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e12:	e112      	b.n	800703a <UART_SetConfig+0x2fe>
 8006e14:	2304      	movs	r3, #4
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e1a:	e10e      	b.n	800703a <UART_SetConfig+0x2fe>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e22:	e10a      	b.n	800703a <UART_SetConfig+0x2fe>
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e2a:	e106      	b.n	800703a <UART_SetConfig+0x2fe>
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a7c      	ldr	r2, [pc, #496]	; (8007024 <UART_SetConfig+0x2e8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d138      	bne.n	8006ea8 <UART_SetConfig+0x16c>
 8006e36:	4b7a      	ldr	r3, [pc, #488]	; (8007020 <UART_SetConfig+0x2e4>)
 8006e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e3c:	f003 030c 	and.w	r3, r3, #12
 8006e40:	2b0c      	cmp	r3, #12
 8006e42:	d82d      	bhi.n	8006ea0 <UART_SetConfig+0x164>
 8006e44:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <UART_SetConfig+0x110>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006e81 	.word	0x08006e81
 8006e50:	08006ea1 	.word	0x08006ea1
 8006e54:	08006ea1 	.word	0x08006ea1
 8006e58:	08006ea1 	.word	0x08006ea1
 8006e5c:	08006e91 	.word	0x08006e91
 8006e60:	08006ea1 	.word	0x08006ea1
 8006e64:	08006ea1 	.word	0x08006ea1
 8006e68:	08006ea1 	.word	0x08006ea1
 8006e6c:	08006e89 	.word	0x08006e89
 8006e70:	08006ea1 	.word	0x08006ea1
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	08006ea1 	.word	0x08006ea1
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	2300      	movs	r3, #0
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e86:	e0d8      	b.n	800703a <UART_SetConfig+0x2fe>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8e:	e0d4      	b.n	800703a <UART_SetConfig+0x2fe>
 8006e90:	2304      	movs	r3, #4
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e96:	e0d0      	b.n	800703a <UART_SetConfig+0x2fe>
 8006e98:	2308      	movs	r3, #8
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e9e:	e0cc      	b.n	800703a <UART_SetConfig+0x2fe>
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea6:	e0c8      	b.n	800703a <UART_SetConfig+0x2fe>
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a5e      	ldr	r2, [pc, #376]	; (8007028 <UART_SetConfig+0x2ec>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d125      	bne.n	8006efe <UART_SetConfig+0x1c2>
 8006eb2:	4b5b      	ldr	r3, [pc, #364]	; (8007020 <UART_SetConfig+0x2e4>)
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ebc:	2b30      	cmp	r3, #48	; 0x30
 8006ebe:	d016      	beq.n	8006eee <UART_SetConfig+0x1b2>
 8006ec0:	2b30      	cmp	r3, #48	; 0x30
 8006ec2:	d818      	bhi.n	8006ef6 <UART_SetConfig+0x1ba>
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d00a      	beq.n	8006ede <UART_SetConfig+0x1a2>
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d814      	bhi.n	8006ef6 <UART_SetConfig+0x1ba>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <UART_SetConfig+0x19a>
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d008      	beq.n	8006ee6 <UART_SetConfig+0x1aa>
 8006ed4:	e00f      	b.n	8006ef6 <UART_SetConfig+0x1ba>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006edc:	e0ad      	b.n	800703a <UART_SetConfig+0x2fe>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ee4:	e0a9      	b.n	800703a <UART_SetConfig+0x2fe>
 8006ee6:	2304      	movs	r3, #4
 8006ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eec:	e0a5      	b.n	800703a <UART_SetConfig+0x2fe>
 8006eee:	2308      	movs	r3, #8
 8006ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef4:	e0a1      	b.n	800703a <UART_SetConfig+0x2fe>
 8006ef6:	2310      	movs	r3, #16
 8006ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efc:	e09d      	b.n	800703a <UART_SetConfig+0x2fe>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a4a      	ldr	r2, [pc, #296]	; (800702c <UART_SetConfig+0x2f0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d125      	bne.n	8006f54 <UART_SetConfig+0x218>
 8006f08:	4b45      	ldr	r3, [pc, #276]	; (8007020 <UART_SetConfig+0x2e4>)
 8006f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f12:	2bc0      	cmp	r3, #192	; 0xc0
 8006f14:	d016      	beq.n	8006f44 <UART_SetConfig+0x208>
 8006f16:	2bc0      	cmp	r3, #192	; 0xc0
 8006f18:	d818      	bhi.n	8006f4c <UART_SetConfig+0x210>
 8006f1a:	2b80      	cmp	r3, #128	; 0x80
 8006f1c:	d00a      	beq.n	8006f34 <UART_SetConfig+0x1f8>
 8006f1e:	2b80      	cmp	r3, #128	; 0x80
 8006f20:	d814      	bhi.n	8006f4c <UART_SetConfig+0x210>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <UART_SetConfig+0x1f0>
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d008      	beq.n	8006f3c <UART_SetConfig+0x200>
 8006f2a:	e00f      	b.n	8006f4c <UART_SetConfig+0x210>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f32:	e082      	b.n	800703a <UART_SetConfig+0x2fe>
 8006f34:	2302      	movs	r3, #2
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3a:	e07e      	b.n	800703a <UART_SetConfig+0x2fe>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f42:	e07a      	b.n	800703a <UART_SetConfig+0x2fe>
 8006f44:	2308      	movs	r3, #8
 8006f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f4a:	e076      	b.n	800703a <UART_SetConfig+0x2fe>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f52:	e072      	b.n	800703a <UART_SetConfig+0x2fe>
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a35      	ldr	r2, [pc, #212]	; (8007030 <UART_SetConfig+0x2f4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d12a      	bne.n	8006fb4 <UART_SetConfig+0x278>
 8006f5e:	4b30      	ldr	r3, [pc, #192]	; (8007020 <UART_SetConfig+0x2e4>)
 8006f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f6c:	d01a      	beq.n	8006fa4 <UART_SetConfig+0x268>
 8006f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f72:	d81b      	bhi.n	8006fac <UART_SetConfig+0x270>
 8006f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f78:	d00c      	beq.n	8006f94 <UART_SetConfig+0x258>
 8006f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7e:	d815      	bhi.n	8006fac <UART_SetConfig+0x270>
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <UART_SetConfig+0x250>
 8006f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f88:	d008      	beq.n	8006f9c <UART_SetConfig+0x260>
 8006f8a:	e00f      	b.n	8006fac <UART_SetConfig+0x270>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f92:	e052      	b.n	800703a <UART_SetConfig+0x2fe>
 8006f94:	2302      	movs	r3, #2
 8006f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f9a:	e04e      	b.n	800703a <UART_SetConfig+0x2fe>
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fa2:	e04a      	b.n	800703a <UART_SetConfig+0x2fe>
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006faa:	e046      	b.n	800703a <UART_SetConfig+0x2fe>
 8006fac:	2310      	movs	r3, #16
 8006fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb2:	e042      	b.n	800703a <UART_SetConfig+0x2fe>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a17      	ldr	r2, [pc, #92]	; (8007018 <UART_SetConfig+0x2dc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d13a      	bne.n	8007034 <UART_SetConfig+0x2f8>
 8006fbe:	4b18      	ldr	r3, [pc, #96]	; (8007020 <UART_SetConfig+0x2e4>)
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fcc:	d01a      	beq.n	8007004 <UART_SetConfig+0x2c8>
 8006fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fd2:	d81b      	bhi.n	800700c <UART_SetConfig+0x2d0>
 8006fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd8:	d00c      	beq.n	8006ff4 <UART_SetConfig+0x2b8>
 8006fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fde:	d815      	bhi.n	800700c <UART_SetConfig+0x2d0>
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <UART_SetConfig+0x2b0>
 8006fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe8:	d008      	beq.n	8006ffc <UART_SetConfig+0x2c0>
 8006fea:	e00f      	b.n	800700c <UART_SetConfig+0x2d0>
 8006fec:	2300      	movs	r3, #0
 8006fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ff2:	e022      	b.n	800703a <UART_SetConfig+0x2fe>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ffa:	e01e      	b.n	800703a <UART_SetConfig+0x2fe>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007002:	e01a      	b.n	800703a <UART_SetConfig+0x2fe>
 8007004:	2308      	movs	r3, #8
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700a:	e016      	b.n	800703a <UART_SetConfig+0x2fe>
 800700c:	2310      	movs	r3, #16
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007012:	e012      	b.n	800703a <UART_SetConfig+0x2fe>
 8007014:	cfff69f3 	.word	0xcfff69f3
 8007018:	40008000 	.word	0x40008000
 800701c:	40013800 	.word	0x40013800
 8007020:	40021000 	.word	0x40021000
 8007024:	40004400 	.word	0x40004400
 8007028:	40004800 	.word	0x40004800
 800702c:	40004c00 	.word	0x40004c00
 8007030:	40005000 	.word	0x40005000
 8007034:	2310      	movs	r3, #16
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4aae      	ldr	r2, [pc, #696]	; (80072f8 <UART_SetConfig+0x5bc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	f040 8097 	bne.w	8007174 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800704a:	2b08      	cmp	r3, #8
 800704c:	d823      	bhi.n	8007096 <UART_SetConfig+0x35a>
 800704e:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <UART_SetConfig+0x318>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	08007079 	.word	0x08007079
 8007058:	08007097 	.word	0x08007097
 800705c:	08007081 	.word	0x08007081
 8007060:	08007097 	.word	0x08007097
 8007064:	08007087 	.word	0x08007087
 8007068:	08007097 	.word	0x08007097
 800706c:	08007097 	.word	0x08007097
 8007070:	08007097 	.word	0x08007097
 8007074:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fe f9c2 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707e:	e010      	b.n	80070a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b9e      	ldr	r3, [pc, #632]	; (80072fc <UART_SetConfig+0x5c0>)
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007084:	e00d      	b.n	80070a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fe f925 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 800708a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800708c:	e009      	b.n	80070a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007094:	e005      	b.n	80070a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8130 	beq.w	800730a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	4a94      	ldr	r2, [pc, #592]	; (8007300 <UART_SetConfig+0x5c4>)
 80070b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	4613      	mov	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d305      	bcc.n	80070da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d903      	bls.n	80070e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070e0:	e113      	b.n	800730a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	2200      	movs	r2, #0
 80070e6:	60bb      	str	r3, [r7, #8]
 80070e8:	60fa      	str	r2, [r7, #12]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	4a84      	ldr	r2, [pc, #528]	; (8007300 <UART_SetConfig+0x5c4>)
 80070f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2200      	movs	r2, #0
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007100:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007104:	f7f9 fdd8 	bl	8000cb8 <__aeabi_uldivmod>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	020b      	lsls	r3, r1, #8
 800711a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800711e:	0202      	lsls	r2, r0, #8
 8007120:	6979      	ldr	r1, [r7, #20]
 8007122:	6849      	ldr	r1, [r1, #4]
 8007124:	0849      	lsrs	r1, r1, #1
 8007126:	2000      	movs	r0, #0
 8007128:	460c      	mov	r4, r1
 800712a:	4605      	mov	r5, r0
 800712c:	eb12 0804 	adds.w	r8, r2, r4
 8007130:	eb43 0905 	adc.w	r9, r3, r5
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	469a      	mov	sl, r3
 800713c:	4693      	mov	fp, r2
 800713e:	4652      	mov	r2, sl
 8007140:	465b      	mov	r3, fp
 8007142:	4640      	mov	r0, r8
 8007144:	4649      	mov	r1, r9
 8007146:	f7f9 fdb7 	bl	8000cb8 <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4613      	mov	r3, r2
 8007150:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007158:	d308      	bcc.n	800716c <UART_SetConfig+0x430>
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007160:	d204      	bcs.n	800716c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	60da      	str	r2, [r3, #12]
 800716a:	e0ce      	b.n	800730a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007172:	e0ca      	b.n	800730a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800717c:	d166      	bne.n	800724c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800717e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007182:	2b08      	cmp	r3, #8
 8007184:	d827      	bhi.n	80071d6 <UART_SetConfig+0x49a>
 8007186:	a201      	add	r2, pc, #4	; (adr r2, 800718c <UART_SetConfig+0x450>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071b9 	.word	0x080071b9
 8007194:	080071c1 	.word	0x080071c1
 8007198:	080071d7 	.word	0x080071d7
 800719c:	080071c7 	.word	0x080071c7
 80071a0:	080071d7 	.word	0x080071d7
 80071a4:	080071d7 	.word	0x080071d7
 80071a8:	080071d7 	.word	0x080071d7
 80071ac:	080071cf 	.word	0x080071cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b0:	f7fe f926 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 80071b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071b6:	e014      	b.n	80071e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071b8:	f7fe f938 	bl	800542c <HAL_RCC_GetPCLK2Freq>
 80071bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071be:	e010      	b.n	80071e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c0:	4b4e      	ldr	r3, [pc, #312]	; (80072fc <UART_SetConfig+0x5c0>)
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c4:	e00d      	b.n	80071e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c6:	f7fe f885 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 80071ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071cc:	e009      	b.n	80071e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071d4:	e005      	b.n	80071e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8090 	beq.w	800730a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	4a44      	ldr	r2, [pc, #272]	; (8007300 <UART_SetConfig+0x5c4>)
 80071f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f4:	461a      	mov	r2, r3
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071fc:	005a      	lsls	r2, r3, #1
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	441a      	add	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	fbb2 f3f3 	udiv	r3, r2, r3
 800720e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	2b0f      	cmp	r3, #15
 8007214:	d916      	bls.n	8007244 <UART_SetConfig+0x508>
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721c:	d212      	bcs.n	8007244 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f023 030f 	bic.w	r3, r3, #15
 8007226:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	b29a      	uxth	r2, r3
 8007234:	8bfb      	ldrh	r3, [r7, #30]
 8007236:	4313      	orrs	r3, r2
 8007238:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	8bfa      	ldrh	r2, [r7, #30]
 8007240:	60da      	str	r2, [r3, #12]
 8007242:	e062      	b.n	800730a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800724a:	e05e      	b.n	800730a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800724c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007250:	2b08      	cmp	r3, #8
 8007252:	d828      	bhi.n	80072a6 <UART_SetConfig+0x56a>
 8007254:	a201      	add	r2, pc, #4	; (adr r2, 800725c <UART_SetConfig+0x520>)
 8007256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725a:	bf00      	nop
 800725c:	08007281 	.word	0x08007281
 8007260:	08007289 	.word	0x08007289
 8007264:	08007291 	.word	0x08007291
 8007268:	080072a7 	.word	0x080072a7
 800726c:	08007297 	.word	0x08007297
 8007270:	080072a7 	.word	0x080072a7
 8007274:	080072a7 	.word	0x080072a7
 8007278:	080072a7 	.word	0x080072a7
 800727c:	0800729f 	.word	0x0800729f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007280:	f7fe f8be 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 8007284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007286:	e014      	b.n	80072b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007288:	f7fe f8d0 	bl	800542c <HAL_RCC_GetPCLK2Freq>
 800728c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800728e:	e010      	b.n	80072b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007290:	4b1a      	ldr	r3, [pc, #104]	; (80072fc <UART_SetConfig+0x5c0>)
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007294:	e00d      	b.n	80072b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007296:	f7fe f81d 	bl	80052d4 <HAL_RCC_GetSysClockFreq>
 800729a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800729c:	e009      	b.n	80072b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072a4:	e005      	b.n	80072b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072b0:	bf00      	nop
    }

    if (pclk != 0U)
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d028      	beq.n	800730a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	4a10      	ldr	r2, [pc, #64]	; (8007300 <UART_SetConfig+0x5c4>)
 80072be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	441a      	add	r2, r3
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072da:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	2b0f      	cmp	r3, #15
 80072e0:	d910      	bls.n	8007304 <UART_SetConfig+0x5c8>
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e8:	d20c      	bcs.n	8007304 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60da      	str	r2, [r3, #12]
 80072f4:	e009      	b.n	800730a <UART_SetConfig+0x5ce>
 80072f6:	bf00      	nop
 80072f8:	40008000 	.word	0x40008000
 80072fc:	00f42400 	.word	0x00f42400
 8007300:	0800a92c 	.word	0x0800a92c
      }
      else
      {
        ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2201      	movs	r2, #1
 800730e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2201      	movs	r2, #1
 8007316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2200      	movs	r2, #0
 800731e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2200      	movs	r2, #0
 8007324:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007326:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800732a:	4618      	mov	r0, r3
 800732c:	3730      	adds	r7, #48	; 0x30
 800732e:	46bd      	mov	sp, r7
 8007330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	f003 0308 	and.w	r3, r3, #8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01a      	beq.n	800744a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007432:	d10a      	bne.n	800744a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
  }
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af02      	add	r7, sp, #8
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007488:	f7fb fd68 	bl	8002f5c <HAL_GetTick>
 800748c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0308 	and.w	r3, r3, #8
 8007498:	2b08      	cmp	r3, #8
 800749a:	d10e      	bne.n	80074ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800749c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f82f 	bl	800750e <UART_WaitOnFlagUntilTimeout>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e025      	b.n	8007506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d10e      	bne.n	80074e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f819 	bl	800750e <UART_WaitOnFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e00f      	b.n	8007506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b09c      	sub	sp, #112	; 0x70
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	603b      	str	r3, [r7, #0]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800751e:	e0a9      	b.n	8007674 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	f000 80a5 	beq.w	8007674 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800752a:	f7fb fd17 	bl	8002f5c <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007536:	429a      	cmp	r2, r3
 8007538:	d302      	bcc.n	8007540 <UART_WaitOnFlagUntilTimeout+0x32>
 800753a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753c:	2b00      	cmp	r3, #0
 800753e:	d140      	bne.n	80075c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800754e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007554:	667b      	str	r3, [r7, #100]	; 0x64
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800755e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007560:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800756c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e6      	bne.n	8007540 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3308      	adds	r3, #8
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	663b      	str	r3, [r7, #96]	; 0x60
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007592:	64ba      	str	r2, [r7, #72]	; 0x48
 8007594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e5      	bne.n	8007572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e069      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d051      	beq.n	8007674 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075de:	d149      	bne.n	8007674 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007608:	637b      	str	r3, [r7, #52]	; 0x34
 800760a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800760e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3308      	adds	r3, #8
 8007622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	613b      	str	r3, [r7, #16]
   return(result);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f023 0301 	bic.w	r3, r3, #1
 8007632:	66bb      	str	r3, [r7, #104]	; 0x68
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800763c:	623a      	str	r2, [r7, #32]
 800763e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	69f9      	ldr	r1, [r7, #28]
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	61bb      	str	r3, [r7, #24]
   return(result);
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2220      	movs	r2, #32
 800765c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e010      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69da      	ldr	r2, [r3, #28]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4013      	ands	r3, r2
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	429a      	cmp	r2, r3
 8007682:	bf0c      	ite	eq
 8007684:	2301      	moveq	r3, #1
 8007686:	2300      	movne	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	461a      	mov	r2, r3
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	429a      	cmp	r2, r3
 8007690:	f43f af46 	beq.w	8007520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3770      	adds	r7, #112	; 0x70
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e027      	b.n	8007704 <HAL_UARTEx_DisableFifoMode+0x66>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2224      	movs	r2, #36	; 0x24
 80076c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0201 	bic.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007724:	2302      	movs	r3, #2
 8007726:	e02d      	b.n	8007784 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2224      	movs	r2, #36	; 0x24
 8007734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f84f 	bl	8007808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e02d      	b.n	8007800 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2224      	movs	r2, #36	; 0x24
 80077b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f811 	bl	8007808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007814:	2b00      	cmp	r3, #0
 8007816:	d108      	bne.n	800782a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007828:	e031      	b.n	800788e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800782a:	2308      	movs	r3, #8
 800782c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800782e:	2308      	movs	r3, #8
 8007830:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	0e5b      	lsrs	r3, r3, #25
 800783a:	b2db      	uxtb	r3, r3
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	0f5b      	lsrs	r3, r3, #29
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	7b3a      	ldrb	r2, [r7, #12]
 8007856:	4911      	ldr	r1, [pc, #68]	; (800789c <UARTEx_SetNbDataToProcess+0x94>)
 8007858:	5c8a      	ldrb	r2, [r1, r2]
 800785a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800785e:	7b3a      	ldrb	r2, [r7, #12]
 8007860:	490f      	ldr	r1, [pc, #60]	; (80078a0 <UARTEx_SetNbDataToProcess+0x98>)
 8007862:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007864:	fb93 f3f2 	sdiv	r3, r3, r2
 8007868:	b29a      	uxth	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	7b7a      	ldrb	r2, [r7, #13]
 8007874:	4909      	ldr	r1, [pc, #36]	; (800789c <UARTEx_SetNbDataToProcess+0x94>)
 8007876:	5c8a      	ldrb	r2, [r1, r2]
 8007878:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800787c:	7b7a      	ldrb	r2, [r7, #13]
 800787e:	4908      	ldr	r1, [pc, #32]	; (80078a0 <UARTEx_SetNbDataToProcess+0x98>)
 8007880:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007882:	fb93 f3f2 	sdiv	r3, r3, r2
 8007886:	b29a      	uxth	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800788e:	bf00      	nop
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	0800a944 	.word	0x0800a944
 80078a0:	0800a94c 	.word	0x0800a94c

080078a4 <__errno>:
 80078a4:	4b01      	ldr	r3, [pc, #4]	; (80078ac <__errno+0x8>)
 80078a6:	6818      	ldr	r0, [r3, #0]
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	2000020c 	.word	0x2000020c

080078b0 <__libc_init_array>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	4d0d      	ldr	r5, [pc, #52]	; (80078e8 <__libc_init_array+0x38>)
 80078b4:	4c0d      	ldr	r4, [pc, #52]	; (80078ec <__libc_init_array+0x3c>)
 80078b6:	1b64      	subs	r4, r4, r5
 80078b8:	10a4      	asrs	r4, r4, #2
 80078ba:	2600      	movs	r6, #0
 80078bc:	42a6      	cmp	r6, r4
 80078be:	d109      	bne.n	80078d4 <__libc_init_array+0x24>
 80078c0:	4d0b      	ldr	r5, [pc, #44]	; (80078f0 <__libc_init_array+0x40>)
 80078c2:	4c0c      	ldr	r4, [pc, #48]	; (80078f4 <__libc_init_array+0x44>)
 80078c4:	f002 ffe2 	bl	800a88c <_init>
 80078c8:	1b64      	subs	r4, r4, r5
 80078ca:	10a4      	asrs	r4, r4, #2
 80078cc:	2600      	movs	r6, #0
 80078ce:	42a6      	cmp	r6, r4
 80078d0:	d105      	bne.n	80078de <__libc_init_array+0x2e>
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d8:	4798      	blx	r3
 80078da:	3601      	adds	r6, #1
 80078dc:	e7ee      	b.n	80078bc <__libc_init_array+0xc>
 80078de:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e2:	4798      	blx	r3
 80078e4:	3601      	adds	r6, #1
 80078e6:	e7f2      	b.n	80078ce <__libc_init_array+0x1e>
 80078e8:	0800ad34 	.word	0x0800ad34
 80078ec:	0800ad34 	.word	0x0800ad34
 80078f0:	0800ad34 	.word	0x0800ad34
 80078f4:	0800ad38 	.word	0x0800ad38

080078f8 <memset>:
 80078f8:	4402      	add	r2, r0
 80078fa:	4603      	mov	r3, r0
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d100      	bne.n	8007902 <memset+0xa>
 8007900:	4770      	bx	lr
 8007902:	f803 1b01 	strb.w	r1, [r3], #1
 8007906:	e7f9      	b.n	80078fc <memset+0x4>

08007908 <__cvt>:
 8007908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	ec55 4b10 	vmov	r4, r5, d0
 8007910:	2d00      	cmp	r5, #0
 8007912:	460e      	mov	r6, r1
 8007914:	4619      	mov	r1, r3
 8007916:	462b      	mov	r3, r5
 8007918:	bfbb      	ittet	lt
 800791a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800791e:	461d      	movlt	r5, r3
 8007920:	2300      	movge	r3, #0
 8007922:	232d      	movlt	r3, #45	; 0x2d
 8007924:	700b      	strb	r3, [r1, #0]
 8007926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007928:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800792c:	4691      	mov	r9, r2
 800792e:	f023 0820 	bic.w	r8, r3, #32
 8007932:	bfbc      	itt	lt
 8007934:	4622      	movlt	r2, r4
 8007936:	4614      	movlt	r4, r2
 8007938:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800793c:	d005      	beq.n	800794a <__cvt+0x42>
 800793e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007942:	d100      	bne.n	8007946 <__cvt+0x3e>
 8007944:	3601      	adds	r6, #1
 8007946:	2102      	movs	r1, #2
 8007948:	e000      	b.n	800794c <__cvt+0x44>
 800794a:	2103      	movs	r1, #3
 800794c:	ab03      	add	r3, sp, #12
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	ab02      	add	r3, sp, #8
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	ec45 4b10 	vmov	d0, r4, r5
 8007958:	4653      	mov	r3, sl
 800795a:	4632      	mov	r2, r6
 800795c:	f000 fcec 	bl	8008338 <_dtoa_r>
 8007960:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007964:	4607      	mov	r7, r0
 8007966:	d102      	bne.n	800796e <__cvt+0x66>
 8007968:	f019 0f01 	tst.w	r9, #1
 800796c:	d022      	beq.n	80079b4 <__cvt+0xac>
 800796e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007972:	eb07 0906 	add.w	r9, r7, r6
 8007976:	d110      	bne.n	800799a <__cvt+0x92>
 8007978:	783b      	ldrb	r3, [r7, #0]
 800797a:	2b30      	cmp	r3, #48	; 0x30
 800797c:	d10a      	bne.n	8007994 <__cvt+0x8c>
 800797e:	2200      	movs	r2, #0
 8007980:	2300      	movs	r3, #0
 8007982:	4620      	mov	r0, r4
 8007984:	4629      	mov	r1, r5
 8007986:	f7f9 f8b7 	bl	8000af8 <__aeabi_dcmpeq>
 800798a:	b918      	cbnz	r0, 8007994 <__cvt+0x8c>
 800798c:	f1c6 0601 	rsb	r6, r6, #1
 8007990:	f8ca 6000 	str.w	r6, [sl]
 8007994:	f8da 3000 	ldr.w	r3, [sl]
 8007998:	4499      	add	r9, r3
 800799a:	2200      	movs	r2, #0
 800799c:	2300      	movs	r3, #0
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f9 f8a9 	bl	8000af8 <__aeabi_dcmpeq>
 80079a6:	b108      	cbz	r0, 80079ac <__cvt+0xa4>
 80079a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80079ac:	2230      	movs	r2, #48	; 0x30
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	454b      	cmp	r3, r9
 80079b2:	d307      	bcc.n	80079c4 <__cvt+0xbc>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079b8:	1bdb      	subs	r3, r3, r7
 80079ba:	4638      	mov	r0, r7
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	b004      	add	sp, #16
 80079c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c4:	1c59      	adds	r1, r3, #1
 80079c6:	9103      	str	r1, [sp, #12]
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	e7f0      	b.n	80079ae <__cvt+0xa6>

080079cc <__exponent>:
 80079cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ce:	4603      	mov	r3, r0
 80079d0:	2900      	cmp	r1, #0
 80079d2:	bfb8      	it	lt
 80079d4:	4249      	neglt	r1, r1
 80079d6:	f803 2b02 	strb.w	r2, [r3], #2
 80079da:	bfb4      	ite	lt
 80079dc:	222d      	movlt	r2, #45	; 0x2d
 80079de:	222b      	movge	r2, #43	; 0x2b
 80079e0:	2909      	cmp	r1, #9
 80079e2:	7042      	strb	r2, [r0, #1]
 80079e4:	dd2a      	ble.n	8007a3c <__exponent+0x70>
 80079e6:	f10d 0407 	add.w	r4, sp, #7
 80079ea:	46a4      	mov	ip, r4
 80079ec:	270a      	movs	r7, #10
 80079ee:	46a6      	mov	lr, r4
 80079f0:	460a      	mov	r2, r1
 80079f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80079f6:	fb07 1516 	mls	r5, r7, r6, r1
 80079fa:	3530      	adds	r5, #48	; 0x30
 80079fc:	2a63      	cmp	r2, #99	; 0x63
 80079fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a06:	4631      	mov	r1, r6
 8007a08:	dcf1      	bgt.n	80079ee <__exponent+0x22>
 8007a0a:	3130      	adds	r1, #48	; 0x30
 8007a0c:	f1ae 0502 	sub.w	r5, lr, #2
 8007a10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a14:	1c44      	adds	r4, r0, #1
 8007a16:	4629      	mov	r1, r5
 8007a18:	4561      	cmp	r1, ip
 8007a1a:	d30a      	bcc.n	8007a32 <__exponent+0x66>
 8007a1c:	f10d 0209 	add.w	r2, sp, #9
 8007a20:	eba2 020e 	sub.w	r2, r2, lr
 8007a24:	4565      	cmp	r5, ip
 8007a26:	bf88      	it	hi
 8007a28:	2200      	movhi	r2, #0
 8007a2a:	4413      	add	r3, r2
 8007a2c:	1a18      	subs	r0, r3, r0
 8007a2e:	b003      	add	sp, #12
 8007a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a3a:	e7ed      	b.n	8007a18 <__exponent+0x4c>
 8007a3c:	2330      	movs	r3, #48	; 0x30
 8007a3e:	3130      	adds	r1, #48	; 0x30
 8007a40:	7083      	strb	r3, [r0, #2]
 8007a42:	70c1      	strb	r1, [r0, #3]
 8007a44:	1d03      	adds	r3, r0, #4
 8007a46:	e7f1      	b.n	8007a2c <__exponent+0x60>

08007a48 <_printf_float>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	ed2d 8b02 	vpush	{d8}
 8007a50:	b08d      	sub	sp, #52	; 0x34
 8007a52:	460c      	mov	r4, r1
 8007a54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a58:	4616      	mov	r6, r2
 8007a5a:	461f      	mov	r7, r3
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	f001 fa59 	bl	8008f14 <_localeconv_r>
 8007a62:	f8d0 a000 	ldr.w	sl, [r0]
 8007a66:	4650      	mov	r0, sl
 8007a68:	f7f8 fbca 	bl	8000200 <strlen>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	f8d8 3000 	ldr.w	r3, [r8]
 8007a78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a7c:	3307      	adds	r3, #7
 8007a7e:	f023 0307 	bic.w	r3, r3, #7
 8007a82:	f103 0208 	add.w	r2, r3, #8
 8007a86:	f8c8 2000 	str.w	r2, [r8]
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a9a:	9307      	str	r3, [sp, #28]
 8007a9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007aa0:	ee08 0a10 	vmov	s16, r0
 8007aa4:	4b9f      	ldr	r3, [pc, #636]	; (8007d24 <_printf_float+0x2dc>)
 8007aa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007aae:	f7f9 f855 	bl	8000b5c <__aeabi_dcmpun>
 8007ab2:	bb88      	cbnz	r0, 8007b18 <_printf_float+0xd0>
 8007ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ab8:	4b9a      	ldr	r3, [pc, #616]	; (8007d24 <_printf_float+0x2dc>)
 8007aba:	f04f 32ff 	mov.w	r2, #4294967295
 8007abe:	f7f9 f82f 	bl	8000b20 <__aeabi_dcmple>
 8007ac2:	bb48      	cbnz	r0, 8007b18 <_printf_float+0xd0>
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	4640      	mov	r0, r8
 8007aca:	4649      	mov	r1, r9
 8007acc:	f7f9 f81e 	bl	8000b0c <__aeabi_dcmplt>
 8007ad0:	b110      	cbz	r0, 8007ad8 <_printf_float+0x90>
 8007ad2:	232d      	movs	r3, #45	; 0x2d
 8007ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad8:	4b93      	ldr	r3, [pc, #588]	; (8007d28 <_printf_float+0x2e0>)
 8007ada:	4894      	ldr	r0, [pc, #592]	; (8007d2c <_printf_float+0x2e4>)
 8007adc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ae0:	bf94      	ite	ls
 8007ae2:	4698      	movls	r8, r3
 8007ae4:	4680      	movhi	r8, r0
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	f023 0204 	bic.w	r2, r3, #4
 8007af0:	6022      	str	r2, [r4, #0]
 8007af2:	f04f 0900 	mov.w	r9, #0
 8007af6:	9700      	str	r7, [sp, #0]
 8007af8:	4633      	mov	r3, r6
 8007afa:	aa0b      	add	r2, sp, #44	; 0x2c
 8007afc:	4621      	mov	r1, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	f000 f9d8 	bl	8007eb4 <_printf_common>
 8007b04:	3001      	adds	r0, #1
 8007b06:	f040 8090 	bne.w	8007c2a <_printf_float+0x1e2>
 8007b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0e:	b00d      	add	sp, #52	; 0x34
 8007b10:	ecbd 8b02 	vpop	{d8}
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b18:	4642      	mov	r2, r8
 8007b1a:	464b      	mov	r3, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4649      	mov	r1, r9
 8007b20:	f7f9 f81c 	bl	8000b5c <__aeabi_dcmpun>
 8007b24:	b140      	cbz	r0, 8007b38 <_printf_float+0xf0>
 8007b26:	464b      	mov	r3, r9
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	bfbc      	itt	lt
 8007b2c:	232d      	movlt	r3, #45	; 0x2d
 8007b2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b32:	487f      	ldr	r0, [pc, #508]	; (8007d30 <_printf_float+0x2e8>)
 8007b34:	4b7f      	ldr	r3, [pc, #508]	; (8007d34 <_printf_float+0x2ec>)
 8007b36:	e7d1      	b.n	8007adc <_printf_float+0x94>
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b3e:	9206      	str	r2, [sp, #24]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	d13f      	bne.n	8007bc4 <_printf_float+0x17c>
 8007b44:	2306      	movs	r3, #6
 8007b46:	6063      	str	r3, [r4, #4]
 8007b48:	9b05      	ldr	r3, [sp, #20]
 8007b4a:	6861      	ldr	r1, [r4, #4]
 8007b4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b50:	2300      	movs	r3, #0
 8007b52:	9303      	str	r3, [sp, #12]
 8007b54:	ab0a      	add	r3, sp, #40	; 0x28
 8007b56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b5a:	ab09      	add	r3, sp, #36	; 0x24
 8007b5c:	ec49 8b10 	vmov	d0, r8, r9
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7ff fecd 	bl	8007908 <__cvt>
 8007b6e:	9b06      	ldr	r3, [sp, #24]
 8007b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b72:	2b47      	cmp	r3, #71	; 0x47
 8007b74:	4680      	mov	r8, r0
 8007b76:	d108      	bne.n	8007b8a <_printf_float+0x142>
 8007b78:	1cc8      	adds	r0, r1, #3
 8007b7a:	db02      	blt.n	8007b82 <_printf_float+0x13a>
 8007b7c:	6863      	ldr	r3, [r4, #4]
 8007b7e:	4299      	cmp	r1, r3
 8007b80:	dd41      	ble.n	8007c06 <_printf_float+0x1be>
 8007b82:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b86:	fa5f fb8b 	uxtb.w	fp, fp
 8007b8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b8e:	d820      	bhi.n	8007bd2 <_printf_float+0x18a>
 8007b90:	3901      	subs	r1, #1
 8007b92:	465a      	mov	r2, fp
 8007b94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b98:	9109      	str	r1, [sp, #36]	; 0x24
 8007b9a:	f7ff ff17 	bl	80079cc <__exponent>
 8007b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ba0:	1813      	adds	r3, r2, r0
 8007ba2:	2a01      	cmp	r2, #1
 8007ba4:	4681      	mov	r9, r0
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	dc02      	bgt.n	8007bb0 <_printf_float+0x168>
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	07d2      	lsls	r2, r2, #31
 8007bae:	d501      	bpl.n	8007bb4 <_printf_float+0x16c>
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d09c      	beq.n	8007af6 <_printf_float+0xae>
 8007bbc:	232d      	movs	r3, #45	; 0x2d
 8007bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc2:	e798      	b.n	8007af6 <_printf_float+0xae>
 8007bc4:	9a06      	ldr	r2, [sp, #24]
 8007bc6:	2a47      	cmp	r2, #71	; 0x47
 8007bc8:	d1be      	bne.n	8007b48 <_printf_float+0x100>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1bc      	bne.n	8007b48 <_printf_float+0x100>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e7b9      	b.n	8007b46 <_printf_float+0xfe>
 8007bd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007bd6:	d118      	bne.n	8007c0a <_printf_float+0x1c2>
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	dd0b      	ble.n	8007bf6 <_printf_float+0x1ae>
 8007bde:	6121      	str	r1, [r4, #16]
 8007be0:	b913      	cbnz	r3, 8007be8 <_printf_float+0x1a0>
 8007be2:	6822      	ldr	r2, [r4, #0]
 8007be4:	07d0      	lsls	r0, r2, #31
 8007be6:	d502      	bpl.n	8007bee <_printf_float+0x1a6>
 8007be8:	3301      	adds	r3, #1
 8007bea:	440b      	add	r3, r1
 8007bec:	6123      	str	r3, [r4, #16]
 8007bee:	65a1      	str	r1, [r4, #88]	; 0x58
 8007bf0:	f04f 0900 	mov.w	r9, #0
 8007bf4:	e7de      	b.n	8007bb4 <_printf_float+0x16c>
 8007bf6:	b913      	cbnz	r3, 8007bfe <_printf_float+0x1b6>
 8007bf8:	6822      	ldr	r2, [r4, #0]
 8007bfa:	07d2      	lsls	r2, r2, #31
 8007bfc:	d501      	bpl.n	8007c02 <_printf_float+0x1ba>
 8007bfe:	3302      	adds	r3, #2
 8007c00:	e7f4      	b.n	8007bec <_printf_float+0x1a4>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e7f2      	b.n	8007bec <_printf_float+0x1a4>
 8007c06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0c:	4299      	cmp	r1, r3
 8007c0e:	db05      	blt.n	8007c1c <_printf_float+0x1d4>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	6121      	str	r1, [r4, #16]
 8007c14:	07d8      	lsls	r0, r3, #31
 8007c16:	d5ea      	bpl.n	8007bee <_printf_float+0x1a6>
 8007c18:	1c4b      	adds	r3, r1, #1
 8007c1a:	e7e7      	b.n	8007bec <_printf_float+0x1a4>
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	bfd4      	ite	le
 8007c20:	f1c1 0202 	rsble	r2, r1, #2
 8007c24:	2201      	movgt	r2, #1
 8007c26:	4413      	add	r3, r2
 8007c28:	e7e0      	b.n	8007bec <_printf_float+0x1a4>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	055a      	lsls	r2, r3, #21
 8007c2e:	d407      	bmi.n	8007c40 <_printf_float+0x1f8>
 8007c30:	6923      	ldr	r3, [r4, #16]
 8007c32:	4642      	mov	r2, r8
 8007c34:	4631      	mov	r1, r6
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d12c      	bne.n	8007c98 <_printf_float+0x250>
 8007c3e:	e764      	b.n	8007b0a <_printf_float+0xc2>
 8007c40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c44:	f240 80e0 	bls.w	8007e08 <_printf_float+0x3c0>
 8007c48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f7f8 ff52 	bl	8000af8 <__aeabi_dcmpeq>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d034      	beq.n	8007cc2 <_printf_float+0x27a>
 8007c58:	4a37      	ldr	r2, [pc, #220]	; (8007d38 <_printf_float+0x2f0>)
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f af51 	beq.w	8007b0a <_printf_float+0xc2>
 8007c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	db02      	blt.n	8007c76 <_printf_float+0x22e>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	07d8      	lsls	r0, r3, #31
 8007c74:	d510      	bpl.n	8007c98 <_printf_float+0x250>
 8007c76:	ee18 3a10 	vmov	r3, s16
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f af41 	beq.w	8007b0a <_printf_float+0xc2>
 8007c88:	f04f 0800 	mov.w	r8, #0
 8007c8c:	f104 091a 	add.w	r9, r4, #26
 8007c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c92:	3b01      	subs	r3, #1
 8007c94:	4543      	cmp	r3, r8
 8007c96:	dc09      	bgt.n	8007cac <_printf_float+0x264>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	079b      	lsls	r3, r3, #30
 8007c9c:	f100 8105 	bmi.w	8007eaa <_printf_float+0x462>
 8007ca0:	68e0      	ldr	r0, [r4, #12]
 8007ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca4:	4298      	cmp	r0, r3
 8007ca6:	bfb8      	it	lt
 8007ca8:	4618      	movlt	r0, r3
 8007caa:	e730      	b.n	8007b0e <_printf_float+0xc6>
 8007cac:	2301      	movs	r3, #1
 8007cae:	464a      	mov	r2, r9
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b8      	blx	r7
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	f43f af27 	beq.w	8007b0a <_printf_float+0xc2>
 8007cbc:	f108 0801 	add.w	r8, r8, #1
 8007cc0:	e7e6      	b.n	8007c90 <_printf_float+0x248>
 8007cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	dc39      	bgt.n	8007d3c <_printf_float+0x2f4>
 8007cc8:	4a1b      	ldr	r2, [pc, #108]	; (8007d38 <_printf_float+0x2f0>)
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b8      	blx	r7
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	f43f af19 	beq.w	8007b0a <_printf_float+0xc2>
 8007cd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	d102      	bne.n	8007ce6 <_printf_float+0x29e>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	07d9      	lsls	r1, r3, #31
 8007ce4:	d5d8      	bpl.n	8007c98 <_printf_float+0x250>
 8007ce6:	ee18 3a10 	vmov	r3, s16
 8007cea:	4652      	mov	r2, sl
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f af09 	beq.w	8007b0a <_printf_float+0xc2>
 8007cf8:	f04f 0900 	mov.w	r9, #0
 8007cfc:	f104 0a1a 	add.w	sl, r4, #26
 8007d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d02:	425b      	negs	r3, r3
 8007d04:	454b      	cmp	r3, r9
 8007d06:	dc01      	bgt.n	8007d0c <_printf_float+0x2c4>
 8007d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0a:	e792      	b.n	8007c32 <_printf_float+0x1ea>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4652      	mov	r2, sl
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f aef7 	beq.w	8007b0a <_printf_float+0xc2>
 8007d1c:	f109 0901 	add.w	r9, r9, #1
 8007d20:	e7ee      	b.n	8007d00 <_printf_float+0x2b8>
 8007d22:	bf00      	nop
 8007d24:	7fefffff 	.word	0x7fefffff
 8007d28:	0800a958 	.word	0x0800a958
 8007d2c:	0800a95c 	.word	0x0800a95c
 8007d30:	0800a964 	.word	0x0800a964
 8007d34:	0800a960 	.word	0x0800a960
 8007d38:	0800a968 	.word	0x0800a968
 8007d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d40:	429a      	cmp	r2, r3
 8007d42:	bfa8      	it	ge
 8007d44:	461a      	movge	r2, r3
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	4691      	mov	r9, r2
 8007d4a:	dc37      	bgt.n	8007dbc <_printf_float+0x374>
 8007d4c:	f04f 0b00 	mov.w	fp, #0
 8007d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d54:	f104 021a 	add.w	r2, r4, #26
 8007d58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	eba3 0309 	sub.w	r3, r3, r9
 8007d60:	455b      	cmp	r3, fp
 8007d62:	dc33      	bgt.n	8007dcc <_printf_float+0x384>
 8007d64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	db3b      	blt.n	8007de4 <_printf_float+0x39c>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	07da      	lsls	r2, r3, #31
 8007d70:	d438      	bmi.n	8007de4 <_printf_float+0x39c>
 8007d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d74:	9a05      	ldr	r2, [sp, #20]
 8007d76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d78:	1a9a      	subs	r2, r3, r2
 8007d7a:	eba3 0901 	sub.w	r9, r3, r1
 8007d7e:	4591      	cmp	r9, r2
 8007d80:	bfa8      	it	ge
 8007d82:	4691      	movge	r9, r2
 8007d84:	f1b9 0f00 	cmp.w	r9, #0
 8007d88:	dc35      	bgt.n	8007df6 <_printf_float+0x3ae>
 8007d8a:	f04f 0800 	mov.w	r8, #0
 8007d8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d92:	f104 0a1a 	add.w	sl, r4, #26
 8007d96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	eba3 0309 	sub.w	r3, r3, r9
 8007da0:	4543      	cmp	r3, r8
 8007da2:	f77f af79 	ble.w	8007c98 <_printf_float+0x250>
 8007da6:	2301      	movs	r3, #1
 8007da8:	4652      	mov	r2, sl
 8007daa:	4631      	mov	r1, r6
 8007dac:	4628      	mov	r0, r5
 8007dae:	47b8      	blx	r7
 8007db0:	3001      	adds	r0, #1
 8007db2:	f43f aeaa 	beq.w	8007b0a <_printf_float+0xc2>
 8007db6:	f108 0801 	add.w	r8, r8, #1
 8007dba:	e7ec      	b.n	8007d96 <_printf_float+0x34e>
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	d1c0      	bne.n	8007d4c <_printf_float+0x304>
 8007dca:	e69e      	b.n	8007b0a <_printf_float+0xc2>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	4631      	mov	r1, r6
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	9205      	str	r2, [sp, #20]
 8007dd4:	47b8      	blx	r7
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	f43f ae97 	beq.w	8007b0a <_printf_float+0xc2>
 8007ddc:	9a05      	ldr	r2, [sp, #20]
 8007dde:	f10b 0b01 	add.w	fp, fp, #1
 8007de2:	e7b9      	b.n	8007d58 <_printf_float+0x310>
 8007de4:	ee18 3a10 	vmov	r3, s16
 8007de8:	4652      	mov	r2, sl
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b8      	blx	r7
 8007df0:	3001      	adds	r0, #1
 8007df2:	d1be      	bne.n	8007d72 <_printf_float+0x32a>
 8007df4:	e689      	b.n	8007b0a <_printf_float+0xc2>
 8007df6:	9a05      	ldr	r2, [sp, #20]
 8007df8:	464b      	mov	r3, r9
 8007dfa:	4442      	add	r2, r8
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	4628      	mov	r0, r5
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	d1c1      	bne.n	8007d8a <_printf_float+0x342>
 8007e06:	e680      	b.n	8007b0a <_printf_float+0xc2>
 8007e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e0a:	2a01      	cmp	r2, #1
 8007e0c:	dc01      	bgt.n	8007e12 <_printf_float+0x3ca>
 8007e0e:	07db      	lsls	r3, r3, #31
 8007e10:	d538      	bpl.n	8007e84 <_printf_float+0x43c>
 8007e12:	2301      	movs	r3, #1
 8007e14:	4642      	mov	r2, r8
 8007e16:	4631      	mov	r1, r6
 8007e18:	4628      	mov	r0, r5
 8007e1a:	47b8      	blx	r7
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	f43f ae74 	beq.w	8007b0a <_printf_float+0xc2>
 8007e22:	ee18 3a10 	vmov	r3, s16
 8007e26:	4652      	mov	r2, sl
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f ae6b 	beq.w	8007b0a <_printf_float+0xc2>
 8007e34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f7f8 fe5c 	bl	8000af8 <__aeabi_dcmpeq>
 8007e40:	b9d8      	cbnz	r0, 8007e7a <_printf_float+0x432>
 8007e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e44:	f108 0201 	add.w	r2, r8, #1
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	d10e      	bne.n	8007e72 <_printf_float+0x42a>
 8007e54:	e659      	b.n	8007b0a <_printf_float+0xc2>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4652      	mov	r2, sl
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f ae52 	beq.w	8007b0a <_printf_float+0xc2>
 8007e66:	f108 0801 	add.w	r8, r8, #1
 8007e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	4543      	cmp	r3, r8
 8007e70:	dcf1      	bgt.n	8007e56 <_printf_float+0x40e>
 8007e72:	464b      	mov	r3, r9
 8007e74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e78:	e6dc      	b.n	8007c34 <_printf_float+0x1ec>
 8007e7a:	f04f 0800 	mov.w	r8, #0
 8007e7e:	f104 0a1a 	add.w	sl, r4, #26
 8007e82:	e7f2      	b.n	8007e6a <_printf_float+0x422>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4642      	mov	r2, r8
 8007e88:	e7df      	b.n	8007e4a <_printf_float+0x402>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	464a      	mov	r2, r9
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	f43f ae38 	beq.w	8007b0a <_printf_float+0xc2>
 8007e9a:	f108 0801 	add.w	r8, r8, #1
 8007e9e:	68e3      	ldr	r3, [r4, #12]
 8007ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ea2:	1a5b      	subs	r3, r3, r1
 8007ea4:	4543      	cmp	r3, r8
 8007ea6:	dcf0      	bgt.n	8007e8a <_printf_float+0x442>
 8007ea8:	e6fa      	b.n	8007ca0 <_printf_float+0x258>
 8007eaa:	f04f 0800 	mov.w	r8, #0
 8007eae:	f104 0919 	add.w	r9, r4, #25
 8007eb2:	e7f4      	b.n	8007e9e <_printf_float+0x456>

08007eb4 <_printf_common>:
 8007eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb8:	4616      	mov	r6, r2
 8007eba:	4699      	mov	r9, r3
 8007ebc:	688a      	ldr	r2, [r1, #8]
 8007ebe:	690b      	ldr	r3, [r1, #16]
 8007ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bfb8      	it	lt
 8007ec8:	4613      	movlt	r3, r2
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b10a      	cbz	r2, 8007eda <_printf_common+0x26>
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	0699      	lsls	r1, r3, #26
 8007ede:	bf42      	ittt	mi
 8007ee0:	6833      	ldrmi	r3, [r6, #0]
 8007ee2:	3302      	addmi	r3, #2
 8007ee4:	6033      	strmi	r3, [r6, #0]
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	f015 0506 	ands.w	r5, r5, #6
 8007eec:	d106      	bne.n	8007efc <_printf_common+0x48>
 8007eee:	f104 0a19 	add.w	sl, r4, #25
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	6832      	ldr	r2, [r6, #0]
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	42ab      	cmp	r3, r5
 8007efa:	dc26      	bgt.n	8007f4a <_printf_common+0x96>
 8007efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f00:	1e13      	subs	r3, r2, #0
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	bf18      	it	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	0692      	lsls	r2, r2, #26
 8007f0a:	d42b      	bmi.n	8007f64 <_printf_common+0xb0>
 8007f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f10:	4649      	mov	r1, r9
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d01e      	beq.n	8007f58 <_printf_common+0xa4>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	68e5      	ldr	r5, [r4, #12]
 8007f1e:	6832      	ldr	r2, [r6, #0]
 8007f20:	f003 0306 	and.w	r3, r3, #6
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	bf08      	it	eq
 8007f28:	1aad      	subeq	r5, r5, r2
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	6922      	ldr	r2, [r4, #16]
 8007f2e:	bf0c      	ite	eq
 8007f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f34:	2500      	movne	r5, #0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bfc4      	itt	gt
 8007f3a:	1a9b      	subgt	r3, r3, r2
 8007f3c:	18ed      	addgt	r5, r5, r3
 8007f3e:	2600      	movs	r6, #0
 8007f40:	341a      	adds	r4, #26
 8007f42:	42b5      	cmp	r5, r6
 8007f44:	d11a      	bne.n	8007f7c <_printf_common+0xc8>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e008      	b.n	8007f5c <_printf_common+0xa8>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4638      	mov	r0, r7
 8007f52:	47c0      	blx	r8
 8007f54:	3001      	adds	r0, #1
 8007f56:	d103      	bne.n	8007f60 <_printf_common+0xac>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	3501      	adds	r5, #1
 8007f62:	e7c6      	b.n	8007ef2 <_printf_common+0x3e>
 8007f64:	18e1      	adds	r1, r4, r3
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	2030      	movs	r0, #48	; 0x30
 8007f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f6e:	4422      	add	r2, r4
 8007f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f78:	3302      	adds	r3, #2
 8007f7a:	e7c7      	b.n	8007f0c <_printf_common+0x58>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4649      	mov	r1, r9
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c0      	blx	r8
 8007f86:	3001      	adds	r0, #1
 8007f88:	d0e6      	beq.n	8007f58 <_printf_common+0xa4>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7d9      	b.n	8007f42 <_printf_common+0x8e>
	...

08007f90 <_printf_i>:
 8007f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	7e0f      	ldrb	r7, [r1, #24]
 8007f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f98:	2f78      	cmp	r7, #120	; 0x78
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fa6:	d807      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fa8:	2f62      	cmp	r7, #98	; 0x62
 8007faa:	d80a      	bhi.n	8007fc2 <_printf_i+0x32>
 8007fac:	2f00      	cmp	r7, #0
 8007fae:	f000 80d8 	beq.w	8008162 <_printf_i+0x1d2>
 8007fb2:	2f58      	cmp	r7, #88	; 0x58
 8007fb4:	f000 80a3 	beq.w	80080fe <_printf_i+0x16e>
 8007fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fc0:	e03a      	b.n	8008038 <_printf_i+0xa8>
 8007fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fc6:	2b15      	cmp	r3, #21
 8007fc8:	d8f6      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fca:	a101      	add	r1, pc, #4	; (adr r1, 8007fd0 <_printf_i+0x40>)
 8007fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd0:	08008029 	.word	0x08008029
 8007fd4:	0800803d 	.word	0x0800803d
 8007fd8:	08007fb9 	.word	0x08007fb9
 8007fdc:	08007fb9 	.word	0x08007fb9
 8007fe0:	08007fb9 	.word	0x08007fb9
 8007fe4:	08007fb9 	.word	0x08007fb9
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	08007fb9 	.word	0x08007fb9
 8007ff0:	08007fb9 	.word	0x08007fb9
 8007ff4:	08007fb9 	.word	0x08007fb9
 8007ff8:	08007fb9 	.word	0x08007fb9
 8007ffc:	08008149 	.word	0x08008149
 8008000:	0800806d 	.word	0x0800806d
 8008004:	0800812b 	.word	0x0800812b
 8008008:	08007fb9 	.word	0x08007fb9
 800800c:	08007fb9 	.word	0x08007fb9
 8008010:	0800816b 	.word	0x0800816b
 8008014:	08007fb9 	.word	0x08007fb9
 8008018:	0800806d 	.word	0x0800806d
 800801c:	08007fb9 	.word	0x08007fb9
 8008020:	08007fb9 	.word	0x08007fb9
 8008024:	08008133 	.word	0x08008133
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	602a      	str	r2, [r5, #0]
 8008030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008038:	2301      	movs	r3, #1
 800803a:	e0a3      	b.n	8008184 <_printf_i+0x1f4>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	6829      	ldr	r1, [r5, #0]
 8008040:	0606      	lsls	r6, r0, #24
 8008042:	f101 0304 	add.w	r3, r1, #4
 8008046:	d50a      	bpl.n	800805e <_printf_i+0xce>
 8008048:	680e      	ldr	r6, [r1, #0]
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	2e00      	cmp	r6, #0
 800804e:	da03      	bge.n	8008058 <_printf_i+0xc8>
 8008050:	232d      	movs	r3, #45	; 0x2d
 8008052:	4276      	negs	r6, r6
 8008054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008058:	485e      	ldr	r0, [pc, #376]	; (80081d4 <_printf_i+0x244>)
 800805a:	230a      	movs	r3, #10
 800805c:	e019      	b.n	8008092 <_printf_i+0x102>
 800805e:	680e      	ldr	r6, [r1, #0]
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008066:	bf18      	it	ne
 8008068:	b236      	sxthne	r6, r6
 800806a:	e7ef      	b.n	800804c <_printf_i+0xbc>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	1d19      	adds	r1, r3, #4
 8008072:	6029      	str	r1, [r5, #0]
 8008074:	0601      	lsls	r1, r0, #24
 8008076:	d501      	bpl.n	800807c <_printf_i+0xec>
 8008078:	681e      	ldr	r6, [r3, #0]
 800807a:	e002      	b.n	8008082 <_printf_i+0xf2>
 800807c:	0646      	lsls	r6, r0, #25
 800807e:	d5fb      	bpl.n	8008078 <_printf_i+0xe8>
 8008080:	881e      	ldrh	r6, [r3, #0]
 8008082:	4854      	ldr	r0, [pc, #336]	; (80081d4 <_printf_i+0x244>)
 8008084:	2f6f      	cmp	r7, #111	; 0x6f
 8008086:	bf0c      	ite	eq
 8008088:	2308      	moveq	r3, #8
 800808a:	230a      	movne	r3, #10
 800808c:	2100      	movs	r1, #0
 800808e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008092:	6865      	ldr	r5, [r4, #4]
 8008094:	60a5      	str	r5, [r4, #8]
 8008096:	2d00      	cmp	r5, #0
 8008098:	bfa2      	ittt	ge
 800809a:	6821      	ldrge	r1, [r4, #0]
 800809c:	f021 0104 	bicge.w	r1, r1, #4
 80080a0:	6021      	strge	r1, [r4, #0]
 80080a2:	b90e      	cbnz	r6, 80080a8 <_printf_i+0x118>
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	d04d      	beq.n	8008144 <_printf_i+0x1b4>
 80080a8:	4615      	mov	r5, r2
 80080aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ae:	fb03 6711 	mls	r7, r3, r1, r6
 80080b2:	5dc7      	ldrb	r7, [r0, r7]
 80080b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080b8:	4637      	mov	r7, r6
 80080ba:	42bb      	cmp	r3, r7
 80080bc:	460e      	mov	r6, r1
 80080be:	d9f4      	bls.n	80080aa <_printf_i+0x11a>
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10b      	bne.n	80080dc <_printf_i+0x14c>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07de      	lsls	r6, r3, #31
 80080c8:	d508      	bpl.n	80080dc <_printf_i+0x14c>
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4299      	cmp	r1, r3
 80080d0:	bfde      	ittt	le
 80080d2:	2330      	movle	r3, #48	; 0x30
 80080d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080dc:	1b52      	subs	r2, r2, r5
 80080de:	6122      	str	r2, [r4, #16]
 80080e0:	f8cd a000 	str.w	sl, [sp]
 80080e4:	464b      	mov	r3, r9
 80080e6:	aa03      	add	r2, sp, #12
 80080e8:	4621      	mov	r1, r4
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7ff fee2 	bl	8007eb4 <_printf_common>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d14c      	bne.n	800818e <_printf_i+0x1fe>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b004      	add	sp, #16
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fe:	4835      	ldr	r0, [pc, #212]	; (80081d4 <_printf_i+0x244>)
 8008100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008104:	6829      	ldr	r1, [r5, #0]
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	f851 6b04 	ldr.w	r6, [r1], #4
 800810c:	6029      	str	r1, [r5, #0]
 800810e:	061d      	lsls	r5, r3, #24
 8008110:	d514      	bpl.n	800813c <_printf_i+0x1ac>
 8008112:	07df      	lsls	r7, r3, #31
 8008114:	bf44      	itt	mi
 8008116:	f043 0320 	orrmi.w	r3, r3, #32
 800811a:	6023      	strmi	r3, [r4, #0]
 800811c:	b91e      	cbnz	r6, 8008126 <_printf_i+0x196>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f023 0320 	bic.w	r3, r3, #32
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	2310      	movs	r3, #16
 8008128:	e7b0      	b.n	800808c <_printf_i+0xfc>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	f043 0320 	orr.w	r3, r3, #32
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	2378      	movs	r3, #120	; 0x78
 8008134:	4828      	ldr	r0, [pc, #160]	; (80081d8 <_printf_i+0x248>)
 8008136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800813a:	e7e3      	b.n	8008104 <_printf_i+0x174>
 800813c:	0659      	lsls	r1, r3, #25
 800813e:	bf48      	it	mi
 8008140:	b2b6      	uxthmi	r6, r6
 8008142:	e7e6      	b.n	8008112 <_printf_i+0x182>
 8008144:	4615      	mov	r5, r2
 8008146:	e7bb      	b.n	80080c0 <_printf_i+0x130>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	6826      	ldr	r6, [r4, #0]
 800814c:	6961      	ldr	r1, [r4, #20]
 800814e:	1d18      	adds	r0, r3, #4
 8008150:	6028      	str	r0, [r5, #0]
 8008152:	0635      	lsls	r5, r6, #24
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	d501      	bpl.n	800815c <_printf_i+0x1cc>
 8008158:	6019      	str	r1, [r3, #0]
 800815a:	e002      	b.n	8008162 <_printf_i+0x1d2>
 800815c:	0670      	lsls	r0, r6, #25
 800815e:	d5fb      	bpl.n	8008158 <_printf_i+0x1c8>
 8008160:	8019      	strh	r1, [r3, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	4615      	mov	r5, r2
 8008168:	e7ba      	b.n	80080e0 <_printf_i+0x150>
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	1d1a      	adds	r2, r3, #4
 800816e:	602a      	str	r2, [r5, #0]
 8008170:	681d      	ldr	r5, [r3, #0]
 8008172:	6862      	ldr	r2, [r4, #4]
 8008174:	2100      	movs	r1, #0
 8008176:	4628      	mov	r0, r5
 8008178:	f7f8 f84a 	bl	8000210 <memchr>
 800817c:	b108      	cbz	r0, 8008182 <_printf_i+0x1f2>
 800817e:	1b40      	subs	r0, r0, r5
 8008180:	6060      	str	r0, [r4, #4]
 8008182:	6863      	ldr	r3, [r4, #4]
 8008184:	6123      	str	r3, [r4, #16]
 8008186:	2300      	movs	r3, #0
 8008188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800818c:	e7a8      	b.n	80080e0 <_printf_i+0x150>
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	462a      	mov	r2, r5
 8008192:	4649      	mov	r1, r9
 8008194:	4640      	mov	r0, r8
 8008196:	47d0      	blx	sl
 8008198:	3001      	adds	r0, #1
 800819a:	d0ab      	beq.n	80080f4 <_printf_i+0x164>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	079b      	lsls	r3, r3, #30
 80081a0:	d413      	bmi.n	80081ca <_printf_i+0x23a>
 80081a2:	68e0      	ldr	r0, [r4, #12]
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	4298      	cmp	r0, r3
 80081a8:	bfb8      	it	lt
 80081aa:	4618      	movlt	r0, r3
 80081ac:	e7a4      	b.n	80080f8 <_printf_i+0x168>
 80081ae:	2301      	movs	r3, #1
 80081b0:	4632      	mov	r2, r6
 80081b2:	4649      	mov	r1, r9
 80081b4:	4640      	mov	r0, r8
 80081b6:	47d0      	blx	sl
 80081b8:	3001      	adds	r0, #1
 80081ba:	d09b      	beq.n	80080f4 <_printf_i+0x164>
 80081bc:	3501      	adds	r5, #1
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	9903      	ldr	r1, [sp, #12]
 80081c2:	1a5b      	subs	r3, r3, r1
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dcf2      	bgt.n	80081ae <_printf_i+0x21e>
 80081c8:	e7eb      	b.n	80081a2 <_printf_i+0x212>
 80081ca:	2500      	movs	r5, #0
 80081cc:	f104 0619 	add.w	r6, r4, #25
 80081d0:	e7f5      	b.n	80081be <_printf_i+0x22e>
 80081d2:	bf00      	nop
 80081d4:	0800a96a 	.word	0x0800a96a
 80081d8:	0800a97b 	.word	0x0800a97b

080081dc <siprintf>:
 80081dc:	b40e      	push	{r1, r2, r3}
 80081de:	b500      	push	{lr}
 80081e0:	b09c      	sub	sp, #112	; 0x70
 80081e2:	ab1d      	add	r3, sp, #116	; 0x74
 80081e4:	9002      	str	r0, [sp, #8]
 80081e6:	9006      	str	r0, [sp, #24]
 80081e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081ec:	4809      	ldr	r0, [pc, #36]	; (8008214 <siprintf+0x38>)
 80081ee:	9107      	str	r1, [sp, #28]
 80081f0:	9104      	str	r1, [sp, #16]
 80081f2:	4909      	ldr	r1, [pc, #36]	; (8008218 <siprintf+0x3c>)
 80081f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f8:	9105      	str	r1, [sp, #20]
 80081fa:	6800      	ldr	r0, [r0, #0]
 80081fc:	9301      	str	r3, [sp, #4]
 80081fe:	a902      	add	r1, sp, #8
 8008200:	f001 fb78 	bl	80098f4 <_svfiprintf_r>
 8008204:	9b02      	ldr	r3, [sp, #8]
 8008206:	2200      	movs	r2, #0
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	b01c      	add	sp, #112	; 0x70
 800820c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008210:	b003      	add	sp, #12
 8008212:	4770      	bx	lr
 8008214:	2000020c 	.word	0x2000020c
 8008218:	ffff0208 	.word	0xffff0208

0800821c <quorem>:
 800821c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	6903      	ldr	r3, [r0, #16]
 8008222:	690c      	ldr	r4, [r1, #16]
 8008224:	42a3      	cmp	r3, r4
 8008226:	4607      	mov	r7, r0
 8008228:	f2c0 8081 	blt.w	800832e <quorem+0x112>
 800822c:	3c01      	subs	r4, #1
 800822e:	f101 0814 	add.w	r8, r1, #20
 8008232:	f100 0514 	add.w	r5, r0, #20
 8008236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008244:	3301      	adds	r3, #1
 8008246:	429a      	cmp	r2, r3
 8008248:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800824c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008250:	fbb2 f6f3 	udiv	r6, r2, r3
 8008254:	d331      	bcc.n	80082ba <quorem+0x9e>
 8008256:	f04f 0e00 	mov.w	lr, #0
 800825a:	4640      	mov	r0, r8
 800825c:	46ac      	mov	ip, r5
 800825e:	46f2      	mov	sl, lr
 8008260:	f850 2b04 	ldr.w	r2, [r0], #4
 8008264:	b293      	uxth	r3, r2
 8008266:	fb06 e303 	mla	r3, r6, r3, lr
 800826a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800826e:	b29b      	uxth	r3, r3
 8008270:	ebaa 0303 	sub.w	r3, sl, r3
 8008274:	f8dc a000 	ldr.w	sl, [ip]
 8008278:	0c12      	lsrs	r2, r2, #16
 800827a:	fa13 f38a 	uxtah	r3, r3, sl
 800827e:	fb06 e202 	mla	r2, r6, r2, lr
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	9b00      	ldr	r3, [sp, #0]
 8008286:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800828a:	b292      	uxth	r2, r2
 800828c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008294:	f8bd 3000 	ldrh.w	r3, [sp]
 8008298:	4581      	cmp	r9, r0
 800829a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800829e:	f84c 3b04 	str.w	r3, [ip], #4
 80082a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082a6:	d2db      	bcs.n	8008260 <quorem+0x44>
 80082a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80082ac:	b92b      	cbnz	r3, 80082ba <quorem+0x9e>
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	3b04      	subs	r3, #4
 80082b2:	429d      	cmp	r5, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	d32e      	bcc.n	8008316 <quorem+0xfa>
 80082b8:	613c      	str	r4, [r7, #16]
 80082ba:	4638      	mov	r0, r7
 80082bc:	f001 f8c6 	bl	800944c <__mcmp>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	db24      	blt.n	800830e <quorem+0xf2>
 80082c4:	3601      	adds	r6, #1
 80082c6:	4628      	mov	r0, r5
 80082c8:	f04f 0c00 	mov.w	ip, #0
 80082cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80082d0:	f8d0 e000 	ldr.w	lr, [r0]
 80082d4:	b293      	uxth	r3, r2
 80082d6:	ebac 0303 	sub.w	r3, ip, r3
 80082da:	0c12      	lsrs	r2, r2, #16
 80082dc:	fa13 f38e 	uxtah	r3, r3, lr
 80082e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ee:	45c1      	cmp	r9, r8
 80082f0:	f840 3b04 	str.w	r3, [r0], #4
 80082f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082f8:	d2e8      	bcs.n	80082cc <quorem+0xb0>
 80082fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008302:	b922      	cbnz	r2, 800830e <quorem+0xf2>
 8008304:	3b04      	subs	r3, #4
 8008306:	429d      	cmp	r5, r3
 8008308:	461a      	mov	r2, r3
 800830a:	d30a      	bcc.n	8008322 <quorem+0x106>
 800830c:	613c      	str	r4, [r7, #16]
 800830e:	4630      	mov	r0, r6
 8008310:	b003      	add	sp, #12
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	3b04      	subs	r3, #4
 800831a:	2a00      	cmp	r2, #0
 800831c:	d1cc      	bne.n	80082b8 <quorem+0x9c>
 800831e:	3c01      	subs	r4, #1
 8008320:	e7c7      	b.n	80082b2 <quorem+0x96>
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	3b04      	subs	r3, #4
 8008326:	2a00      	cmp	r2, #0
 8008328:	d1f0      	bne.n	800830c <quorem+0xf0>
 800832a:	3c01      	subs	r4, #1
 800832c:	e7eb      	b.n	8008306 <quorem+0xea>
 800832e:	2000      	movs	r0, #0
 8008330:	e7ee      	b.n	8008310 <quorem+0xf4>
 8008332:	0000      	movs	r0, r0
 8008334:	0000      	movs	r0, r0
	...

08008338 <_dtoa_r>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	ed2d 8b04 	vpush	{d8-d9}
 8008340:	ec57 6b10 	vmov	r6, r7, d0
 8008344:	b093      	sub	sp, #76	; 0x4c
 8008346:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008348:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800834c:	9106      	str	r1, [sp, #24]
 800834e:	ee10 aa10 	vmov	sl, s0
 8008352:	4604      	mov	r4, r0
 8008354:	9209      	str	r2, [sp, #36]	; 0x24
 8008356:	930c      	str	r3, [sp, #48]	; 0x30
 8008358:	46bb      	mov	fp, r7
 800835a:	b975      	cbnz	r5, 800837a <_dtoa_r+0x42>
 800835c:	2010      	movs	r0, #16
 800835e:	f000 fddd 	bl	8008f1c <malloc>
 8008362:	4602      	mov	r2, r0
 8008364:	6260      	str	r0, [r4, #36]	; 0x24
 8008366:	b920      	cbnz	r0, 8008372 <_dtoa_r+0x3a>
 8008368:	4ba7      	ldr	r3, [pc, #668]	; (8008608 <_dtoa_r+0x2d0>)
 800836a:	21ea      	movs	r1, #234	; 0xea
 800836c:	48a7      	ldr	r0, [pc, #668]	; (800860c <_dtoa_r+0x2d4>)
 800836e:	f001 fbd1 	bl	8009b14 <__assert_func>
 8008372:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008376:	6005      	str	r5, [r0, #0]
 8008378:	60c5      	str	r5, [r0, #12]
 800837a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800837c:	6819      	ldr	r1, [r3, #0]
 800837e:	b151      	cbz	r1, 8008396 <_dtoa_r+0x5e>
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	604a      	str	r2, [r1, #4]
 8008384:	2301      	movs	r3, #1
 8008386:	4093      	lsls	r3, r2
 8008388:	608b      	str	r3, [r1, #8]
 800838a:	4620      	mov	r0, r4
 800838c:	f000 fe1c 	bl	8008fc8 <_Bfree>
 8008390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	1e3b      	subs	r3, r7, #0
 8008398:	bfaa      	itet	ge
 800839a:	2300      	movge	r3, #0
 800839c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80083a0:	f8c8 3000 	strge.w	r3, [r8]
 80083a4:	4b9a      	ldr	r3, [pc, #616]	; (8008610 <_dtoa_r+0x2d8>)
 80083a6:	bfbc      	itt	lt
 80083a8:	2201      	movlt	r2, #1
 80083aa:	f8c8 2000 	strlt.w	r2, [r8]
 80083ae:	ea33 030b 	bics.w	r3, r3, fp
 80083b2:	d11b      	bne.n	80083ec <_dtoa_r+0xb4>
 80083b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083c0:	4333      	orrs	r3, r6
 80083c2:	f000 8592 	beq.w	8008eea <_dtoa_r+0xbb2>
 80083c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083c8:	b963      	cbnz	r3, 80083e4 <_dtoa_r+0xac>
 80083ca:	4b92      	ldr	r3, [pc, #584]	; (8008614 <_dtoa_r+0x2dc>)
 80083cc:	e022      	b.n	8008414 <_dtoa_r+0xdc>
 80083ce:	4b92      	ldr	r3, [pc, #584]	; (8008618 <_dtoa_r+0x2e0>)
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	3308      	adds	r3, #8
 80083d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	9801      	ldr	r0, [sp, #4]
 80083da:	b013      	add	sp, #76	; 0x4c
 80083dc:	ecbd 8b04 	vpop	{d8-d9}
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	4b8b      	ldr	r3, [pc, #556]	; (8008614 <_dtoa_r+0x2dc>)
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	3303      	adds	r3, #3
 80083ea:	e7f3      	b.n	80083d4 <_dtoa_r+0x9c>
 80083ec:	2200      	movs	r2, #0
 80083ee:	2300      	movs	r3, #0
 80083f0:	4650      	mov	r0, sl
 80083f2:	4659      	mov	r1, fp
 80083f4:	f7f8 fb80 	bl	8000af8 <__aeabi_dcmpeq>
 80083f8:	ec4b ab19 	vmov	d9, sl, fp
 80083fc:	4680      	mov	r8, r0
 80083fe:	b158      	cbz	r0, 8008418 <_dtoa_r+0xe0>
 8008400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008402:	2301      	movs	r3, #1
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 856b 	beq.w	8008ee4 <_dtoa_r+0xbac>
 800840e:	4883      	ldr	r0, [pc, #524]	; (800861c <_dtoa_r+0x2e4>)
 8008410:	6018      	str	r0, [r3, #0]
 8008412:	1e43      	subs	r3, r0, #1
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	e7df      	b.n	80083d8 <_dtoa_r+0xa0>
 8008418:	ec4b ab10 	vmov	d0, sl, fp
 800841c:	aa10      	add	r2, sp, #64	; 0x40
 800841e:	a911      	add	r1, sp, #68	; 0x44
 8008420:	4620      	mov	r0, r4
 8008422:	f001 f8b9 	bl	8009598 <__d2b>
 8008426:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800842a:	ee08 0a10 	vmov	s16, r0
 800842e:	2d00      	cmp	r5, #0
 8008430:	f000 8084 	beq.w	800853c <_dtoa_r+0x204>
 8008434:	ee19 3a90 	vmov	r3, s19
 8008438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800843c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008440:	4656      	mov	r6, sl
 8008442:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008446:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800844a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800844e:	4b74      	ldr	r3, [pc, #464]	; (8008620 <_dtoa_r+0x2e8>)
 8008450:	2200      	movs	r2, #0
 8008452:	4630      	mov	r0, r6
 8008454:	4639      	mov	r1, r7
 8008456:	f7f7 ff2f 	bl	80002b8 <__aeabi_dsub>
 800845a:	a365      	add	r3, pc, #404	; (adr r3, 80085f0 <_dtoa_r+0x2b8>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f7f8 f8e2 	bl	8000628 <__aeabi_dmul>
 8008464:	a364      	add	r3, pc, #400	; (adr r3, 80085f8 <_dtoa_r+0x2c0>)
 8008466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846a:	f7f7 ff27 	bl	80002bc <__adddf3>
 800846e:	4606      	mov	r6, r0
 8008470:	4628      	mov	r0, r5
 8008472:	460f      	mov	r7, r1
 8008474:	f7f8 f86e 	bl	8000554 <__aeabi_i2d>
 8008478:	a361      	add	r3, pc, #388	; (adr r3, 8008600 <_dtoa_r+0x2c8>)
 800847a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847e:	f7f8 f8d3 	bl	8000628 <__aeabi_dmul>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	4630      	mov	r0, r6
 8008488:	4639      	mov	r1, r7
 800848a:	f7f7 ff17 	bl	80002bc <__adddf3>
 800848e:	4606      	mov	r6, r0
 8008490:	460f      	mov	r7, r1
 8008492:	f7f8 fb79 	bl	8000b88 <__aeabi_d2iz>
 8008496:	2200      	movs	r2, #0
 8008498:	9000      	str	r0, [sp, #0]
 800849a:	2300      	movs	r3, #0
 800849c:	4630      	mov	r0, r6
 800849e:	4639      	mov	r1, r7
 80084a0:	f7f8 fb34 	bl	8000b0c <__aeabi_dcmplt>
 80084a4:	b150      	cbz	r0, 80084bc <_dtoa_r+0x184>
 80084a6:	9800      	ldr	r0, [sp, #0]
 80084a8:	f7f8 f854 	bl	8000554 <__aeabi_i2d>
 80084ac:	4632      	mov	r2, r6
 80084ae:	463b      	mov	r3, r7
 80084b0:	f7f8 fb22 	bl	8000af8 <__aeabi_dcmpeq>
 80084b4:	b910      	cbnz	r0, 80084bc <_dtoa_r+0x184>
 80084b6:	9b00      	ldr	r3, [sp, #0]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	9b00      	ldr	r3, [sp, #0]
 80084be:	2b16      	cmp	r3, #22
 80084c0:	d85a      	bhi.n	8008578 <_dtoa_r+0x240>
 80084c2:	9a00      	ldr	r2, [sp, #0]
 80084c4:	4b57      	ldr	r3, [pc, #348]	; (8008624 <_dtoa_r+0x2ec>)
 80084c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	ec51 0b19 	vmov	r0, r1, d9
 80084d2:	f7f8 fb1b 	bl	8000b0c <__aeabi_dcmplt>
 80084d6:	2800      	cmp	r0, #0
 80084d8:	d050      	beq.n	800857c <_dtoa_r+0x244>
 80084da:	9b00      	ldr	r3, [sp, #0]
 80084dc:	3b01      	subs	r3, #1
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	2300      	movs	r3, #0
 80084e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084e6:	1b5d      	subs	r5, r3, r5
 80084e8:	1e6b      	subs	r3, r5, #1
 80084ea:	9305      	str	r3, [sp, #20]
 80084ec:	bf45      	ittet	mi
 80084ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80084f2:	9304      	strmi	r3, [sp, #16]
 80084f4:	2300      	movpl	r3, #0
 80084f6:	2300      	movmi	r3, #0
 80084f8:	bf4c      	ite	mi
 80084fa:	9305      	strmi	r3, [sp, #20]
 80084fc:	9304      	strpl	r3, [sp, #16]
 80084fe:	9b00      	ldr	r3, [sp, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	db3d      	blt.n	8008580 <_dtoa_r+0x248>
 8008504:	9b05      	ldr	r3, [sp, #20]
 8008506:	9a00      	ldr	r2, [sp, #0]
 8008508:	920a      	str	r2, [sp, #40]	; 0x28
 800850a:	4413      	add	r3, r2
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	2300      	movs	r3, #0
 8008510:	9307      	str	r3, [sp, #28]
 8008512:	9b06      	ldr	r3, [sp, #24]
 8008514:	2b09      	cmp	r3, #9
 8008516:	f200 8089 	bhi.w	800862c <_dtoa_r+0x2f4>
 800851a:	2b05      	cmp	r3, #5
 800851c:	bfc4      	itt	gt
 800851e:	3b04      	subgt	r3, #4
 8008520:	9306      	strgt	r3, [sp, #24]
 8008522:	9b06      	ldr	r3, [sp, #24]
 8008524:	f1a3 0302 	sub.w	r3, r3, #2
 8008528:	bfcc      	ite	gt
 800852a:	2500      	movgt	r5, #0
 800852c:	2501      	movle	r5, #1
 800852e:	2b03      	cmp	r3, #3
 8008530:	f200 8087 	bhi.w	8008642 <_dtoa_r+0x30a>
 8008534:	e8df f003 	tbb	[pc, r3]
 8008538:	59383a2d 	.word	0x59383a2d
 800853c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008540:	441d      	add	r5, r3
 8008542:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008546:	2b20      	cmp	r3, #32
 8008548:	bfc1      	itttt	gt
 800854a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800854e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008552:	fa0b f303 	lslgt.w	r3, fp, r3
 8008556:	fa26 f000 	lsrgt.w	r0, r6, r0
 800855a:	bfda      	itte	le
 800855c:	f1c3 0320 	rsble	r3, r3, #32
 8008560:	fa06 f003 	lslle.w	r0, r6, r3
 8008564:	4318      	orrgt	r0, r3
 8008566:	f7f7 ffe5 	bl	8000534 <__aeabi_ui2d>
 800856a:	2301      	movs	r3, #1
 800856c:	4606      	mov	r6, r0
 800856e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008572:	3d01      	subs	r5, #1
 8008574:	930e      	str	r3, [sp, #56]	; 0x38
 8008576:	e76a      	b.n	800844e <_dtoa_r+0x116>
 8008578:	2301      	movs	r3, #1
 800857a:	e7b2      	b.n	80084e2 <_dtoa_r+0x1aa>
 800857c:	900b      	str	r0, [sp, #44]	; 0x2c
 800857e:	e7b1      	b.n	80084e4 <_dtoa_r+0x1ac>
 8008580:	9b04      	ldr	r3, [sp, #16]
 8008582:	9a00      	ldr	r2, [sp, #0]
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	4253      	negs	r3, r2
 800858a:	9307      	str	r3, [sp, #28]
 800858c:	2300      	movs	r3, #0
 800858e:	930a      	str	r3, [sp, #40]	; 0x28
 8008590:	e7bf      	b.n	8008512 <_dtoa_r+0x1da>
 8008592:	2300      	movs	r3, #0
 8008594:	9308      	str	r3, [sp, #32]
 8008596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	dc55      	bgt.n	8008648 <_dtoa_r+0x310>
 800859c:	2301      	movs	r3, #1
 800859e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085a2:	461a      	mov	r2, r3
 80085a4:	9209      	str	r2, [sp, #36]	; 0x24
 80085a6:	e00c      	b.n	80085c2 <_dtoa_r+0x28a>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e7f3      	b.n	8008594 <_dtoa_r+0x25c>
 80085ac:	2300      	movs	r3, #0
 80085ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b0:	9308      	str	r3, [sp, #32]
 80085b2:	9b00      	ldr	r3, [sp, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	9302      	str	r3, [sp, #8]
 80085b8:	3301      	adds	r3, #1
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	9303      	str	r3, [sp, #12]
 80085be:	bfb8      	it	lt
 80085c0:	2301      	movlt	r3, #1
 80085c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085c4:	2200      	movs	r2, #0
 80085c6:	6042      	str	r2, [r0, #4]
 80085c8:	2204      	movs	r2, #4
 80085ca:	f102 0614 	add.w	r6, r2, #20
 80085ce:	429e      	cmp	r6, r3
 80085d0:	6841      	ldr	r1, [r0, #4]
 80085d2:	d93d      	bls.n	8008650 <_dtoa_r+0x318>
 80085d4:	4620      	mov	r0, r4
 80085d6:	f000 fcb7 	bl	8008f48 <_Balloc>
 80085da:	9001      	str	r0, [sp, #4]
 80085dc:	2800      	cmp	r0, #0
 80085de:	d13b      	bne.n	8008658 <_dtoa_r+0x320>
 80085e0:	4b11      	ldr	r3, [pc, #68]	; (8008628 <_dtoa_r+0x2f0>)
 80085e2:	4602      	mov	r2, r0
 80085e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085e8:	e6c0      	b.n	800836c <_dtoa_r+0x34>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e7df      	b.n	80085ae <_dtoa_r+0x276>
 80085ee:	bf00      	nop
 80085f0:	636f4361 	.word	0x636f4361
 80085f4:	3fd287a7 	.word	0x3fd287a7
 80085f8:	8b60c8b3 	.word	0x8b60c8b3
 80085fc:	3fc68a28 	.word	0x3fc68a28
 8008600:	509f79fb 	.word	0x509f79fb
 8008604:	3fd34413 	.word	0x3fd34413
 8008608:	0800a999 	.word	0x0800a999
 800860c:	0800a9b0 	.word	0x0800a9b0
 8008610:	7ff00000 	.word	0x7ff00000
 8008614:	0800a995 	.word	0x0800a995
 8008618:	0800a98c 	.word	0x0800a98c
 800861c:	0800a969 	.word	0x0800a969
 8008620:	3ff80000 	.word	0x3ff80000
 8008624:	0800aaa0 	.word	0x0800aaa0
 8008628:	0800aa0b 	.word	0x0800aa0b
 800862c:	2501      	movs	r5, #1
 800862e:	2300      	movs	r3, #0
 8008630:	9306      	str	r3, [sp, #24]
 8008632:	9508      	str	r5, [sp, #32]
 8008634:	f04f 33ff 	mov.w	r3, #4294967295
 8008638:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800863c:	2200      	movs	r2, #0
 800863e:	2312      	movs	r3, #18
 8008640:	e7b0      	b.n	80085a4 <_dtoa_r+0x26c>
 8008642:	2301      	movs	r3, #1
 8008644:	9308      	str	r3, [sp, #32]
 8008646:	e7f5      	b.n	8008634 <_dtoa_r+0x2fc>
 8008648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800864a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800864e:	e7b8      	b.n	80085c2 <_dtoa_r+0x28a>
 8008650:	3101      	adds	r1, #1
 8008652:	6041      	str	r1, [r0, #4]
 8008654:	0052      	lsls	r2, r2, #1
 8008656:	e7b8      	b.n	80085ca <_dtoa_r+0x292>
 8008658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800865a:	9a01      	ldr	r2, [sp, #4]
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	9b03      	ldr	r3, [sp, #12]
 8008660:	2b0e      	cmp	r3, #14
 8008662:	f200 809d 	bhi.w	80087a0 <_dtoa_r+0x468>
 8008666:	2d00      	cmp	r5, #0
 8008668:	f000 809a 	beq.w	80087a0 <_dtoa_r+0x468>
 800866c:	9b00      	ldr	r3, [sp, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	dd32      	ble.n	80086d8 <_dtoa_r+0x3a0>
 8008672:	4ab7      	ldr	r2, [pc, #732]	; (8008950 <_dtoa_r+0x618>)
 8008674:	f003 030f 	and.w	r3, r3, #15
 8008678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800867c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008680:	9b00      	ldr	r3, [sp, #0]
 8008682:	05d8      	lsls	r0, r3, #23
 8008684:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008688:	d516      	bpl.n	80086b8 <_dtoa_r+0x380>
 800868a:	4bb2      	ldr	r3, [pc, #712]	; (8008954 <_dtoa_r+0x61c>)
 800868c:	ec51 0b19 	vmov	r0, r1, d9
 8008690:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008694:	f7f8 f8f2 	bl	800087c <__aeabi_ddiv>
 8008698:	f007 070f 	and.w	r7, r7, #15
 800869c:	4682      	mov	sl, r0
 800869e:	468b      	mov	fp, r1
 80086a0:	2503      	movs	r5, #3
 80086a2:	4eac      	ldr	r6, [pc, #688]	; (8008954 <_dtoa_r+0x61c>)
 80086a4:	b957      	cbnz	r7, 80086bc <_dtoa_r+0x384>
 80086a6:	4642      	mov	r2, r8
 80086a8:	464b      	mov	r3, r9
 80086aa:	4650      	mov	r0, sl
 80086ac:	4659      	mov	r1, fp
 80086ae:	f7f8 f8e5 	bl	800087c <__aeabi_ddiv>
 80086b2:	4682      	mov	sl, r0
 80086b4:	468b      	mov	fp, r1
 80086b6:	e028      	b.n	800870a <_dtoa_r+0x3d2>
 80086b8:	2502      	movs	r5, #2
 80086ba:	e7f2      	b.n	80086a2 <_dtoa_r+0x36a>
 80086bc:	07f9      	lsls	r1, r7, #31
 80086be:	d508      	bpl.n	80086d2 <_dtoa_r+0x39a>
 80086c0:	4640      	mov	r0, r8
 80086c2:	4649      	mov	r1, r9
 80086c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086c8:	f7f7 ffae 	bl	8000628 <__aeabi_dmul>
 80086cc:	3501      	adds	r5, #1
 80086ce:	4680      	mov	r8, r0
 80086d0:	4689      	mov	r9, r1
 80086d2:	107f      	asrs	r7, r7, #1
 80086d4:	3608      	adds	r6, #8
 80086d6:	e7e5      	b.n	80086a4 <_dtoa_r+0x36c>
 80086d8:	f000 809b 	beq.w	8008812 <_dtoa_r+0x4da>
 80086dc:	9b00      	ldr	r3, [sp, #0]
 80086de:	4f9d      	ldr	r7, [pc, #628]	; (8008954 <_dtoa_r+0x61c>)
 80086e0:	425e      	negs	r6, r3
 80086e2:	4b9b      	ldr	r3, [pc, #620]	; (8008950 <_dtoa_r+0x618>)
 80086e4:	f006 020f 	and.w	r2, r6, #15
 80086e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f0:	ec51 0b19 	vmov	r0, r1, d9
 80086f4:	f7f7 ff98 	bl	8000628 <__aeabi_dmul>
 80086f8:	1136      	asrs	r6, r6, #4
 80086fa:	4682      	mov	sl, r0
 80086fc:	468b      	mov	fp, r1
 80086fe:	2300      	movs	r3, #0
 8008700:	2502      	movs	r5, #2
 8008702:	2e00      	cmp	r6, #0
 8008704:	d17a      	bne.n	80087fc <_dtoa_r+0x4c4>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1d3      	bne.n	80086b2 <_dtoa_r+0x37a>
 800870a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 8082 	beq.w	8008816 <_dtoa_r+0x4de>
 8008712:	4b91      	ldr	r3, [pc, #580]	; (8008958 <_dtoa_r+0x620>)
 8008714:	2200      	movs	r2, #0
 8008716:	4650      	mov	r0, sl
 8008718:	4659      	mov	r1, fp
 800871a:	f7f8 f9f7 	bl	8000b0c <__aeabi_dcmplt>
 800871e:	2800      	cmp	r0, #0
 8008720:	d079      	beq.n	8008816 <_dtoa_r+0x4de>
 8008722:	9b03      	ldr	r3, [sp, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d076      	beq.n	8008816 <_dtoa_r+0x4de>
 8008728:	9b02      	ldr	r3, [sp, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	dd36      	ble.n	800879c <_dtoa_r+0x464>
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	4650      	mov	r0, sl
 8008732:	4659      	mov	r1, fp
 8008734:	1e5f      	subs	r7, r3, #1
 8008736:	2200      	movs	r2, #0
 8008738:	4b88      	ldr	r3, [pc, #544]	; (800895c <_dtoa_r+0x624>)
 800873a:	f7f7 ff75 	bl	8000628 <__aeabi_dmul>
 800873e:	9e02      	ldr	r6, [sp, #8]
 8008740:	4682      	mov	sl, r0
 8008742:	468b      	mov	fp, r1
 8008744:	3501      	adds	r5, #1
 8008746:	4628      	mov	r0, r5
 8008748:	f7f7 ff04 	bl	8000554 <__aeabi_i2d>
 800874c:	4652      	mov	r2, sl
 800874e:	465b      	mov	r3, fp
 8008750:	f7f7 ff6a 	bl	8000628 <__aeabi_dmul>
 8008754:	4b82      	ldr	r3, [pc, #520]	; (8008960 <_dtoa_r+0x628>)
 8008756:	2200      	movs	r2, #0
 8008758:	f7f7 fdb0 	bl	80002bc <__adddf3>
 800875c:	46d0      	mov	r8, sl
 800875e:	46d9      	mov	r9, fp
 8008760:	4682      	mov	sl, r0
 8008762:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008766:	2e00      	cmp	r6, #0
 8008768:	d158      	bne.n	800881c <_dtoa_r+0x4e4>
 800876a:	4b7e      	ldr	r3, [pc, #504]	; (8008964 <_dtoa_r+0x62c>)
 800876c:	2200      	movs	r2, #0
 800876e:	4640      	mov	r0, r8
 8008770:	4649      	mov	r1, r9
 8008772:	f7f7 fda1 	bl	80002b8 <__aeabi_dsub>
 8008776:	4652      	mov	r2, sl
 8008778:	465b      	mov	r3, fp
 800877a:	4680      	mov	r8, r0
 800877c:	4689      	mov	r9, r1
 800877e:	f7f8 f9e3 	bl	8000b48 <__aeabi_dcmpgt>
 8008782:	2800      	cmp	r0, #0
 8008784:	f040 8295 	bne.w	8008cb2 <_dtoa_r+0x97a>
 8008788:	4652      	mov	r2, sl
 800878a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800878e:	4640      	mov	r0, r8
 8008790:	4649      	mov	r1, r9
 8008792:	f7f8 f9bb 	bl	8000b0c <__aeabi_dcmplt>
 8008796:	2800      	cmp	r0, #0
 8008798:	f040 8289 	bne.w	8008cae <_dtoa_r+0x976>
 800879c:	ec5b ab19 	vmov	sl, fp, d9
 80087a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f2c0 8148 	blt.w	8008a38 <_dtoa_r+0x700>
 80087a8:	9a00      	ldr	r2, [sp, #0]
 80087aa:	2a0e      	cmp	r2, #14
 80087ac:	f300 8144 	bgt.w	8008a38 <_dtoa_r+0x700>
 80087b0:	4b67      	ldr	r3, [pc, #412]	; (8008950 <_dtoa_r+0x618>)
 80087b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f280 80d5 	bge.w	800896c <_dtoa_r+0x634>
 80087c2:	9b03      	ldr	r3, [sp, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f300 80d1 	bgt.w	800896c <_dtoa_r+0x634>
 80087ca:	f040 826f 	bne.w	8008cac <_dtoa_r+0x974>
 80087ce:	4b65      	ldr	r3, [pc, #404]	; (8008964 <_dtoa_r+0x62c>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	4640      	mov	r0, r8
 80087d4:	4649      	mov	r1, r9
 80087d6:	f7f7 ff27 	bl	8000628 <__aeabi_dmul>
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	f7f8 f9a9 	bl	8000b34 <__aeabi_dcmpge>
 80087e2:	9e03      	ldr	r6, [sp, #12]
 80087e4:	4637      	mov	r7, r6
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f040 8245 	bne.w	8008c76 <_dtoa_r+0x93e>
 80087ec:	9d01      	ldr	r5, [sp, #4]
 80087ee:	2331      	movs	r3, #49	; 0x31
 80087f0:	f805 3b01 	strb.w	r3, [r5], #1
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	e240      	b.n	8008c7e <_dtoa_r+0x946>
 80087fc:	07f2      	lsls	r2, r6, #31
 80087fe:	d505      	bpl.n	800880c <_dtoa_r+0x4d4>
 8008800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008804:	f7f7 ff10 	bl	8000628 <__aeabi_dmul>
 8008808:	3501      	adds	r5, #1
 800880a:	2301      	movs	r3, #1
 800880c:	1076      	asrs	r6, r6, #1
 800880e:	3708      	adds	r7, #8
 8008810:	e777      	b.n	8008702 <_dtoa_r+0x3ca>
 8008812:	2502      	movs	r5, #2
 8008814:	e779      	b.n	800870a <_dtoa_r+0x3d2>
 8008816:	9f00      	ldr	r7, [sp, #0]
 8008818:	9e03      	ldr	r6, [sp, #12]
 800881a:	e794      	b.n	8008746 <_dtoa_r+0x40e>
 800881c:	9901      	ldr	r1, [sp, #4]
 800881e:	4b4c      	ldr	r3, [pc, #304]	; (8008950 <_dtoa_r+0x618>)
 8008820:	4431      	add	r1, r6
 8008822:	910d      	str	r1, [sp, #52]	; 0x34
 8008824:	9908      	ldr	r1, [sp, #32]
 8008826:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800882a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800882e:	2900      	cmp	r1, #0
 8008830:	d043      	beq.n	80088ba <_dtoa_r+0x582>
 8008832:	494d      	ldr	r1, [pc, #308]	; (8008968 <_dtoa_r+0x630>)
 8008834:	2000      	movs	r0, #0
 8008836:	f7f8 f821 	bl	800087c <__aeabi_ddiv>
 800883a:	4652      	mov	r2, sl
 800883c:	465b      	mov	r3, fp
 800883e:	f7f7 fd3b 	bl	80002b8 <__aeabi_dsub>
 8008842:	9d01      	ldr	r5, [sp, #4]
 8008844:	4682      	mov	sl, r0
 8008846:	468b      	mov	fp, r1
 8008848:	4649      	mov	r1, r9
 800884a:	4640      	mov	r0, r8
 800884c:	f7f8 f99c 	bl	8000b88 <__aeabi_d2iz>
 8008850:	4606      	mov	r6, r0
 8008852:	f7f7 fe7f 	bl	8000554 <__aeabi_i2d>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4640      	mov	r0, r8
 800885c:	4649      	mov	r1, r9
 800885e:	f7f7 fd2b 	bl	80002b8 <__aeabi_dsub>
 8008862:	3630      	adds	r6, #48	; 0x30
 8008864:	f805 6b01 	strb.w	r6, [r5], #1
 8008868:	4652      	mov	r2, sl
 800886a:	465b      	mov	r3, fp
 800886c:	4680      	mov	r8, r0
 800886e:	4689      	mov	r9, r1
 8008870:	f7f8 f94c 	bl	8000b0c <__aeabi_dcmplt>
 8008874:	2800      	cmp	r0, #0
 8008876:	d163      	bne.n	8008940 <_dtoa_r+0x608>
 8008878:	4642      	mov	r2, r8
 800887a:	464b      	mov	r3, r9
 800887c:	4936      	ldr	r1, [pc, #216]	; (8008958 <_dtoa_r+0x620>)
 800887e:	2000      	movs	r0, #0
 8008880:	f7f7 fd1a 	bl	80002b8 <__aeabi_dsub>
 8008884:	4652      	mov	r2, sl
 8008886:	465b      	mov	r3, fp
 8008888:	f7f8 f940 	bl	8000b0c <__aeabi_dcmplt>
 800888c:	2800      	cmp	r0, #0
 800888e:	f040 80b5 	bne.w	80089fc <_dtoa_r+0x6c4>
 8008892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008894:	429d      	cmp	r5, r3
 8008896:	d081      	beq.n	800879c <_dtoa_r+0x464>
 8008898:	4b30      	ldr	r3, [pc, #192]	; (800895c <_dtoa_r+0x624>)
 800889a:	2200      	movs	r2, #0
 800889c:	4650      	mov	r0, sl
 800889e:	4659      	mov	r1, fp
 80088a0:	f7f7 fec2 	bl	8000628 <__aeabi_dmul>
 80088a4:	4b2d      	ldr	r3, [pc, #180]	; (800895c <_dtoa_r+0x624>)
 80088a6:	4682      	mov	sl, r0
 80088a8:	468b      	mov	fp, r1
 80088aa:	4640      	mov	r0, r8
 80088ac:	4649      	mov	r1, r9
 80088ae:	2200      	movs	r2, #0
 80088b0:	f7f7 feba 	bl	8000628 <__aeabi_dmul>
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	e7c6      	b.n	8008848 <_dtoa_r+0x510>
 80088ba:	4650      	mov	r0, sl
 80088bc:	4659      	mov	r1, fp
 80088be:	f7f7 feb3 	bl	8000628 <__aeabi_dmul>
 80088c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c4:	9d01      	ldr	r5, [sp, #4]
 80088c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c8:	4682      	mov	sl, r0
 80088ca:	468b      	mov	fp, r1
 80088cc:	4649      	mov	r1, r9
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7f8 f95a 	bl	8000b88 <__aeabi_d2iz>
 80088d4:	4606      	mov	r6, r0
 80088d6:	f7f7 fe3d 	bl	8000554 <__aeabi_i2d>
 80088da:	3630      	adds	r6, #48	; 0x30
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	4640      	mov	r0, r8
 80088e2:	4649      	mov	r1, r9
 80088e4:	f7f7 fce8 	bl	80002b8 <__aeabi_dsub>
 80088e8:	f805 6b01 	strb.w	r6, [r5], #1
 80088ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ee:	429d      	cmp	r5, r3
 80088f0:	4680      	mov	r8, r0
 80088f2:	4689      	mov	r9, r1
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	d124      	bne.n	8008944 <_dtoa_r+0x60c>
 80088fa:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <_dtoa_r+0x630>)
 80088fc:	4650      	mov	r0, sl
 80088fe:	4659      	mov	r1, fp
 8008900:	f7f7 fcdc 	bl	80002bc <__adddf3>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f8 f91c 	bl	8000b48 <__aeabi_dcmpgt>
 8008910:	2800      	cmp	r0, #0
 8008912:	d173      	bne.n	80089fc <_dtoa_r+0x6c4>
 8008914:	4652      	mov	r2, sl
 8008916:	465b      	mov	r3, fp
 8008918:	4913      	ldr	r1, [pc, #76]	; (8008968 <_dtoa_r+0x630>)
 800891a:	2000      	movs	r0, #0
 800891c:	f7f7 fccc 	bl	80002b8 <__aeabi_dsub>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4640      	mov	r0, r8
 8008926:	4649      	mov	r1, r9
 8008928:	f7f8 f8f0 	bl	8000b0c <__aeabi_dcmplt>
 800892c:	2800      	cmp	r0, #0
 800892e:	f43f af35 	beq.w	800879c <_dtoa_r+0x464>
 8008932:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008934:	1e6b      	subs	r3, r5, #1
 8008936:	930f      	str	r3, [sp, #60]	; 0x3c
 8008938:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800893c:	2b30      	cmp	r3, #48	; 0x30
 800893e:	d0f8      	beq.n	8008932 <_dtoa_r+0x5fa>
 8008940:	9700      	str	r7, [sp, #0]
 8008942:	e049      	b.n	80089d8 <_dtoa_r+0x6a0>
 8008944:	4b05      	ldr	r3, [pc, #20]	; (800895c <_dtoa_r+0x624>)
 8008946:	f7f7 fe6f 	bl	8000628 <__aeabi_dmul>
 800894a:	4680      	mov	r8, r0
 800894c:	4689      	mov	r9, r1
 800894e:	e7bd      	b.n	80088cc <_dtoa_r+0x594>
 8008950:	0800aaa0 	.word	0x0800aaa0
 8008954:	0800aa78 	.word	0x0800aa78
 8008958:	3ff00000 	.word	0x3ff00000
 800895c:	40240000 	.word	0x40240000
 8008960:	401c0000 	.word	0x401c0000
 8008964:	40140000 	.word	0x40140000
 8008968:	3fe00000 	.word	0x3fe00000
 800896c:	9d01      	ldr	r5, [sp, #4]
 800896e:	4656      	mov	r6, sl
 8008970:	465f      	mov	r7, fp
 8008972:	4642      	mov	r2, r8
 8008974:	464b      	mov	r3, r9
 8008976:	4630      	mov	r0, r6
 8008978:	4639      	mov	r1, r7
 800897a:	f7f7 ff7f 	bl	800087c <__aeabi_ddiv>
 800897e:	f7f8 f903 	bl	8000b88 <__aeabi_d2iz>
 8008982:	4682      	mov	sl, r0
 8008984:	f7f7 fde6 	bl	8000554 <__aeabi_i2d>
 8008988:	4642      	mov	r2, r8
 800898a:	464b      	mov	r3, r9
 800898c:	f7f7 fe4c 	bl	8000628 <__aeabi_dmul>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4630      	mov	r0, r6
 8008996:	4639      	mov	r1, r7
 8008998:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800899c:	f7f7 fc8c 	bl	80002b8 <__aeabi_dsub>
 80089a0:	f805 6b01 	strb.w	r6, [r5], #1
 80089a4:	9e01      	ldr	r6, [sp, #4]
 80089a6:	9f03      	ldr	r7, [sp, #12]
 80089a8:	1bae      	subs	r6, r5, r6
 80089aa:	42b7      	cmp	r7, r6
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	d135      	bne.n	8008a1e <_dtoa_r+0x6e6>
 80089b2:	f7f7 fc83 	bl	80002bc <__adddf3>
 80089b6:	4642      	mov	r2, r8
 80089b8:	464b      	mov	r3, r9
 80089ba:	4606      	mov	r6, r0
 80089bc:	460f      	mov	r7, r1
 80089be:	f7f8 f8c3 	bl	8000b48 <__aeabi_dcmpgt>
 80089c2:	b9d0      	cbnz	r0, 80089fa <_dtoa_r+0x6c2>
 80089c4:	4642      	mov	r2, r8
 80089c6:	464b      	mov	r3, r9
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f8 f894 	bl	8000af8 <__aeabi_dcmpeq>
 80089d0:	b110      	cbz	r0, 80089d8 <_dtoa_r+0x6a0>
 80089d2:	f01a 0f01 	tst.w	sl, #1
 80089d6:	d110      	bne.n	80089fa <_dtoa_r+0x6c2>
 80089d8:	4620      	mov	r0, r4
 80089da:	ee18 1a10 	vmov	r1, s16
 80089de:	f000 faf3 	bl	8008fc8 <_Bfree>
 80089e2:	2300      	movs	r3, #0
 80089e4:	9800      	ldr	r0, [sp, #0]
 80089e6:	702b      	strb	r3, [r5, #0]
 80089e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ea:	3001      	adds	r0, #1
 80089ec:	6018      	str	r0, [r3, #0]
 80089ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f43f acf1 	beq.w	80083d8 <_dtoa_r+0xa0>
 80089f6:	601d      	str	r5, [r3, #0]
 80089f8:	e4ee      	b.n	80083d8 <_dtoa_r+0xa0>
 80089fa:	9f00      	ldr	r7, [sp, #0]
 80089fc:	462b      	mov	r3, r5
 80089fe:	461d      	mov	r5, r3
 8008a00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a04:	2a39      	cmp	r2, #57	; 0x39
 8008a06:	d106      	bne.n	8008a16 <_dtoa_r+0x6de>
 8008a08:	9a01      	ldr	r2, [sp, #4]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d1f7      	bne.n	80089fe <_dtoa_r+0x6c6>
 8008a0e:	9901      	ldr	r1, [sp, #4]
 8008a10:	2230      	movs	r2, #48	; 0x30
 8008a12:	3701      	adds	r7, #1
 8008a14:	700a      	strb	r2, [r1, #0]
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	3201      	adds	r2, #1
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	e790      	b.n	8008940 <_dtoa_r+0x608>
 8008a1e:	4ba6      	ldr	r3, [pc, #664]	; (8008cb8 <_dtoa_r+0x980>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	f7f7 fe01 	bl	8000628 <__aeabi_dmul>
 8008a26:	2200      	movs	r2, #0
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	f7f8 f863 	bl	8000af8 <__aeabi_dcmpeq>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d09d      	beq.n	8008972 <_dtoa_r+0x63a>
 8008a36:	e7cf      	b.n	80089d8 <_dtoa_r+0x6a0>
 8008a38:	9a08      	ldr	r2, [sp, #32]
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	f000 80d7 	beq.w	8008bee <_dtoa_r+0x8b6>
 8008a40:	9a06      	ldr	r2, [sp, #24]
 8008a42:	2a01      	cmp	r2, #1
 8008a44:	f300 80ba 	bgt.w	8008bbc <_dtoa_r+0x884>
 8008a48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a4a:	2a00      	cmp	r2, #0
 8008a4c:	f000 80b2 	beq.w	8008bb4 <_dtoa_r+0x87c>
 8008a50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a54:	9e07      	ldr	r6, [sp, #28]
 8008a56:	9d04      	ldr	r5, [sp, #16]
 8008a58:	9a04      	ldr	r2, [sp, #16]
 8008a5a:	441a      	add	r2, r3
 8008a5c:	9204      	str	r2, [sp, #16]
 8008a5e:	9a05      	ldr	r2, [sp, #20]
 8008a60:	2101      	movs	r1, #1
 8008a62:	441a      	add	r2, r3
 8008a64:	4620      	mov	r0, r4
 8008a66:	9205      	str	r2, [sp, #20]
 8008a68:	f000 fb66 	bl	8009138 <__i2b>
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	2d00      	cmp	r5, #0
 8008a70:	dd0c      	ble.n	8008a8c <_dtoa_r+0x754>
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dd09      	ble.n	8008a8c <_dtoa_r+0x754>
 8008a78:	42ab      	cmp	r3, r5
 8008a7a:	9a04      	ldr	r2, [sp, #16]
 8008a7c:	bfa8      	it	ge
 8008a7e:	462b      	movge	r3, r5
 8008a80:	1ad2      	subs	r2, r2, r3
 8008a82:	9204      	str	r2, [sp, #16]
 8008a84:	9a05      	ldr	r2, [sp, #20]
 8008a86:	1aed      	subs	r5, r5, r3
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	b31b      	cbz	r3, 8008ad8 <_dtoa_r+0x7a0>
 8008a90:	9b08      	ldr	r3, [sp, #32]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f000 80af 	beq.w	8008bf6 <_dtoa_r+0x8be>
 8008a98:	2e00      	cmp	r6, #0
 8008a9a:	dd13      	ble.n	8008ac4 <_dtoa_r+0x78c>
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	4632      	mov	r2, r6
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fc09 	bl	80092b8 <__pow5mult>
 8008aa6:	ee18 2a10 	vmov	r2, s16
 8008aaa:	4601      	mov	r1, r0
 8008aac:	4607      	mov	r7, r0
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fb58 	bl	8009164 <__multiply>
 8008ab4:	ee18 1a10 	vmov	r1, s16
 8008ab8:	4680      	mov	r8, r0
 8008aba:	4620      	mov	r0, r4
 8008abc:	f000 fa84 	bl	8008fc8 <_Bfree>
 8008ac0:	ee08 8a10 	vmov	s16, r8
 8008ac4:	9b07      	ldr	r3, [sp, #28]
 8008ac6:	1b9a      	subs	r2, r3, r6
 8008ac8:	d006      	beq.n	8008ad8 <_dtoa_r+0x7a0>
 8008aca:	ee18 1a10 	vmov	r1, s16
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 fbf2 	bl	80092b8 <__pow5mult>
 8008ad4:	ee08 0a10 	vmov	s16, r0
 8008ad8:	2101      	movs	r1, #1
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fb2c 	bl	8009138 <__i2b>
 8008ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	f340 8088 	ble.w	8008bfa <_dtoa_r+0x8c2>
 8008aea:	461a      	mov	r2, r3
 8008aec:	4601      	mov	r1, r0
 8008aee:	4620      	mov	r0, r4
 8008af0:	f000 fbe2 	bl	80092b8 <__pow5mult>
 8008af4:	9b06      	ldr	r3, [sp, #24]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	4606      	mov	r6, r0
 8008afa:	f340 8081 	ble.w	8008c00 <_dtoa_r+0x8c8>
 8008afe:	f04f 0800 	mov.w	r8, #0
 8008b02:	6933      	ldr	r3, [r6, #16]
 8008b04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b08:	6918      	ldr	r0, [r3, #16]
 8008b0a:	f000 fac5 	bl	8009098 <__hi0bits>
 8008b0e:	f1c0 0020 	rsb	r0, r0, #32
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	4418      	add	r0, r3
 8008b16:	f010 001f 	ands.w	r0, r0, #31
 8008b1a:	f000 8092 	beq.w	8008c42 <_dtoa_r+0x90a>
 8008b1e:	f1c0 0320 	rsb	r3, r0, #32
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	f340 808a 	ble.w	8008c3c <_dtoa_r+0x904>
 8008b28:	f1c0 001c 	rsb	r0, r0, #28
 8008b2c:	9b04      	ldr	r3, [sp, #16]
 8008b2e:	4403      	add	r3, r0
 8008b30:	9304      	str	r3, [sp, #16]
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	4403      	add	r3, r0
 8008b36:	4405      	add	r5, r0
 8008b38:	9305      	str	r3, [sp, #20]
 8008b3a:	9b04      	ldr	r3, [sp, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	dd07      	ble.n	8008b50 <_dtoa_r+0x818>
 8008b40:	ee18 1a10 	vmov	r1, s16
 8008b44:	461a      	mov	r2, r3
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 fc10 	bl	800936c <__lshift>
 8008b4c:	ee08 0a10 	vmov	s16, r0
 8008b50:	9b05      	ldr	r3, [sp, #20]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dd05      	ble.n	8008b62 <_dtoa_r+0x82a>
 8008b56:	4631      	mov	r1, r6
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fc06 	bl	800936c <__lshift>
 8008b60:	4606      	mov	r6, r0
 8008b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d06e      	beq.n	8008c46 <_dtoa_r+0x90e>
 8008b68:	ee18 0a10 	vmov	r0, s16
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	f000 fc6d 	bl	800944c <__mcmp>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	da67      	bge.n	8008c46 <_dtoa_r+0x90e>
 8008b76:	9b00      	ldr	r3, [sp, #0]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	ee18 1a10 	vmov	r1, s16
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	220a      	movs	r2, #10
 8008b82:	2300      	movs	r3, #0
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 fa41 	bl	800900c <__multadd>
 8008b8a:	9b08      	ldr	r3, [sp, #32]
 8008b8c:	ee08 0a10 	vmov	s16, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 81b1 	beq.w	8008ef8 <_dtoa_r+0xbc0>
 8008b96:	2300      	movs	r3, #0
 8008b98:	4639      	mov	r1, r7
 8008b9a:	220a      	movs	r2, #10
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 fa35 	bl	800900c <__multadd>
 8008ba2:	9b02      	ldr	r3, [sp, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	f300 808e 	bgt.w	8008cc8 <_dtoa_r+0x990>
 8008bac:	9b06      	ldr	r3, [sp, #24]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	dc51      	bgt.n	8008c56 <_dtoa_r+0x91e>
 8008bb2:	e089      	b.n	8008cc8 <_dtoa_r+0x990>
 8008bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bba:	e74b      	b.n	8008a54 <_dtoa_r+0x71c>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	1e5e      	subs	r6, r3, #1
 8008bc0:	9b07      	ldr	r3, [sp, #28]
 8008bc2:	42b3      	cmp	r3, r6
 8008bc4:	bfbf      	itttt	lt
 8008bc6:	9b07      	ldrlt	r3, [sp, #28]
 8008bc8:	9607      	strlt	r6, [sp, #28]
 8008bca:	1af2      	sublt	r2, r6, r3
 8008bcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008bce:	bfb6      	itet	lt
 8008bd0:	189b      	addlt	r3, r3, r2
 8008bd2:	1b9e      	subge	r6, r3, r6
 8008bd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	bfb8      	it	lt
 8008bda:	2600      	movlt	r6, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfb7      	itett	lt
 8008be0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008be4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008be8:	1a9d      	sublt	r5, r3, r2
 8008bea:	2300      	movlt	r3, #0
 8008bec:	e734      	b.n	8008a58 <_dtoa_r+0x720>
 8008bee:	9e07      	ldr	r6, [sp, #28]
 8008bf0:	9d04      	ldr	r5, [sp, #16]
 8008bf2:	9f08      	ldr	r7, [sp, #32]
 8008bf4:	e73b      	b.n	8008a6e <_dtoa_r+0x736>
 8008bf6:	9a07      	ldr	r2, [sp, #28]
 8008bf8:	e767      	b.n	8008aca <_dtoa_r+0x792>
 8008bfa:	9b06      	ldr	r3, [sp, #24]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	dc18      	bgt.n	8008c32 <_dtoa_r+0x8fa>
 8008c00:	f1ba 0f00 	cmp.w	sl, #0
 8008c04:	d115      	bne.n	8008c32 <_dtoa_r+0x8fa>
 8008c06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c0a:	b993      	cbnz	r3, 8008c32 <_dtoa_r+0x8fa>
 8008c0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c10:	0d1b      	lsrs	r3, r3, #20
 8008c12:	051b      	lsls	r3, r3, #20
 8008c14:	b183      	cbz	r3, 8008c38 <_dtoa_r+0x900>
 8008c16:	9b04      	ldr	r3, [sp, #16]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	9304      	str	r3, [sp, #16]
 8008c1c:	9b05      	ldr	r3, [sp, #20]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	f04f 0801 	mov.w	r8, #1
 8008c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f47f af6a 	bne.w	8008b02 <_dtoa_r+0x7ca>
 8008c2e:	2001      	movs	r0, #1
 8008c30:	e76f      	b.n	8008b12 <_dtoa_r+0x7da>
 8008c32:	f04f 0800 	mov.w	r8, #0
 8008c36:	e7f6      	b.n	8008c26 <_dtoa_r+0x8ee>
 8008c38:	4698      	mov	r8, r3
 8008c3a:	e7f4      	b.n	8008c26 <_dtoa_r+0x8ee>
 8008c3c:	f43f af7d 	beq.w	8008b3a <_dtoa_r+0x802>
 8008c40:	4618      	mov	r0, r3
 8008c42:	301c      	adds	r0, #28
 8008c44:	e772      	b.n	8008b2c <_dtoa_r+0x7f4>
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dc37      	bgt.n	8008cbc <_dtoa_r+0x984>
 8008c4c:	9b06      	ldr	r3, [sp, #24]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	dd34      	ble.n	8008cbc <_dtoa_r+0x984>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	9302      	str	r3, [sp, #8]
 8008c56:	9b02      	ldr	r3, [sp, #8]
 8008c58:	b96b      	cbnz	r3, 8008c76 <_dtoa_r+0x93e>
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	2205      	movs	r2, #5
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 f9d4 	bl	800900c <__multadd>
 8008c64:	4601      	mov	r1, r0
 8008c66:	4606      	mov	r6, r0
 8008c68:	ee18 0a10 	vmov	r0, s16
 8008c6c:	f000 fbee 	bl	800944c <__mcmp>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f73f adbb 	bgt.w	80087ec <_dtoa_r+0x4b4>
 8008c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c78:	9d01      	ldr	r5, [sp, #4]
 8008c7a:	43db      	mvns	r3, r3
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	f04f 0800 	mov.w	r8, #0
 8008c82:	4631      	mov	r1, r6
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 f99f 	bl	8008fc8 <_Bfree>
 8008c8a:	2f00      	cmp	r7, #0
 8008c8c:	f43f aea4 	beq.w	80089d8 <_dtoa_r+0x6a0>
 8008c90:	f1b8 0f00 	cmp.w	r8, #0
 8008c94:	d005      	beq.n	8008ca2 <_dtoa_r+0x96a>
 8008c96:	45b8      	cmp	r8, r7
 8008c98:	d003      	beq.n	8008ca2 <_dtoa_r+0x96a>
 8008c9a:	4641      	mov	r1, r8
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 f993 	bl	8008fc8 <_Bfree>
 8008ca2:	4639      	mov	r1, r7
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f000 f98f 	bl	8008fc8 <_Bfree>
 8008caa:	e695      	b.n	80089d8 <_dtoa_r+0x6a0>
 8008cac:	2600      	movs	r6, #0
 8008cae:	4637      	mov	r7, r6
 8008cb0:	e7e1      	b.n	8008c76 <_dtoa_r+0x93e>
 8008cb2:	9700      	str	r7, [sp, #0]
 8008cb4:	4637      	mov	r7, r6
 8008cb6:	e599      	b.n	80087ec <_dtoa_r+0x4b4>
 8008cb8:	40240000 	.word	0x40240000
 8008cbc:	9b08      	ldr	r3, [sp, #32]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 80ca 	beq.w	8008e58 <_dtoa_r+0xb20>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	9302      	str	r3, [sp, #8]
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	dd05      	ble.n	8008cd8 <_dtoa_r+0x9a0>
 8008ccc:	4639      	mov	r1, r7
 8008cce:	462a      	mov	r2, r5
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fb4b 	bl	800936c <__lshift>
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	d05b      	beq.n	8008d96 <_dtoa_r+0xa5e>
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 f931 	bl	8008f48 <_Balloc>
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	b928      	cbnz	r0, 8008cf6 <_dtoa_r+0x9be>
 8008cea:	4b87      	ldr	r3, [pc, #540]	; (8008f08 <_dtoa_r+0xbd0>)
 8008cec:	4602      	mov	r2, r0
 8008cee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cf2:	f7ff bb3b 	b.w	800836c <_dtoa_r+0x34>
 8008cf6:	693a      	ldr	r2, [r7, #16]
 8008cf8:	3202      	adds	r2, #2
 8008cfa:	0092      	lsls	r2, r2, #2
 8008cfc:	f107 010c 	add.w	r1, r7, #12
 8008d00:	300c      	adds	r0, #12
 8008d02:	f000 f913 	bl	8008f2c <memcpy>
 8008d06:	2201      	movs	r2, #1
 8008d08:	4629      	mov	r1, r5
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 fb2e 	bl	800936c <__lshift>
 8008d10:	9b01      	ldr	r3, [sp, #4]
 8008d12:	f103 0901 	add.w	r9, r3, #1
 8008d16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	9305      	str	r3, [sp, #20]
 8008d1e:	f00a 0301 	and.w	r3, sl, #1
 8008d22:	46b8      	mov	r8, r7
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	4607      	mov	r7, r0
 8008d28:	4631      	mov	r1, r6
 8008d2a:	ee18 0a10 	vmov	r0, s16
 8008d2e:	f7ff fa75 	bl	800821c <quorem>
 8008d32:	4641      	mov	r1, r8
 8008d34:	9002      	str	r0, [sp, #8]
 8008d36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d3a:	ee18 0a10 	vmov	r0, s16
 8008d3e:	f000 fb85 	bl	800944c <__mcmp>
 8008d42:	463a      	mov	r2, r7
 8008d44:	9003      	str	r0, [sp, #12]
 8008d46:	4631      	mov	r1, r6
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fb9b 	bl	8009484 <__mdiff>
 8008d4e:	68c2      	ldr	r2, [r0, #12]
 8008d50:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d54:	4605      	mov	r5, r0
 8008d56:	bb02      	cbnz	r2, 8008d9a <_dtoa_r+0xa62>
 8008d58:	4601      	mov	r1, r0
 8008d5a:	ee18 0a10 	vmov	r0, s16
 8008d5e:	f000 fb75 	bl	800944c <__mcmp>
 8008d62:	4602      	mov	r2, r0
 8008d64:	4629      	mov	r1, r5
 8008d66:	4620      	mov	r0, r4
 8008d68:	9207      	str	r2, [sp, #28]
 8008d6a:	f000 f92d 	bl	8008fc8 <_Bfree>
 8008d6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d72:	ea43 0102 	orr.w	r1, r3, r2
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	430b      	orrs	r3, r1
 8008d7a:	464d      	mov	r5, r9
 8008d7c:	d10f      	bne.n	8008d9e <_dtoa_r+0xa66>
 8008d7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d82:	d02a      	beq.n	8008dda <_dtoa_r+0xaa2>
 8008d84:	9b03      	ldr	r3, [sp, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	dd02      	ble.n	8008d90 <_dtoa_r+0xa58>
 8008d8a:	9b02      	ldr	r3, [sp, #8]
 8008d8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d90:	f88b a000 	strb.w	sl, [fp]
 8008d94:	e775      	b.n	8008c82 <_dtoa_r+0x94a>
 8008d96:	4638      	mov	r0, r7
 8008d98:	e7ba      	b.n	8008d10 <_dtoa_r+0x9d8>
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	e7e2      	b.n	8008d64 <_dtoa_r+0xa2c>
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	db04      	blt.n	8008dae <_dtoa_r+0xa76>
 8008da4:	9906      	ldr	r1, [sp, #24]
 8008da6:	430b      	orrs	r3, r1
 8008da8:	9904      	ldr	r1, [sp, #16]
 8008daa:	430b      	orrs	r3, r1
 8008dac:	d122      	bne.n	8008df4 <_dtoa_r+0xabc>
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	ddee      	ble.n	8008d90 <_dtoa_r+0xa58>
 8008db2:	ee18 1a10 	vmov	r1, s16
 8008db6:	2201      	movs	r2, #1
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fad7 	bl	800936c <__lshift>
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	ee08 0a10 	vmov	s16, r0
 8008dc4:	f000 fb42 	bl	800944c <__mcmp>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	dc03      	bgt.n	8008dd4 <_dtoa_r+0xa9c>
 8008dcc:	d1e0      	bne.n	8008d90 <_dtoa_r+0xa58>
 8008dce:	f01a 0f01 	tst.w	sl, #1
 8008dd2:	d0dd      	beq.n	8008d90 <_dtoa_r+0xa58>
 8008dd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dd8:	d1d7      	bne.n	8008d8a <_dtoa_r+0xa52>
 8008dda:	2339      	movs	r3, #57	; 0x39
 8008ddc:	f88b 3000 	strb.w	r3, [fp]
 8008de0:	462b      	mov	r3, r5
 8008de2:	461d      	mov	r5, r3
 8008de4:	3b01      	subs	r3, #1
 8008de6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dea:	2a39      	cmp	r2, #57	; 0x39
 8008dec:	d071      	beq.n	8008ed2 <_dtoa_r+0xb9a>
 8008dee:	3201      	adds	r2, #1
 8008df0:	701a      	strb	r2, [r3, #0]
 8008df2:	e746      	b.n	8008c82 <_dtoa_r+0x94a>
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	dd07      	ble.n	8008e08 <_dtoa_r+0xad0>
 8008df8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dfc:	d0ed      	beq.n	8008dda <_dtoa_r+0xaa2>
 8008dfe:	f10a 0301 	add.w	r3, sl, #1
 8008e02:	f88b 3000 	strb.w	r3, [fp]
 8008e06:	e73c      	b.n	8008c82 <_dtoa_r+0x94a>
 8008e08:	9b05      	ldr	r3, [sp, #20]
 8008e0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e0e:	4599      	cmp	r9, r3
 8008e10:	d047      	beq.n	8008ea2 <_dtoa_r+0xb6a>
 8008e12:	ee18 1a10 	vmov	r1, s16
 8008e16:	2300      	movs	r3, #0
 8008e18:	220a      	movs	r2, #10
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 f8f6 	bl	800900c <__multadd>
 8008e20:	45b8      	cmp	r8, r7
 8008e22:	ee08 0a10 	vmov	s16, r0
 8008e26:	f04f 0300 	mov.w	r3, #0
 8008e2a:	f04f 020a 	mov.w	r2, #10
 8008e2e:	4641      	mov	r1, r8
 8008e30:	4620      	mov	r0, r4
 8008e32:	d106      	bne.n	8008e42 <_dtoa_r+0xb0a>
 8008e34:	f000 f8ea 	bl	800900c <__multadd>
 8008e38:	4680      	mov	r8, r0
 8008e3a:	4607      	mov	r7, r0
 8008e3c:	f109 0901 	add.w	r9, r9, #1
 8008e40:	e772      	b.n	8008d28 <_dtoa_r+0x9f0>
 8008e42:	f000 f8e3 	bl	800900c <__multadd>
 8008e46:	4639      	mov	r1, r7
 8008e48:	4680      	mov	r8, r0
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	220a      	movs	r2, #10
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 f8dc 	bl	800900c <__multadd>
 8008e54:	4607      	mov	r7, r0
 8008e56:	e7f1      	b.n	8008e3c <_dtoa_r+0xb04>
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	9302      	str	r3, [sp, #8]
 8008e5c:	9d01      	ldr	r5, [sp, #4]
 8008e5e:	ee18 0a10 	vmov	r0, s16
 8008e62:	4631      	mov	r1, r6
 8008e64:	f7ff f9da 	bl	800821c <quorem>
 8008e68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e72:	1aea      	subs	r2, r5, r3
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	4293      	cmp	r3, r2
 8008e78:	dd09      	ble.n	8008e8e <_dtoa_r+0xb56>
 8008e7a:	ee18 1a10 	vmov	r1, s16
 8008e7e:	2300      	movs	r3, #0
 8008e80:	220a      	movs	r2, #10
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 f8c2 	bl	800900c <__multadd>
 8008e88:	ee08 0a10 	vmov	s16, r0
 8008e8c:	e7e7      	b.n	8008e5e <_dtoa_r+0xb26>
 8008e8e:	9b02      	ldr	r3, [sp, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bfc8      	it	gt
 8008e94:	461d      	movgt	r5, r3
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	bfd8      	it	le
 8008e9a:	2501      	movle	r5, #1
 8008e9c:	441d      	add	r5, r3
 8008e9e:	f04f 0800 	mov.w	r8, #0
 8008ea2:	ee18 1a10 	vmov	r1, s16
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 fa5f 	bl	800936c <__lshift>
 8008eae:	4631      	mov	r1, r6
 8008eb0:	ee08 0a10 	vmov	s16, r0
 8008eb4:	f000 faca 	bl	800944c <__mcmp>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	dc91      	bgt.n	8008de0 <_dtoa_r+0xaa8>
 8008ebc:	d102      	bne.n	8008ec4 <_dtoa_r+0xb8c>
 8008ebe:	f01a 0f01 	tst.w	sl, #1
 8008ec2:	d18d      	bne.n	8008de0 <_dtoa_r+0xaa8>
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	461d      	mov	r5, r3
 8008ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ecc:	2a30      	cmp	r2, #48	; 0x30
 8008ece:	d0fa      	beq.n	8008ec6 <_dtoa_r+0xb8e>
 8008ed0:	e6d7      	b.n	8008c82 <_dtoa_r+0x94a>
 8008ed2:	9a01      	ldr	r2, [sp, #4]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d184      	bne.n	8008de2 <_dtoa_r+0xaaa>
 8008ed8:	9b00      	ldr	r3, [sp, #0]
 8008eda:	3301      	adds	r3, #1
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	2331      	movs	r3, #49	; 0x31
 8008ee0:	7013      	strb	r3, [r2, #0]
 8008ee2:	e6ce      	b.n	8008c82 <_dtoa_r+0x94a>
 8008ee4:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <_dtoa_r+0xbd4>)
 8008ee6:	f7ff ba95 	b.w	8008414 <_dtoa_r+0xdc>
 8008eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f47f aa6e 	bne.w	80083ce <_dtoa_r+0x96>
 8008ef2:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <_dtoa_r+0xbd8>)
 8008ef4:	f7ff ba8e 	b.w	8008414 <_dtoa_r+0xdc>
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	dcae      	bgt.n	8008e5c <_dtoa_r+0xb24>
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	f73f aea8 	bgt.w	8008c56 <_dtoa_r+0x91e>
 8008f06:	e7a9      	b.n	8008e5c <_dtoa_r+0xb24>
 8008f08:	0800aa0b 	.word	0x0800aa0b
 8008f0c:	0800a968 	.word	0x0800a968
 8008f10:	0800a98c 	.word	0x0800a98c

08008f14 <_localeconv_r>:
 8008f14:	4800      	ldr	r0, [pc, #0]	; (8008f18 <_localeconv_r+0x4>)
 8008f16:	4770      	bx	lr
 8008f18:	20000360 	.word	0x20000360

08008f1c <malloc>:
 8008f1c:	4b02      	ldr	r3, [pc, #8]	; (8008f28 <malloc+0xc>)
 8008f1e:	4601      	mov	r1, r0
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	f000 bc17 	b.w	8009754 <_malloc_r>
 8008f26:	bf00      	nop
 8008f28:	2000020c 	.word	0x2000020c

08008f2c <memcpy>:
 8008f2c:	440a      	add	r2, r1
 8008f2e:	4291      	cmp	r1, r2
 8008f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f34:	d100      	bne.n	8008f38 <memcpy+0xc>
 8008f36:	4770      	bx	lr
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f42:	4291      	cmp	r1, r2
 8008f44:	d1f9      	bne.n	8008f3a <memcpy+0xe>
 8008f46:	bd10      	pop	{r4, pc}

08008f48 <_Balloc>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	460d      	mov	r5, r1
 8008f50:	b976      	cbnz	r6, 8008f70 <_Balloc+0x28>
 8008f52:	2010      	movs	r0, #16
 8008f54:	f7ff ffe2 	bl	8008f1c <malloc>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8008f5c:	b920      	cbnz	r0, 8008f68 <_Balloc+0x20>
 8008f5e:	4b18      	ldr	r3, [pc, #96]	; (8008fc0 <_Balloc+0x78>)
 8008f60:	4818      	ldr	r0, [pc, #96]	; (8008fc4 <_Balloc+0x7c>)
 8008f62:	2166      	movs	r1, #102	; 0x66
 8008f64:	f000 fdd6 	bl	8009b14 <__assert_func>
 8008f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f6c:	6006      	str	r6, [r0, #0]
 8008f6e:	60c6      	str	r6, [r0, #12]
 8008f70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f72:	68f3      	ldr	r3, [r6, #12]
 8008f74:	b183      	cbz	r3, 8008f98 <_Balloc+0x50>
 8008f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f7e:	b9b8      	cbnz	r0, 8008fb0 <_Balloc+0x68>
 8008f80:	2101      	movs	r1, #1
 8008f82:	fa01 f605 	lsl.w	r6, r1, r5
 8008f86:	1d72      	adds	r2, r6, #5
 8008f88:	0092      	lsls	r2, r2, #2
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fb60 	bl	8009650 <_calloc_r>
 8008f90:	b160      	cbz	r0, 8008fac <_Balloc+0x64>
 8008f92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f96:	e00e      	b.n	8008fb6 <_Balloc+0x6e>
 8008f98:	2221      	movs	r2, #33	; 0x21
 8008f9a:	2104      	movs	r1, #4
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f000 fb57 	bl	8009650 <_calloc_r>
 8008fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fa4:	60f0      	str	r0, [r6, #12]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e4      	bne.n	8008f76 <_Balloc+0x2e>
 8008fac:	2000      	movs	r0, #0
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	6802      	ldr	r2, [r0, #0]
 8008fb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fbc:	e7f7      	b.n	8008fae <_Balloc+0x66>
 8008fbe:	bf00      	nop
 8008fc0:	0800a999 	.word	0x0800a999
 8008fc4:	0800aa1c 	.word	0x0800aa1c

08008fc8 <_Bfree>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	b976      	cbnz	r6, 8008ff0 <_Bfree+0x28>
 8008fd2:	2010      	movs	r0, #16
 8008fd4:	f7ff ffa2 	bl	8008f1c <malloc>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6268      	str	r0, [r5, #36]	; 0x24
 8008fdc:	b920      	cbnz	r0, 8008fe8 <_Bfree+0x20>
 8008fde:	4b09      	ldr	r3, [pc, #36]	; (8009004 <_Bfree+0x3c>)
 8008fe0:	4809      	ldr	r0, [pc, #36]	; (8009008 <_Bfree+0x40>)
 8008fe2:	218a      	movs	r1, #138	; 0x8a
 8008fe4:	f000 fd96 	bl	8009b14 <__assert_func>
 8008fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fec:	6006      	str	r6, [r0, #0]
 8008fee:	60c6      	str	r6, [r0, #12]
 8008ff0:	b13c      	cbz	r4, 8009002 <_Bfree+0x3a>
 8008ff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ff4:	6862      	ldr	r2, [r4, #4]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ffc:	6021      	str	r1, [r4, #0]
 8008ffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	0800a999 	.word	0x0800a999
 8009008:	0800aa1c 	.word	0x0800aa1c

0800900c <__multadd>:
 800900c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009010:	690d      	ldr	r5, [r1, #16]
 8009012:	4607      	mov	r7, r0
 8009014:	460c      	mov	r4, r1
 8009016:	461e      	mov	r6, r3
 8009018:	f101 0c14 	add.w	ip, r1, #20
 800901c:	2000      	movs	r0, #0
 800901e:	f8dc 3000 	ldr.w	r3, [ip]
 8009022:	b299      	uxth	r1, r3
 8009024:	fb02 6101 	mla	r1, r2, r1, r6
 8009028:	0c1e      	lsrs	r6, r3, #16
 800902a:	0c0b      	lsrs	r3, r1, #16
 800902c:	fb02 3306 	mla	r3, r2, r6, r3
 8009030:	b289      	uxth	r1, r1
 8009032:	3001      	adds	r0, #1
 8009034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009038:	4285      	cmp	r5, r0
 800903a:	f84c 1b04 	str.w	r1, [ip], #4
 800903e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009042:	dcec      	bgt.n	800901e <__multadd+0x12>
 8009044:	b30e      	cbz	r6, 800908a <__multadd+0x7e>
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	42ab      	cmp	r3, r5
 800904a:	dc19      	bgt.n	8009080 <__multadd+0x74>
 800904c:	6861      	ldr	r1, [r4, #4]
 800904e:	4638      	mov	r0, r7
 8009050:	3101      	adds	r1, #1
 8009052:	f7ff ff79 	bl	8008f48 <_Balloc>
 8009056:	4680      	mov	r8, r0
 8009058:	b928      	cbnz	r0, 8009066 <__multadd+0x5a>
 800905a:	4602      	mov	r2, r0
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <__multadd+0x84>)
 800905e:	480d      	ldr	r0, [pc, #52]	; (8009094 <__multadd+0x88>)
 8009060:	21b5      	movs	r1, #181	; 0xb5
 8009062:	f000 fd57 	bl	8009b14 <__assert_func>
 8009066:	6922      	ldr	r2, [r4, #16]
 8009068:	3202      	adds	r2, #2
 800906a:	f104 010c 	add.w	r1, r4, #12
 800906e:	0092      	lsls	r2, r2, #2
 8009070:	300c      	adds	r0, #12
 8009072:	f7ff ff5b 	bl	8008f2c <memcpy>
 8009076:	4621      	mov	r1, r4
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff ffa5 	bl	8008fc8 <_Bfree>
 800907e:	4644      	mov	r4, r8
 8009080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009084:	3501      	adds	r5, #1
 8009086:	615e      	str	r6, [r3, #20]
 8009088:	6125      	str	r5, [r4, #16]
 800908a:	4620      	mov	r0, r4
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	0800aa0b 	.word	0x0800aa0b
 8009094:	0800aa1c 	.word	0x0800aa1c

08009098 <__hi0bits>:
 8009098:	0c03      	lsrs	r3, r0, #16
 800909a:	041b      	lsls	r3, r3, #16
 800909c:	b9d3      	cbnz	r3, 80090d4 <__hi0bits+0x3c>
 800909e:	0400      	lsls	r0, r0, #16
 80090a0:	2310      	movs	r3, #16
 80090a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090a6:	bf04      	itt	eq
 80090a8:	0200      	lsleq	r0, r0, #8
 80090aa:	3308      	addeq	r3, #8
 80090ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090b0:	bf04      	itt	eq
 80090b2:	0100      	lsleq	r0, r0, #4
 80090b4:	3304      	addeq	r3, #4
 80090b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090ba:	bf04      	itt	eq
 80090bc:	0080      	lsleq	r0, r0, #2
 80090be:	3302      	addeq	r3, #2
 80090c0:	2800      	cmp	r0, #0
 80090c2:	db05      	blt.n	80090d0 <__hi0bits+0x38>
 80090c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090c8:	f103 0301 	add.w	r3, r3, #1
 80090cc:	bf08      	it	eq
 80090ce:	2320      	moveq	r3, #32
 80090d0:	4618      	mov	r0, r3
 80090d2:	4770      	bx	lr
 80090d4:	2300      	movs	r3, #0
 80090d6:	e7e4      	b.n	80090a2 <__hi0bits+0xa>

080090d8 <__lo0bits>:
 80090d8:	6803      	ldr	r3, [r0, #0]
 80090da:	f013 0207 	ands.w	r2, r3, #7
 80090de:	4601      	mov	r1, r0
 80090e0:	d00b      	beq.n	80090fa <__lo0bits+0x22>
 80090e2:	07da      	lsls	r2, r3, #31
 80090e4:	d423      	bmi.n	800912e <__lo0bits+0x56>
 80090e6:	0798      	lsls	r0, r3, #30
 80090e8:	bf49      	itett	mi
 80090ea:	085b      	lsrmi	r3, r3, #1
 80090ec:	089b      	lsrpl	r3, r3, #2
 80090ee:	2001      	movmi	r0, #1
 80090f0:	600b      	strmi	r3, [r1, #0]
 80090f2:	bf5c      	itt	pl
 80090f4:	600b      	strpl	r3, [r1, #0]
 80090f6:	2002      	movpl	r0, #2
 80090f8:	4770      	bx	lr
 80090fa:	b298      	uxth	r0, r3
 80090fc:	b9a8      	cbnz	r0, 800912a <__lo0bits+0x52>
 80090fe:	0c1b      	lsrs	r3, r3, #16
 8009100:	2010      	movs	r0, #16
 8009102:	b2da      	uxtb	r2, r3
 8009104:	b90a      	cbnz	r2, 800910a <__lo0bits+0x32>
 8009106:	3008      	adds	r0, #8
 8009108:	0a1b      	lsrs	r3, r3, #8
 800910a:	071a      	lsls	r2, r3, #28
 800910c:	bf04      	itt	eq
 800910e:	091b      	lsreq	r3, r3, #4
 8009110:	3004      	addeq	r0, #4
 8009112:	079a      	lsls	r2, r3, #30
 8009114:	bf04      	itt	eq
 8009116:	089b      	lsreq	r3, r3, #2
 8009118:	3002      	addeq	r0, #2
 800911a:	07da      	lsls	r2, r3, #31
 800911c:	d403      	bmi.n	8009126 <__lo0bits+0x4e>
 800911e:	085b      	lsrs	r3, r3, #1
 8009120:	f100 0001 	add.w	r0, r0, #1
 8009124:	d005      	beq.n	8009132 <__lo0bits+0x5a>
 8009126:	600b      	str	r3, [r1, #0]
 8009128:	4770      	bx	lr
 800912a:	4610      	mov	r0, r2
 800912c:	e7e9      	b.n	8009102 <__lo0bits+0x2a>
 800912e:	2000      	movs	r0, #0
 8009130:	4770      	bx	lr
 8009132:	2020      	movs	r0, #32
 8009134:	4770      	bx	lr
	...

08009138 <__i2b>:
 8009138:	b510      	push	{r4, lr}
 800913a:	460c      	mov	r4, r1
 800913c:	2101      	movs	r1, #1
 800913e:	f7ff ff03 	bl	8008f48 <_Balloc>
 8009142:	4602      	mov	r2, r0
 8009144:	b928      	cbnz	r0, 8009152 <__i2b+0x1a>
 8009146:	4b05      	ldr	r3, [pc, #20]	; (800915c <__i2b+0x24>)
 8009148:	4805      	ldr	r0, [pc, #20]	; (8009160 <__i2b+0x28>)
 800914a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800914e:	f000 fce1 	bl	8009b14 <__assert_func>
 8009152:	2301      	movs	r3, #1
 8009154:	6144      	str	r4, [r0, #20]
 8009156:	6103      	str	r3, [r0, #16]
 8009158:	bd10      	pop	{r4, pc}
 800915a:	bf00      	nop
 800915c:	0800aa0b 	.word	0x0800aa0b
 8009160:	0800aa1c 	.word	0x0800aa1c

08009164 <__multiply>:
 8009164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009168:	4691      	mov	r9, r2
 800916a:	690a      	ldr	r2, [r1, #16]
 800916c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009170:	429a      	cmp	r2, r3
 8009172:	bfb8      	it	lt
 8009174:	460b      	movlt	r3, r1
 8009176:	460c      	mov	r4, r1
 8009178:	bfbc      	itt	lt
 800917a:	464c      	movlt	r4, r9
 800917c:	4699      	movlt	r9, r3
 800917e:	6927      	ldr	r7, [r4, #16]
 8009180:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009184:	68a3      	ldr	r3, [r4, #8]
 8009186:	6861      	ldr	r1, [r4, #4]
 8009188:	eb07 060a 	add.w	r6, r7, sl
 800918c:	42b3      	cmp	r3, r6
 800918e:	b085      	sub	sp, #20
 8009190:	bfb8      	it	lt
 8009192:	3101      	addlt	r1, #1
 8009194:	f7ff fed8 	bl	8008f48 <_Balloc>
 8009198:	b930      	cbnz	r0, 80091a8 <__multiply+0x44>
 800919a:	4602      	mov	r2, r0
 800919c:	4b44      	ldr	r3, [pc, #272]	; (80092b0 <__multiply+0x14c>)
 800919e:	4845      	ldr	r0, [pc, #276]	; (80092b4 <__multiply+0x150>)
 80091a0:	f240 115d 	movw	r1, #349	; 0x15d
 80091a4:	f000 fcb6 	bl	8009b14 <__assert_func>
 80091a8:	f100 0514 	add.w	r5, r0, #20
 80091ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091b0:	462b      	mov	r3, r5
 80091b2:	2200      	movs	r2, #0
 80091b4:	4543      	cmp	r3, r8
 80091b6:	d321      	bcc.n	80091fc <__multiply+0x98>
 80091b8:	f104 0314 	add.w	r3, r4, #20
 80091bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091c0:	f109 0314 	add.w	r3, r9, #20
 80091c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091c8:	9202      	str	r2, [sp, #8]
 80091ca:	1b3a      	subs	r2, r7, r4
 80091cc:	3a15      	subs	r2, #21
 80091ce:	f022 0203 	bic.w	r2, r2, #3
 80091d2:	3204      	adds	r2, #4
 80091d4:	f104 0115 	add.w	r1, r4, #21
 80091d8:	428f      	cmp	r7, r1
 80091da:	bf38      	it	cc
 80091dc:	2204      	movcc	r2, #4
 80091de:	9201      	str	r2, [sp, #4]
 80091e0:	9a02      	ldr	r2, [sp, #8]
 80091e2:	9303      	str	r3, [sp, #12]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d80c      	bhi.n	8009202 <__multiply+0x9e>
 80091e8:	2e00      	cmp	r6, #0
 80091ea:	dd03      	ble.n	80091f4 <__multiply+0x90>
 80091ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d05a      	beq.n	80092aa <__multiply+0x146>
 80091f4:	6106      	str	r6, [r0, #16]
 80091f6:	b005      	add	sp, #20
 80091f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fc:	f843 2b04 	str.w	r2, [r3], #4
 8009200:	e7d8      	b.n	80091b4 <__multiply+0x50>
 8009202:	f8b3 a000 	ldrh.w	sl, [r3]
 8009206:	f1ba 0f00 	cmp.w	sl, #0
 800920a:	d024      	beq.n	8009256 <__multiply+0xf2>
 800920c:	f104 0e14 	add.w	lr, r4, #20
 8009210:	46a9      	mov	r9, r5
 8009212:	f04f 0c00 	mov.w	ip, #0
 8009216:	f85e 2b04 	ldr.w	r2, [lr], #4
 800921a:	f8d9 1000 	ldr.w	r1, [r9]
 800921e:	fa1f fb82 	uxth.w	fp, r2
 8009222:	b289      	uxth	r1, r1
 8009224:	fb0a 110b 	mla	r1, sl, fp, r1
 8009228:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800922c:	f8d9 2000 	ldr.w	r2, [r9]
 8009230:	4461      	add	r1, ip
 8009232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009236:	fb0a c20b 	mla	r2, sl, fp, ip
 800923a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800923e:	b289      	uxth	r1, r1
 8009240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009244:	4577      	cmp	r7, lr
 8009246:	f849 1b04 	str.w	r1, [r9], #4
 800924a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800924e:	d8e2      	bhi.n	8009216 <__multiply+0xb2>
 8009250:	9a01      	ldr	r2, [sp, #4]
 8009252:	f845 c002 	str.w	ip, [r5, r2]
 8009256:	9a03      	ldr	r2, [sp, #12]
 8009258:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800925c:	3304      	adds	r3, #4
 800925e:	f1b9 0f00 	cmp.w	r9, #0
 8009262:	d020      	beq.n	80092a6 <__multiply+0x142>
 8009264:	6829      	ldr	r1, [r5, #0]
 8009266:	f104 0c14 	add.w	ip, r4, #20
 800926a:	46ae      	mov	lr, r5
 800926c:	f04f 0a00 	mov.w	sl, #0
 8009270:	f8bc b000 	ldrh.w	fp, [ip]
 8009274:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009278:	fb09 220b 	mla	r2, r9, fp, r2
 800927c:	4492      	add	sl, r2
 800927e:	b289      	uxth	r1, r1
 8009280:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009284:	f84e 1b04 	str.w	r1, [lr], #4
 8009288:	f85c 2b04 	ldr.w	r2, [ip], #4
 800928c:	f8be 1000 	ldrh.w	r1, [lr]
 8009290:	0c12      	lsrs	r2, r2, #16
 8009292:	fb09 1102 	mla	r1, r9, r2, r1
 8009296:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800929a:	4567      	cmp	r7, ip
 800929c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092a0:	d8e6      	bhi.n	8009270 <__multiply+0x10c>
 80092a2:	9a01      	ldr	r2, [sp, #4]
 80092a4:	50a9      	str	r1, [r5, r2]
 80092a6:	3504      	adds	r5, #4
 80092a8:	e79a      	b.n	80091e0 <__multiply+0x7c>
 80092aa:	3e01      	subs	r6, #1
 80092ac:	e79c      	b.n	80091e8 <__multiply+0x84>
 80092ae:	bf00      	nop
 80092b0:	0800aa0b 	.word	0x0800aa0b
 80092b4:	0800aa1c 	.word	0x0800aa1c

080092b8 <__pow5mult>:
 80092b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092bc:	4615      	mov	r5, r2
 80092be:	f012 0203 	ands.w	r2, r2, #3
 80092c2:	4606      	mov	r6, r0
 80092c4:	460f      	mov	r7, r1
 80092c6:	d007      	beq.n	80092d8 <__pow5mult+0x20>
 80092c8:	4c25      	ldr	r4, [pc, #148]	; (8009360 <__pow5mult+0xa8>)
 80092ca:	3a01      	subs	r2, #1
 80092cc:	2300      	movs	r3, #0
 80092ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092d2:	f7ff fe9b 	bl	800900c <__multadd>
 80092d6:	4607      	mov	r7, r0
 80092d8:	10ad      	asrs	r5, r5, #2
 80092da:	d03d      	beq.n	8009358 <__pow5mult+0xa0>
 80092dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092de:	b97c      	cbnz	r4, 8009300 <__pow5mult+0x48>
 80092e0:	2010      	movs	r0, #16
 80092e2:	f7ff fe1b 	bl	8008f1c <malloc>
 80092e6:	4602      	mov	r2, r0
 80092e8:	6270      	str	r0, [r6, #36]	; 0x24
 80092ea:	b928      	cbnz	r0, 80092f8 <__pow5mult+0x40>
 80092ec:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <__pow5mult+0xac>)
 80092ee:	481e      	ldr	r0, [pc, #120]	; (8009368 <__pow5mult+0xb0>)
 80092f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092f4:	f000 fc0e 	bl	8009b14 <__assert_func>
 80092f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092fc:	6004      	str	r4, [r0, #0]
 80092fe:	60c4      	str	r4, [r0, #12]
 8009300:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009308:	b94c      	cbnz	r4, 800931e <__pow5mult+0x66>
 800930a:	f240 2171 	movw	r1, #625	; 0x271
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ff12 	bl	8009138 <__i2b>
 8009314:	2300      	movs	r3, #0
 8009316:	f8c8 0008 	str.w	r0, [r8, #8]
 800931a:	4604      	mov	r4, r0
 800931c:	6003      	str	r3, [r0, #0]
 800931e:	f04f 0900 	mov.w	r9, #0
 8009322:	07eb      	lsls	r3, r5, #31
 8009324:	d50a      	bpl.n	800933c <__pow5mult+0x84>
 8009326:	4639      	mov	r1, r7
 8009328:	4622      	mov	r2, r4
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ff1a 	bl	8009164 <__multiply>
 8009330:	4639      	mov	r1, r7
 8009332:	4680      	mov	r8, r0
 8009334:	4630      	mov	r0, r6
 8009336:	f7ff fe47 	bl	8008fc8 <_Bfree>
 800933a:	4647      	mov	r7, r8
 800933c:	106d      	asrs	r5, r5, #1
 800933e:	d00b      	beq.n	8009358 <__pow5mult+0xa0>
 8009340:	6820      	ldr	r0, [r4, #0]
 8009342:	b938      	cbnz	r0, 8009354 <__pow5mult+0x9c>
 8009344:	4622      	mov	r2, r4
 8009346:	4621      	mov	r1, r4
 8009348:	4630      	mov	r0, r6
 800934a:	f7ff ff0b 	bl	8009164 <__multiply>
 800934e:	6020      	str	r0, [r4, #0]
 8009350:	f8c0 9000 	str.w	r9, [r0]
 8009354:	4604      	mov	r4, r0
 8009356:	e7e4      	b.n	8009322 <__pow5mult+0x6a>
 8009358:	4638      	mov	r0, r7
 800935a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800935e:	bf00      	nop
 8009360:	0800ab68 	.word	0x0800ab68
 8009364:	0800a999 	.word	0x0800a999
 8009368:	0800aa1c 	.word	0x0800aa1c

0800936c <__lshift>:
 800936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009370:	460c      	mov	r4, r1
 8009372:	6849      	ldr	r1, [r1, #4]
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	4607      	mov	r7, r0
 800937e:	4691      	mov	r9, r2
 8009380:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009384:	f108 0601 	add.w	r6, r8, #1
 8009388:	42b3      	cmp	r3, r6
 800938a:	db0b      	blt.n	80093a4 <__lshift+0x38>
 800938c:	4638      	mov	r0, r7
 800938e:	f7ff fddb 	bl	8008f48 <_Balloc>
 8009392:	4605      	mov	r5, r0
 8009394:	b948      	cbnz	r0, 80093aa <__lshift+0x3e>
 8009396:	4602      	mov	r2, r0
 8009398:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <__lshift+0xd8>)
 800939a:	482b      	ldr	r0, [pc, #172]	; (8009448 <__lshift+0xdc>)
 800939c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093a0:	f000 fbb8 	bl	8009b14 <__assert_func>
 80093a4:	3101      	adds	r1, #1
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	e7ee      	b.n	8009388 <__lshift+0x1c>
 80093aa:	2300      	movs	r3, #0
 80093ac:	f100 0114 	add.w	r1, r0, #20
 80093b0:	f100 0210 	add.w	r2, r0, #16
 80093b4:	4618      	mov	r0, r3
 80093b6:	4553      	cmp	r3, sl
 80093b8:	db37      	blt.n	800942a <__lshift+0xbe>
 80093ba:	6920      	ldr	r0, [r4, #16]
 80093bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093c0:	f104 0314 	add.w	r3, r4, #20
 80093c4:	f019 091f 	ands.w	r9, r9, #31
 80093c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093d0:	d02f      	beq.n	8009432 <__lshift+0xc6>
 80093d2:	f1c9 0e20 	rsb	lr, r9, #32
 80093d6:	468a      	mov	sl, r1
 80093d8:	f04f 0c00 	mov.w	ip, #0
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	fa02 f209 	lsl.w	r2, r2, r9
 80093e2:	ea42 020c 	orr.w	r2, r2, ip
 80093e6:	f84a 2b04 	str.w	r2, [sl], #4
 80093ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ee:	4298      	cmp	r0, r3
 80093f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80093f4:	d8f2      	bhi.n	80093dc <__lshift+0x70>
 80093f6:	1b03      	subs	r3, r0, r4
 80093f8:	3b15      	subs	r3, #21
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	3304      	adds	r3, #4
 8009400:	f104 0215 	add.w	r2, r4, #21
 8009404:	4290      	cmp	r0, r2
 8009406:	bf38      	it	cc
 8009408:	2304      	movcc	r3, #4
 800940a:	f841 c003 	str.w	ip, [r1, r3]
 800940e:	f1bc 0f00 	cmp.w	ip, #0
 8009412:	d001      	beq.n	8009418 <__lshift+0xac>
 8009414:	f108 0602 	add.w	r6, r8, #2
 8009418:	3e01      	subs	r6, #1
 800941a:	4638      	mov	r0, r7
 800941c:	612e      	str	r6, [r5, #16]
 800941e:	4621      	mov	r1, r4
 8009420:	f7ff fdd2 	bl	8008fc8 <_Bfree>
 8009424:	4628      	mov	r0, r5
 8009426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942a:	f842 0f04 	str.w	r0, [r2, #4]!
 800942e:	3301      	adds	r3, #1
 8009430:	e7c1      	b.n	80093b6 <__lshift+0x4a>
 8009432:	3904      	subs	r1, #4
 8009434:	f853 2b04 	ldr.w	r2, [r3], #4
 8009438:	f841 2f04 	str.w	r2, [r1, #4]!
 800943c:	4298      	cmp	r0, r3
 800943e:	d8f9      	bhi.n	8009434 <__lshift+0xc8>
 8009440:	e7ea      	b.n	8009418 <__lshift+0xac>
 8009442:	bf00      	nop
 8009444:	0800aa0b 	.word	0x0800aa0b
 8009448:	0800aa1c 	.word	0x0800aa1c

0800944c <__mcmp>:
 800944c:	b530      	push	{r4, r5, lr}
 800944e:	6902      	ldr	r2, [r0, #16]
 8009450:	690c      	ldr	r4, [r1, #16]
 8009452:	1b12      	subs	r2, r2, r4
 8009454:	d10e      	bne.n	8009474 <__mcmp+0x28>
 8009456:	f100 0314 	add.w	r3, r0, #20
 800945a:	3114      	adds	r1, #20
 800945c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009460:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009464:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009468:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800946c:	42a5      	cmp	r5, r4
 800946e:	d003      	beq.n	8009478 <__mcmp+0x2c>
 8009470:	d305      	bcc.n	800947e <__mcmp+0x32>
 8009472:	2201      	movs	r2, #1
 8009474:	4610      	mov	r0, r2
 8009476:	bd30      	pop	{r4, r5, pc}
 8009478:	4283      	cmp	r3, r0
 800947a:	d3f3      	bcc.n	8009464 <__mcmp+0x18>
 800947c:	e7fa      	b.n	8009474 <__mcmp+0x28>
 800947e:	f04f 32ff 	mov.w	r2, #4294967295
 8009482:	e7f7      	b.n	8009474 <__mcmp+0x28>

08009484 <__mdiff>:
 8009484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009488:	460c      	mov	r4, r1
 800948a:	4606      	mov	r6, r0
 800948c:	4611      	mov	r1, r2
 800948e:	4620      	mov	r0, r4
 8009490:	4690      	mov	r8, r2
 8009492:	f7ff ffdb 	bl	800944c <__mcmp>
 8009496:	1e05      	subs	r5, r0, #0
 8009498:	d110      	bne.n	80094bc <__mdiff+0x38>
 800949a:	4629      	mov	r1, r5
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff fd53 	bl	8008f48 <_Balloc>
 80094a2:	b930      	cbnz	r0, 80094b2 <__mdiff+0x2e>
 80094a4:	4b3a      	ldr	r3, [pc, #232]	; (8009590 <__mdiff+0x10c>)
 80094a6:	4602      	mov	r2, r0
 80094a8:	f240 2132 	movw	r1, #562	; 0x232
 80094ac:	4839      	ldr	r0, [pc, #228]	; (8009594 <__mdiff+0x110>)
 80094ae:	f000 fb31 	bl	8009b14 <__assert_func>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	bfa4      	itt	ge
 80094be:	4643      	movge	r3, r8
 80094c0:	46a0      	movge	r8, r4
 80094c2:	4630      	mov	r0, r6
 80094c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094c8:	bfa6      	itte	ge
 80094ca:	461c      	movge	r4, r3
 80094cc:	2500      	movge	r5, #0
 80094ce:	2501      	movlt	r5, #1
 80094d0:	f7ff fd3a 	bl	8008f48 <_Balloc>
 80094d4:	b920      	cbnz	r0, 80094e0 <__mdiff+0x5c>
 80094d6:	4b2e      	ldr	r3, [pc, #184]	; (8009590 <__mdiff+0x10c>)
 80094d8:	4602      	mov	r2, r0
 80094da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094de:	e7e5      	b.n	80094ac <__mdiff+0x28>
 80094e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094e4:	6926      	ldr	r6, [r4, #16]
 80094e6:	60c5      	str	r5, [r0, #12]
 80094e8:	f104 0914 	add.w	r9, r4, #20
 80094ec:	f108 0514 	add.w	r5, r8, #20
 80094f0:	f100 0e14 	add.w	lr, r0, #20
 80094f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094fc:	f108 0210 	add.w	r2, r8, #16
 8009500:	46f2      	mov	sl, lr
 8009502:	2100      	movs	r1, #0
 8009504:	f859 3b04 	ldr.w	r3, [r9], #4
 8009508:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800950c:	fa1f f883 	uxth.w	r8, r3
 8009510:	fa11 f18b 	uxtah	r1, r1, fp
 8009514:	0c1b      	lsrs	r3, r3, #16
 8009516:	eba1 0808 	sub.w	r8, r1, r8
 800951a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800951e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009522:	fa1f f888 	uxth.w	r8, r8
 8009526:	1419      	asrs	r1, r3, #16
 8009528:	454e      	cmp	r6, r9
 800952a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800952e:	f84a 3b04 	str.w	r3, [sl], #4
 8009532:	d8e7      	bhi.n	8009504 <__mdiff+0x80>
 8009534:	1b33      	subs	r3, r6, r4
 8009536:	3b15      	subs	r3, #21
 8009538:	f023 0303 	bic.w	r3, r3, #3
 800953c:	3304      	adds	r3, #4
 800953e:	3415      	adds	r4, #21
 8009540:	42a6      	cmp	r6, r4
 8009542:	bf38      	it	cc
 8009544:	2304      	movcc	r3, #4
 8009546:	441d      	add	r5, r3
 8009548:	4473      	add	r3, lr
 800954a:	469e      	mov	lr, r3
 800954c:	462e      	mov	r6, r5
 800954e:	4566      	cmp	r6, ip
 8009550:	d30e      	bcc.n	8009570 <__mdiff+0xec>
 8009552:	f10c 0203 	add.w	r2, ip, #3
 8009556:	1b52      	subs	r2, r2, r5
 8009558:	f022 0203 	bic.w	r2, r2, #3
 800955c:	3d03      	subs	r5, #3
 800955e:	45ac      	cmp	ip, r5
 8009560:	bf38      	it	cc
 8009562:	2200      	movcc	r2, #0
 8009564:	441a      	add	r2, r3
 8009566:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800956a:	b17b      	cbz	r3, 800958c <__mdiff+0x108>
 800956c:	6107      	str	r7, [r0, #16]
 800956e:	e7a3      	b.n	80094b8 <__mdiff+0x34>
 8009570:	f856 8b04 	ldr.w	r8, [r6], #4
 8009574:	fa11 f288 	uxtah	r2, r1, r8
 8009578:	1414      	asrs	r4, r2, #16
 800957a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800957e:	b292      	uxth	r2, r2
 8009580:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009584:	f84e 2b04 	str.w	r2, [lr], #4
 8009588:	1421      	asrs	r1, r4, #16
 800958a:	e7e0      	b.n	800954e <__mdiff+0xca>
 800958c:	3f01      	subs	r7, #1
 800958e:	e7ea      	b.n	8009566 <__mdiff+0xe2>
 8009590:	0800aa0b 	.word	0x0800aa0b
 8009594:	0800aa1c 	.word	0x0800aa1c

08009598 <__d2b>:
 8009598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800959c:	4689      	mov	r9, r1
 800959e:	2101      	movs	r1, #1
 80095a0:	ec57 6b10 	vmov	r6, r7, d0
 80095a4:	4690      	mov	r8, r2
 80095a6:	f7ff fccf 	bl	8008f48 <_Balloc>
 80095aa:	4604      	mov	r4, r0
 80095ac:	b930      	cbnz	r0, 80095bc <__d2b+0x24>
 80095ae:	4602      	mov	r2, r0
 80095b0:	4b25      	ldr	r3, [pc, #148]	; (8009648 <__d2b+0xb0>)
 80095b2:	4826      	ldr	r0, [pc, #152]	; (800964c <__d2b+0xb4>)
 80095b4:	f240 310a 	movw	r1, #778	; 0x30a
 80095b8:	f000 faac 	bl	8009b14 <__assert_func>
 80095bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80095c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095c4:	bb35      	cbnz	r5, 8009614 <__d2b+0x7c>
 80095c6:	2e00      	cmp	r6, #0
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	d028      	beq.n	800961e <__d2b+0x86>
 80095cc:	4668      	mov	r0, sp
 80095ce:	9600      	str	r6, [sp, #0]
 80095d0:	f7ff fd82 	bl	80090d8 <__lo0bits>
 80095d4:	9900      	ldr	r1, [sp, #0]
 80095d6:	b300      	cbz	r0, 800961a <__d2b+0x82>
 80095d8:	9a01      	ldr	r2, [sp, #4]
 80095da:	f1c0 0320 	rsb	r3, r0, #32
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	430b      	orrs	r3, r1
 80095e4:	40c2      	lsrs	r2, r0
 80095e6:	6163      	str	r3, [r4, #20]
 80095e8:	9201      	str	r2, [sp, #4]
 80095ea:	9b01      	ldr	r3, [sp, #4]
 80095ec:	61a3      	str	r3, [r4, #24]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bf14      	ite	ne
 80095f2:	2202      	movne	r2, #2
 80095f4:	2201      	moveq	r2, #1
 80095f6:	6122      	str	r2, [r4, #16]
 80095f8:	b1d5      	cbz	r5, 8009630 <__d2b+0x98>
 80095fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095fe:	4405      	add	r5, r0
 8009600:	f8c9 5000 	str.w	r5, [r9]
 8009604:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009608:	f8c8 0000 	str.w	r0, [r8]
 800960c:	4620      	mov	r0, r4
 800960e:	b003      	add	sp, #12
 8009610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009618:	e7d5      	b.n	80095c6 <__d2b+0x2e>
 800961a:	6161      	str	r1, [r4, #20]
 800961c:	e7e5      	b.n	80095ea <__d2b+0x52>
 800961e:	a801      	add	r0, sp, #4
 8009620:	f7ff fd5a 	bl	80090d8 <__lo0bits>
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	6163      	str	r3, [r4, #20]
 8009628:	2201      	movs	r2, #1
 800962a:	6122      	str	r2, [r4, #16]
 800962c:	3020      	adds	r0, #32
 800962e:	e7e3      	b.n	80095f8 <__d2b+0x60>
 8009630:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009634:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009638:	f8c9 0000 	str.w	r0, [r9]
 800963c:	6918      	ldr	r0, [r3, #16]
 800963e:	f7ff fd2b 	bl	8009098 <__hi0bits>
 8009642:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009646:	e7df      	b.n	8009608 <__d2b+0x70>
 8009648:	0800aa0b 	.word	0x0800aa0b
 800964c:	0800aa1c 	.word	0x0800aa1c

08009650 <_calloc_r>:
 8009650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009652:	fba1 2402 	umull	r2, r4, r1, r2
 8009656:	b94c      	cbnz	r4, 800966c <_calloc_r+0x1c>
 8009658:	4611      	mov	r1, r2
 800965a:	9201      	str	r2, [sp, #4]
 800965c:	f000 f87a 	bl	8009754 <_malloc_r>
 8009660:	9a01      	ldr	r2, [sp, #4]
 8009662:	4605      	mov	r5, r0
 8009664:	b930      	cbnz	r0, 8009674 <_calloc_r+0x24>
 8009666:	4628      	mov	r0, r5
 8009668:	b003      	add	sp, #12
 800966a:	bd30      	pop	{r4, r5, pc}
 800966c:	220c      	movs	r2, #12
 800966e:	6002      	str	r2, [r0, #0]
 8009670:	2500      	movs	r5, #0
 8009672:	e7f8      	b.n	8009666 <_calloc_r+0x16>
 8009674:	4621      	mov	r1, r4
 8009676:	f7fe f93f 	bl	80078f8 <memset>
 800967a:	e7f4      	b.n	8009666 <_calloc_r+0x16>

0800967c <_free_r>:
 800967c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800967e:	2900      	cmp	r1, #0
 8009680:	d044      	beq.n	800970c <_free_r+0x90>
 8009682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009686:	9001      	str	r0, [sp, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f1a1 0404 	sub.w	r4, r1, #4
 800968e:	bfb8      	it	lt
 8009690:	18e4      	addlt	r4, r4, r3
 8009692:	f000 fa9b 	bl	8009bcc <__malloc_lock>
 8009696:	4a1e      	ldr	r2, [pc, #120]	; (8009710 <_free_r+0x94>)
 8009698:	9801      	ldr	r0, [sp, #4]
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	b933      	cbnz	r3, 80096ac <_free_r+0x30>
 800969e:	6063      	str	r3, [r4, #4]
 80096a0:	6014      	str	r4, [r2, #0]
 80096a2:	b003      	add	sp, #12
 80096a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096a8:	f000 ba96 	b.w	8009bd8 <__malloc_unlock>
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	d908      	bls.n	80096c2 <_free_r+0x46>
 80096b0:	6825      	ldr	r5, [r4, #0]
 80096b2:	1961      	adds	r1, r4, r5
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf01      	itttt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	1949      	addeq	r1, r1, r5
 80096be:	6021      	streq	r1, [r4, #0]
 80096c0:	e7ed      	b.n	800969e <_free_r+0x22>
 80096c2:	461a      	mov	r2, r3
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	b10b      	cbz	r3, 80096cc <_free_r+0x50>
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d9fa      	bls.n	80096c2 <_free_r+0x46>
 80096cc:	6811      	ldr	r1, [r2, #0]
 80096ce:	1855      	adds	r5, r2, r1
 80096d0:	42a5      	cmp	r5, r4
 80096d2:	d10b      	bne.n	80096ec <_free_r+0x70>
 80096d4:	6824      	ldr	r4, [r4, #0]
 80096d6:	4421      	add	r1, r4
 80096d8:	1854      	adds	r4, r2, r1
 80096da:	42a3      	cmp	r3, r4
 80096dc:	6011      	str	r1, [r2, #0]
 80096de:	d1e0      	bne.n	80096a2 <_free_r+0x26>
 80096e0:	681c      	ldr	r4, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	6053      	str	r3, [r2, #4]
 80096e6:	4421      	add	r1, r4
 80096e8:	6011      	str	r1, [r2, #0]
 80096ea:	e7da      	b.n	80096a2 <_free_r+0x26>
 80096ec:	d902      	bls.n	80096f4 <_free_r+0x78>
 80096ee:	230c      	movs	r3, #12
 80096f0:	6003      	str	r3, [r0, #0]
 80096f2:	e7d6      	b.n	80096a2 <_free_r+0x26>
 80096f4:	6825      	ldr	r5, [r4, #0]
 80096f6:	1961      	adds	r1, r4, r5
 80096f8:	428b      	cmp	r3, r1
 80096fa:	bf04      	itt	eq
 80096fc:	6819      	ldreq	r1, [r3, #0]
 80096fe:	685b      	ldreq	r3, [r3, #4]
 8009700:	6063      	str	r3, [r4, #4]
 8009702:	bf04      	itt	eq
 8009704:	1949      	addeq	r1, r1, r5
 8009706:	6021      	streq	r1, [r4, #0]
 8009708:	6054      	str	r4, [r2, #4]
 800970a:	e7ca      	b.n	80096a2 <_free_r+0x26>
 800970c:	b003      	add	sp, #12
 800970e:	bd30      	pop	{r4, r5, pc}
 8009710:	20011dfc 	.word	0x20011dfc

08009714 <sbrk_aligned>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	4e0e      	ldr	r6, [pc, #56]	; (8009750 <sbrk_aligned+0x3c>)
 8009718:	460c      	mov	r4, r1
 800971a:	6831      	ldr	r1, [r6, #0]
 800971c:	4605      	mov	r5, r0
 800971e:	b911      	cbnz	r1, 8009726 <sbrk_aligned+0x12>
 8009720:	f000 f9e8 	bl	8009af4 <_sbrk_r>
 8009724:	6030      	str	r0, [r6, #0]
 8009726:	4621      	mov	r1, r4
 8009728:	4628      	mov	r0, r5
 800972a:	f000 f9e3 	bl	8009af4 <_sbrk_r>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	d00a      	beq.n	8009748 <sbrk_aligned+0x34>
 8009732:	1cc4      	adds	r4, r0, #3
 8009734:	f024 0403 	bic.w	r4, r4, #3
 8009738:	42a0      	cmp	r0, r4
 800973a:	d007      	beq.n	800974c <sbrk_aligned+0x38>
 800973c:	1a21      	subs	r1, r4, r0
 800973e:	4628      	mov	r0, r5
 8009740:	f000 f9d8 	bl	8009af4 <_sbrk_r>
 8009744:	3001      	adds	r0, #1
 8009746:	d101      	bne.n	800974c <sbrk_aligned+0x38>
 8009748:	f04f 34ff 	mov.w	r4, #4294967295
 800974c:	4620      	mov	r0, r4
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	20011e00 	.word	0x20011e00

08009754 <_malloc_r>:
 8009754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009758:	1ccd      	adds	r5, r1, #3
 800975a:	f025 0503 	bic.w	r5, r5, #3
 800975e:	3508      	adds	r5, #8
 8009760:	2d0c      	cmp	r5, #12
 8009762:	bf38      	it	cc
 8009764:	250c      	movcc	r5, #12
 8009766:	2d00      	cmp	r5, #0
 8009768:	4607      	mov	r7, r0
 800976a:	db01      	blt.n	8009770 <_malloc_r+0x1c>
 800976c:	42a9      	cmp	r1, r5
 800976e:	d905      	bls.n	800977c <_malloc_r+0x28>
 8009770:	230c      	movs	r3, #12
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	2600      	movs	r6, #0
 8009776:	4630      	mov	r0, r6
 8009778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977c:	4e2e      	ldr	r6, [pc, #184]	; (8009838 <_malloc_r+0xe4>)
 800977e:	f000 fa25 	bl	8009bcc <__malloc_lock>
 8009782:	6833      	ldr	r3, [r6, #0]
 8009784:	461c      	mov	r4, r3
 8009786:	bb34      	cbnz	r4, 80097d6 <_malloc_r+0x82>
 8009788:	4629      	mov	r1, r5
 800978a:	4638      	mov	r0, r7
 800978c:	f7ff ffc2 	bl	8009714 <sbrk_aligned>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	4604      	mov	r4, r0
 8009794:	d14d      	bne.n	8009832 <_malloc_r+0xde>
 8009796:	6834      	ldr	r4, [r6, #0]
 8009798:	4626      	mov	r6, r4
 800979a:	2e00      	cmp	r6, #0
 800979c:	d140      	bne.n	8009820 <_malloc_r+0xcc>
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	4631      	mov	r1, r6
 80097a2:	4638      	mov	r0, r7
 80097a4:	eb04 0803 	add.w	r8, r4, r3
 80097a8:	f000 f9a4 	bl	8009af4 <_sbrk_r>
 80097ac:	4580      	cmp	r8, r0
 80097ae:	d13a      	bne.n	8009826 <_malloc_r+0xd2>
 80097b0:	6821      	ldr	r1, [r4, #0]
 80097b2:	3503      	adds	r5, #3
 80097b4:	1a6d      	subs	r5, r5, r1
 80097b6:	f025 0503 	bic.w	r5, r5, #3
 80097ba:	3508      	adds	r5, #8
 80097bc:	2d0c      	cmp	r5, #12
 80097be:	bf38      	it	cc
 80097c0:	250c      	movcc	r5, #12
 80097c2:	4629      	mov	r1, r5
 80097c4:	4638      	mov	r0, r7
 80097c6:	f7ff ffa5 	bl	8009714 <sbrk_aligned>
 80097ca:	3001      	adds	r0, #1
 80097cc:	d02b      	beq.n	8009826 <_malloc_r+0xd2>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	442b      	add	r3, r5
 80097d2:	6023      	str	r3, [r4, #0]
 80097d4:	e00e      	b.n	80097f4 <_malloc_r+0xa0>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	1b52      	subs	r2, r2, r5
 80097da:	d41e      	bmi.n	800981a <_malloc_r+0xc6>
 80097dc:	2a0b      	cmp	r2, #11
 80097de:	d916      	bls.n	800980e <_malloc_r+0xba>
 80097e0:	1961      	adds	r1, r4, r5
 80097e2:	42a3      	cmp	r3, r4
 80097e4:	6025      	str	r5, [r4, #0]
 80097e6:	bf18      	it	ne
 80097e8:	6059      	strne	r1, [r3, #4]
 80097ea:	6863      	ldr	r3, [r4, #4]
 80097ec:	bf08      	it	eq
 80097ee:	6031      	streq	r1, [r6, #0]
 80097f0:	5162      	str	r2, [r4, r5]
 80097f2:	604b      	str	r3, [r1, #4]
 80097f4:	4638      	mov	r0, r7
 80097f6:	f104 060b 	add.w	r6, r4, #11
 80097fa:	f000 f9ed 	bl	8009bd8 <__malloc_unlock>
 80097fe:	f026 0607 	bic.w	r6, r6, #7
 8009802:	1d23      	adds	r3, r4, #4
 8009804:	1af2      	subs	r2, r6, r3
 8009806:	d0b6      	beq.n	8009776 <_malloc_r+0x22>
 8009808:	1b9b      	subs	r3, r3, r6
 800980a:	50a3      	str	r3, [r4, r2]
 800980c:	e7b3      	b.n	8009776 <_malloc_r+0x22>
 800980e:	6862      	ldr	r2, [r4, #4]
 8009810:	42a3      	cmp	r3, r4
 8009812:	bf0c      	ite	eq
 8009814:	6032      	streq	r2, [r6, #0]
 8009816:	605a      	strne	r2, [r3, #4]
 8009818:	e7ec      	b.n	80097f4 <_malloc_r+0xa0>
 800981a:	4623      	mov	r3, r4
 800981c:	6864      	ldr	r4, [r4, #4]
 800981e:	e7b2      	b.n	8009786 <_malloc_r+0x32>
 8009820:	4634      	mov	r4, r6
 8009822:	6876      	ldr	r6, [r6, #4]
 8009824:	e7b9      	b.n	800979a <_malloc_r+0x46>
 8009826:	230c      	movs	r3, #12
 8009828:	603b      	str	r3, [r7, #0]
 800982a:	4638      	mov	r0, r7
 800982c:	f000 f9d4 	bl	8009bd8 <__malloc_unlock>
 8009830:	e7a1      	b.n	8009776 <_malloc_r+0x22>
 8009832:	6025      	str	r5, [r4, #0]
 8009834:	e7de      	b.n	80097f4 <_malloc_r+0xa0>
 8009836:	bf00      	nop
 8009838:	20011dfc 	.word	0x20011dfc

0800983c <__ssputs_r>:
 800983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009840:	688e      	ldr	r6, [r1, #8]
 8009842:	429e      	cmp	r6, r3
 8009844:	4682      	mov	sl, r0
 8009846:	460c      	mov	r4, r1
 8009848:	4690      	mov	r8, r2
 800984a:	461f      	mov	r7, r3
 800984c:	d838      	bhi.n	80098c0 <__ssputs_r+0x84>
 800984e:	898a      	ldrh	r2, [r1, #12]
 8009850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009854:	d032      	beq.n	80098bc <__ssputs_r+0x80>
 8009856:	6825      	ldr	r5, [r4, #0]
 8009858:	6909      	ldr	r1, [r1, #16]
 800985a:	eba5 0901 	sub.w	r9, r5, r1
 800985e:	6965      	ldr	r5, [r4, #20]
 8009860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009868:	3301      	adds	r3, #1
 800986a:	444b      	add	r3, r9
 800986c:	106d      	asrs	r5, r5, #1
 800986e:	429d      	cmp	r5, r3
 8009870:	bf38      	it	cc
 8009872:	461d      	movcc	r5, r3
 8009874:	0553      	lsls	r3, r2, #21
 8009876:	d531      	bpl.n	80098dc <__ssputs_r+0xa0>
 8009878:	4629      	mov	r1, r5
 800987a:	f7ff ff6b 	bl	8009754 <_malloc_r>
 800987e:	4606      	mov	r6, r0
 8009880:	b950      	cbnz	r0, 8009898 <__ssputs_r+0x5c>
 8009882:	230c      	movs	r3, #12
 8009884:	f8ca 3000 	str.w	r3, [sl]
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988e:	81a3      	strh	r3, [r4, #12]
 8009890:	f04f 30ff 	mov.w	r0, #4294967295
 8009894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009898:	6921      	ldr	r1, [r4, #16]
 800989a:	464a      	mov	r2, r9
 800989c:	f7ff fb46 	bl	8008f2c <memcpy>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	6126      	str	r6, [r4, #16]
 80098ae:	6165      	str	r5, [r4, #20]
 80098b0:	444e      	add	r6, r9
 80098b2:	eba5 0509 	sub.w	r5, r5, r9
 80098b6:	6026      	str	r6, [r4, #0]
 80098b8:	60a5      	str	r5, [r4, #8]
 80098ba:	463e      	mov	r6, r7
 80098bc:	42be      	cmp	r6, r7
 80098be:	d900      	bls.n	80098c2 <__ssputs_r+0x86>
 80098c0:	463e      	mov	r6, r7
 80098c2:	6820      	ldr	r0, [r4, #0]
 80098c4:	4632      	mov	r2, r6
 80098c6:	4641      	mov	r1, r8
 80098c8:	f000 f966 	bl	8009b98 <memmove>
 80098cc:	68a3      	ldr	r3, [r4, #8]
 80098ce:	1b9b      	subs	r3, r3, r6
 80098d0:	60a3      	str	r3, [r4, #8]
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	4433      	add	r3, r6
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	2000      	movs	r0, #0
 80098da:	e7db      	b.n	8009894 <__ssputs_r+0x58>
 80098dc:	462a      	mov	r2, r5
 80098de:	f000 f981 	bl	8009be4 <_realloc_r>
 80098e2:	4606      	mov	r6, r0
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d1e1      	bne.n	80098ac <__ssputs_r+0x70>
 80098e8:	6921      	ldr	r1, [r4, #16]
 80098ea:	4650      	mov	r0, sl
 80098ec:	f7ff fec6 	bl	800967c <_free_r>
 80098f0:	e7c7      	b.n	8009882 <__ssputs_r+0x46>
	...

080098f4 <_svfiprintf_r>:
 80098f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	4698      	mov	r8, r3
 80098fa:	898b      	ldrh	r3, [r1, #12]
 80098fc:	061b      	lsls	r3, r3, #24
 80098fe:	b09d      	sub	sp, #116	; 0x74
 8009900:	4607      	mov	r7, r0
 8009902:	460d      	mov	r5, r1
 8009904:	4614      	mov	r4, r2
 8009906:	d50e      	bpl.n	8009926 <_svfiprintf_r+0x32>
 8009908:	690b      	ldr	r3, [r1, #16]
 800990a:	b963      	cbnz	r3, 8009926 <_svfiprintf_r+0x32>
 800990c:	2140      	movs	r1, #64	; 0x40
 800990e:	f7ff ff21 	bl	8009754 <_malloc_r>
 8009912:	6028      	str	r0, [r5, #0]
 8009914:	6128      	str	r0, [r5, #16]
 8009916:	b920      	cbnz	r0, 8009922 <_svfiprintf_r+0x2e>
 8009918:	230c      	movs	r3, #12
 800991a:	603b      	str	r3, [r7, #0]
 800991c:	f04f 30ff 	mov.w	r0, #4294967295
 8009920:	e0d1      	b.n	8009ac6 <_svfiprintf_r+0x1d2>
 8009922:	2340      	movs	r3, #64	; 0x40
 8009924:	616b      	str	r3, [r5, #20]
 8009926:	2300      	movs	r3, #0
 8009928:	9309      	str	r3, [sp, #36]	; 0x24
 800992a:	2320      	movs	r3, #32
 800992c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009930:	f8cd 800c 	str.w	r8, [sp, #12]
 8009934:	2330      	movs	r3, #48	; 0x30
 8009936:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ae0 <_svfiprintf_r+0x1ec>
 800993a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800993e:	f04f 0901 	mov.w	r9, #1
 8009942:	4623      	mov	r3, r4
 8009944:	469a      	mov	sl, r3
 8009946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800994a:	b10a      	cbz	r2, 8009950 <_svfiprintf_r+0x5c>
 800994c:	2a25      	cmp	r2, #37	; 0x25
 800994e:	d1f9      	bne.n	8009944 <_svfiprintf_r+0x50>
 8009950:	ebba 0b04 	subs.w	fp, sl, r4
 8009954:	d00b      	beq.n	800996e <_svfiprintf_r+0x7a>
 8009956:	465b      	mov	r3, fp
 8009958:	4622      	mov	r2, r4
 800995a:	4629      	mov	r1, r5
 800995c:	4638      	mov	r0, r7
 800995e:	f7ff ff6d 	bl	800983c <__ssputs_r>
 8009962:	3001      	adds	r0, #1
 8009964:	f000 80aa 	beq.w	8009abc <_svfiprintf_r+0x1c8>
 8009968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996a:	445a      	add	r2, fp
 800996c:	9209      	str	r2, [sp, #36]	; 0x24
 800996e:	f89a 3000 	ldrb.w	r3, [sl]
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 80a2 	beq.w	8009abc <_svfiprintf_r+0x1c8>
 8009978:	2300      	movs	r3, #0
 800997a:	f04f 32ff 	mov.w	r2, #4294967295
 800997e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009982:	f10a 0a01 	add.w	sl, sl, #1
 8009986:	9304      	str	r3, [sp, #16]
 8009988:	9307      	str	r3, [sp, #28]
 800998a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800998e:	931a      	str	r3, [sp, #104]	; 0x68
 8009990:	4654      	mov	r4, sl
 8009992:	2205      	movs	r2, #5
 8009994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009998:	4851      	ldr	r0, [pc, #324]	; (8009ae0 <_svfiprintf_r+0x1ec>)
 800999a:	f7f6 fc39 	bl	8000210 <memchr>
 800999e:	9a04      	ldr	r2, [sp, #16]
 80099a0:	b9d8      	cbnz	r0, 80099da <_svfiprintf_r+0xe6>
 80099a2:	06d0      	lsls	r0, r2, #27
 80099a4:	bf44      	itt	mi
 80099a6:	2320      	movmi	r3, #32
 80099a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ac:	0711      	lsls	r1, r2, #28
 80099ae:	bf44      	itt	mi
 80099b0:	232b      	movmi	r3, #43	; 0x2b
 80099b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b6:	f89a 3000 	ldrb.w	r3, [sl]
 80099ba:	2b2a      	cmp	r3, #42	; 0x2a
 80099bc:	d015      	beq.n	80099ea <_svfiprintf_r+0xf6>
 80099be:	9a07      	ldr	r2, [sp, #28]
 80099c0:	4654      	mov	r4, sl
 80099c2:	2000      	movs	r0, #0
 80099c4:	f04f 0c0a 	mov.w	ip, #10
 80099c8:	4621      	mov	r1, r4
 80099ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099ce:	3b30      	subs	r3, #48	; 0x30
 80099d0:	2b09      	cmp	r3, #9
 80099d2:	d94e      	bls.n	8009a72 <_svfiprintf_r+0x17e>
 80099d4:	b1b0      	cbz	r0, 8009a04 <_svfiprintf_r+0x110>
 80099d6:	9207      	str	r2, [sp, #28]
 80099d8:	e014      	b.n	8009a04 <_svfiprintf_r+0x110>
 80099da:	eba0 0308 	sub.w	r3, r0, r8
 80099de:	fa09 f303 	lsl.w	r3, r9, r3
 80099e2:	4313      	orrs	r3, r2
 80099e4:	9304      	str	r3, [sp, #16]
 80099e6:	46a2      	mov	sl, r4
 80099e8:	e7d2      	b.n	8009990 <_svfiprintf_r+0x9c>
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	1d19      	adds	r1, r3, #4
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	9103      	str	r1, [sp, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfbb      	ittet	lt
 80099f6:	425b      	neglt	r3, r3
 80099f8:	f042 0202 	orrlt.w	r2, r2, #2
 80099fc:	9307      	strge	r3, [sp, #28]
 80099fe:	9307      	strlt	r3, [sp, #28]
 8009a00:	bfb8      	it	lt
 8009a02:	9204      	strlt	r2, [sp, #16]
 8009a04:	7823      	ldrb	r3, [r4, #0]
 8009a06:	2b2e      	cmp	r3, #46	; 0x2e
 8009a08:	d10c      	bne.n	8009a24 <_svfiprintf_r+0x130>
 8009a0a:	7863      	ldrb	r3, [r4, #1]
 8009a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0e:	d135      	bne.n	8009a7c <_svfiprintf_r+0x188>
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	1d1a      	adds	r2, r3, #4
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	9203      	str	r2, [sp, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	bfb8      	it	lt
 8009a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a20:	3402      	adds	r4, #2
 8009a22:	9305      	str	r3, [sp, #20]
 8009a24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009af0 <_svfiprintf_r+0x1fc>
 8009a28:	7821      	ldrb	r1, [r4, #0]
 8009a2a:	2203      	movs	r2, #3
 8009a2c:	4650      	mov	r0, sl
 8009a2e:	f7f6 fbef 	bl	8000210 <memchr>
 8009a32:	b140      	cbz	r0, 8009a46 <_svfiprintf_r+0x152>
 8009a34:	2340      	movs	r3, #64	; 0x40
 8009a36:	eba0 000a 	sub.w	r0, r0, sl
 8009a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8009a3e:	9b04      	ldr	r3, [sp, #16]
 8009a40:	4303      	orrs	r3, r0
 8009a42:	3401      	adds	r4, #1
 8009a44:	9304      	str	r3, [sp, #16]
 8009a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4a:	4826      	ldr	r0, [pc, #152]	; (8009ae4 <_svfiprintf_r+0x1f0>)
 8009a4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a50:	2206      	movs	r2, #6
 8009a52:	f7f6 fbdd 	bl	8000210 <memchr>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d038      	beq.n	8009acc <_svfiprintf_r+0x1d8>
 8009a5a:	4b23      	ldr	r3, [pc, #140]	; (8009ae8 <_svfiprintf_r+0x1f4>)
 8009a5c:	bb1b      	cbnz	r3, 8009aa6 <_svfiprintf_r+0x1b2>
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	3307      	adds	r3, #7
 8009a62:	f023 0307 	bic.w	r3, r3, #7
 8009a66:	3308      	adds	r3, #8
 8009a68:	9303      	str	r3, [sp, #12]
 8009a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6c:	4433      	add	r3, r6
 8009a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a70:	e767      	b.n	8009942 <_svfiprintf_r+0x4e>
 8009a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a76:	460c      	mov	r4, r1
 8009a78:	2001      	movs	r0, #1
 8009a7a:	e7a5      	b.n	80099c8 <_svfiprintf_r+0xd4>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	3401      	adds	r4, #1
 8009a80:	9305      	str	r3, [sp, #20]
 8009a82:	4619      	mov	r1, r3
 8009a84:	f04f 0c0a 	mov.w	ip, #10
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a8e:	3a30      	subs	r2, #48	; 0x30
 8009a90:	2a09      	cmp	r2, #9
 8009a92:	d903      	bls.n	8009a9c <_svfiprintf_r+0x1a8>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0c5      	beq.n	8009a24 <_svfiprintf_r+0x130>
 8009a98:	9105      	str	r1, [sp, #20]
 8009a9a:	e7c3      	b.n	8009a24 <_svfiprintf_r+0x130>
 8009a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7f0      	b.n	8009a88 <_svfiprintf_r+0x194>
 8009aa6:	ab03      	add	r3, sp, #12
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	462a      	mov	r2, r5
 8009aac:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <_svfiprintf_r+0x1f8>)
 8009aae:	a904      	add	r1, sp, #16
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7fd ffc9 	bl	8007a48 <_printf_float>
 8009ab6:	1c42      	adds	r2, r0, #1
 8009ab8:	4606      	mov	r6, r0
 8009aba:	d1d6      	bne.n	8009a6a <_svfiprintf_r+0x176>
 8009abc:	89ab      	ldrh	r3, [r5, #12]
 8009abe:	065b      	lsls	r3, r3, #25
 8009ac0:	f53f af2c 	bmi.w	800991c <_svfiprintf_r+0x28>
 8009ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ac6:	b01d      	add	sp, #116	; 0x74
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	ab03      	add	r3, sp, #12
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	4b06      	ldr	r3, [pc, #24]	; (8009aec <_svfiprintf_r+0x1f8>)
 8009ad4:	a904      	add	r1, sp, #16
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	f7fe fa5a 	bl	8007f90 <_printf_i>
 8009adc:	e7eb      	b.n	8009ab6 <_svfiprintf_r+0x1c2>
 8009ade:	bf00      	nop
 8009ae0:	0800ab74 	.word	0x0800ab74
 8009ae4:	0800ab7e 	.word	0x0800ab7e
 8009ae8:	08007a49 	.word	0x08007a49
 8009aec:	0800983d 	.word	0x0800983d
 8009af0:	0800ab7a 	.word	0x0800ab7a

08009af4 <_sbrk_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d06      	ldr	r5, [pc, #24]	; (8009b10 <_sbrk_r+0x1c>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	f7f9 f952 	bl	8002da8 <_sbrk>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_sbrk_r+0x1a>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_sbrk_r+0x1a>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20011e04 	.word	0x20011e04

08009b14 <__assert_func>:
 8009b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b16:	4614      	mov	r4, r2
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <__assert_func+0x2c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4605      	mov	r5, r0
 8009b20:	68d8      	ldr	r0, [r3, #12]
 8009b22:	b14c      	cbz	r4, 8009b38 <__assert_func+0x24>
 8009b24:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <__assert_func+0x30>)
 8009b26:	9100      	str	r1, [sp, #0]
 8009b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b2c:	4906      	ldr	r1, [pc, #24]	; (8009b48 <__assert_func+0x34>)
 8009b2e:	462b      	mov	r3, r5
 8009b30:	f000 f80e 	bl	8009b50 <fiprintf>
 8009b34:	f000 faac 	bl	800a090 <abort>
 8009b38:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <__assert_func+0x38>)
 8009b3a:	461c      	mov	r4, r3
 8009b3c:	e7f3      	b.n	8009b26 <__assert_func+0x12>
 8009b3e:	bf00      	nop
 8009b40:	2000020c 	.word	0x2000020c
 8009b44:	0800ab85 	.word	0x0800ab85
 8009b48:	0800ab92 	.word	0x0800ab92
 8009b4c:	0800abc0 	.word	0x0800abc0

08009b50 <fiprintf>:
 8009b50:	b40e      	push	{r1, r2, r3}
 8009b52:	b503      	push	{r0, r1, lr}
 8009b54:	4601      	mov	r1, r0
 8009b56:	ab03      	add	r3, sp, #12
 8009b58:	4805      	ldr	r0, [pc, #20]	; (8009b70 <fiprintf+0x20>)
 8009b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5e:	6800      	ldr	r0, [r0, #0]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	f000 f897 	bl	8009c94 <_vfiprintf_r>
 8009b66:	b002      	add	sp, #8
 8009b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b6c:	b003      	add	sp, #12
 8009b6e:	4770      	bx	lr
 8009b70:	2000020c 	.word	0x2000020c

08009b74 <__ascii_mbtowc>:
 8009b74:	b082      	sub	sp, #8
 8009b76:	b901      	cbnz	r1, 8009b7a <__ascii_mbtowc+0x6>
 8009b78:	a901      	add	r1, sp, #4
 8009b7a:	b142      	cbz	r2, 8009b8e <__ascii_mbtowc+0x1a>
 8009b7c:	b14b      	cbz	r3, 8009b92 <__ascii_mbtowc+0x1e>
 8009b7e:	7813      	ldrb	r3, [r2, #0]
 8009b80:	600b      	str	r3, [r1, #0]
 8009b82:	7812      	ldrb	r2, [r2, #0]
 8009b84:	1e10      	subs	r0, r2, #0
 8009b86:	bf18      	it	ne
 8009b88:	2001      	movne	r0, #1
 8009b8a:	b002      	add	sp, #8
 8009b8c:	4770      	bx	lr
 8009b8e:	4610      	mov	r0, r2
 8009b90:	e7fb      	b.n	8009b8a <__ascii_mbtowc+0x16>
 8009b92:	f06f 0001 	mvn.w	r0, #1
 8009b96:	e7f8      	b.n	8009b8a <__ascii_mbtowc+0x16>

08009b98 <memmove>:
 8009b98:	4288      	cmp	r0, r1
 8009b9a:	b510      	push	{r4, lr}
 8009b9c:	eb01 0402 	add.w	r4, r1, r2
 8009ba0:	d902      	bls.n	8009ba8 <memmove+0x10>
 8009ba2:	4284      	cmp	r4, r0
 8009ba4:	4623      	mov	r3, r4
 8009ba6:	d807      	bhi.n	8009bb8 <memmove+0x20>
 8009ba8:	1e43      	subs	r3, r0, #1
 8009baa:	42a1      	cmp	r1, r4
 8009bac:	d008      	beq.n	8009bc0 <memmove+0x28>
 8009bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bb6:	e7f8      	b.n	8009baa <memmove+0x12>
 8009bb8:	4402      	add	r2, r0
 8009bba:	4601      	mov	r1, r0
 8009bbc:	428a      	cmp	r2, r1
 8009bbe:	d100      	bne.n	8009bc2 <memmove+0x2a>
 8009bc0:	bd10      	pop	{r4, pc}
 8009bc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bca:	e7f7      	b.n	8009bbc <memmove+0x24>

08009bcc <__malloc_lock>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	; (8009bd4 <__malloc_lock+0x8>)
 8009bce:	f000 bc1f 	b.w	800a410 <__retarget_lock_acquire_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	20011e08 	.word	0x20011e08

08009bd8 <__malloc_unlock>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	; (8009be0 <__malloc_unlock+0x8>)
 8009bda:	f000 bc1a 	b.w	800a412 <__retarget_lock_release_recursive>
 8009bde:	bf00      	nop
 8009be0:	20011e08 	.word	0x20011e08

08009be4 <_realloc_r>:
 8009be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be8:	4680      	mov	r8, r0
 8009bea:	4614      	mov	r4, r2
 8009bec:	460e      	mov	r6, r1
 8009bee:	b921      	cbnz	r1, 8009bfa <_realloc_r+0x16>
 8009bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	f7ff bdad 	b.w	8009754 <_malloc_r>
 8009bfa:	b92a      	cbnz	r2, 8009c08 <_realloc_r+0x24>
 8009bfc:	f7ff fd3e 	bl	800967c <_free_r>
 8009c00:	4625      	mov	r5, r4
 8009c02:	4628      	mov	r0, r5
 8009c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c08:	f000 fc6a 	bl	800a4e0 <_malloc_usable_size_r>
 8009c0c:	4284      	cmp	r4, r0
 8009c0e:	4607      	mov	r7, r0
 8009c10:	d802      	bhi.n	8009c18 <_realloc_r+0x34>
 8009c12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c16:	d812      	bhi.n	8009c3e <_realloc_r+0x5a>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	f7ff fd9a 	bl	8009754 <_malloc_r>
 8009c20:	4605      	mov	r5, r0
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d0ed      	beq.n	8009c02 <_realloc_r+0x1e>
 8009c26:	42bc      	cmp	r4, r7
 8009c28:	4622      	mov	r2, r4
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	bf28      	it	cs
 8009c2e:	463a      	movcs	r2, r7
 8009c30:	f7ff f97c 	bl	8008f2c <memcpy>
 8009c34:	4631      	mov	r1, r6
 8009c36:	4640      	mov	r0, r8
 8009c38:	f7ff fd20 	bl	800967c <_free_r>
 8009c3c:	e7e1      	b.n	8009c02 <_realloc_r+0x1e>
 8009c3e:	4635      	mov	r5, r6
 8009c40:	e7df      	b.n	8009c02 <_realloc_r+0x1e>

08009c42 <__sfputc_r>:
 8009c42:	6893      	ldr	r3, [r2, #8]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	b410      	push	{r4}
 8009c4a:	6093      	str	r3, [r2, #8]
 8009c4c:	da08      	bge.n	8009c60 <__sfputc_r+0x1e>
 8009c4e:	6994      	ldr	r4, [r2, #24]
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	db01      	blt.n	8009c58 <__sfputc_r+0x16>
 8009c54:	290a      	cmp	r1, #10
 8009c56:	d103      	bne.n	8009c60 <__sfputc_r+0x1e>
 8009c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c5c:	f000 b94a 	b.w	8009ef4 <__swbuf_r>
 8009c60:	6813      	ldr	r3, [r2, #0]
 8009c62:	1c58      	adds	r0, r3, #1
 8009c64:	6010      	str	r0, [r2, #0]
 8009c66:	7019      	strb	r1, [r3, #0]
 8009c68:	4608      	mov	r0, r1
 8009c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <__sfputs_r>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	4606      	mov	r6, r0
 8009c74:	460f      	mov	r7, r1
 8009c76:	4614      	mov	r4, r2
 8009c78:	18d5      	adds	r5, r2, r3
 8009c7a:	42ac      	cmp	r4, r5
 8009c7c:	d101      	bne.n	8009c82 <__sfputs_r+0x12>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e007      	b.n	8009c92 <__sfputs_r+0x22>
 8009c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c86:	463a      	mov	r2, r7
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7ff ffda 	bl	8009c42 <__sfputc_r>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	d1f3      	bne.n	8009c7a <__sfputs_r+0xa>
 8009c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c94 <_vfiprintf_r>:
 8009c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	460d      	mov	r5, r1
 8009c9a:	b09d      	sub	sp, #116	; 0x74
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	4698      	mov	r8, r3
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	b118      	cbz	r0, 8009cac <_vfiprintf_r+0x18>
 8009ca4:	6983      	ldr	r3, [r0, #24]
 8009ca6:	b90b      	cbnz	r3, 8009cac <_vfiprintf_r+0x18>
 8009ca8:	f000 fb14 	bl	800a2d4 <__sinit>
 8009cac:	4b89      	ldr	r3, [pc, #548]	; (8009ed4 <_vfiprintf_r+0x240>)
 8009cae:	429d      	cmp	r5, r3
 8009cb0:	d11b      	bne.n	8009cea <_vfiprintf_r+0x56>
 8009cb2:	6875      	ldr	r5, [r6, #4]
 8009cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cb6:	07d9      	lsls	r1, r3, #31
 8009cb8:	d405      	bmi.n	8009cc6 <_vfiprintf_r+0x32>
 8009cba:	89ab      	ldrh	r3, [r5, #12]
 8009cbc:	059a      	lsls	r2, r3, #22
 8009cbe:	d402      	bmi.n	8009cc6 <_vfiprintf_r+0x32>
 8009cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc2:	f000 fba5 	bl	800a410 <__retarget_lock_acquire_recursive>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	071b      	lsls	r3, r3, #28
 8009cca:	d501      	bpl.n	8009cd0 <_vfiprintf_r+0x3c>
 8009ccc:	692b      	ldr	r3, [r5, #16]
 8009cce:	b9eb      	cbnz	r3, 8009d0c <_vfiprintf_r+0x78>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f000 f96e 	bl	8009fb4 <__swsetup_r>
 8009cd8:	b1c0      	cbz	r0, 8009d0c <_vfiprintf_r+0x78>
 8009cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cdc:	07dc      	lsls	r4, r3, #31
 8009cde:	d50e      	bpl.n	8009cfe <_vfiprintf_r+0x6a>
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	b01d      	add	sp, #116	; 0x74
 8009ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cea:	4b7b      	ldr	r3, [pc, #492]	; (8009ed8 <_vfiprintf_r+0x244>)
 8009cec:	429d      	cmp	r5, r3
 8009cee:	d101      	bne.n	8009cf4 <_vfiprintf_r+0x60>
 8009cf0:	68b5      	ldr	r5, [r6, #8]
 8009cf2:	e7df      	b.n	8009cb4 <_vfiprintf_r+0x20>
 8009cf4:	4b79      	ldr	r3, [pc, #484]	; (8009edc <_vfiprintf_r+0x248>)
 8009cf6:	429d      	cmp	r5, r3
 8009cf8:	bf08      	it	eq
 8009cfa:	68f5      	ldreq	r5, [r6, #12]
 8009cfc:	e7da      	b.n	8009cb4 <_vfiprintf_r+0x20>
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	0598      	lsls	r0, r3, #22
 8009d02:	d4ed      	bmi.n	8009ce0 <_vfiprintf_r+0x4c>
 8009d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d06:	f000 fb84 	bl	800a412 <__retarget_lock_release_recursive>
 8009d0a:	e7e9      	b.n	8009ce0 <_vfiprintf_r+0x4c>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d10:	2320      	movs	r3, #32
 8009d12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1a:	2330      	movs	r3, #48	; 0x30
 8009d1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ee0 <_vfiprintf_r+0x24c>
 8009d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d24:	f04f 0901 	mov.w	r9, #1
 8009d28:	4623      	mov	r3, r4
 8009d2a:	469a      	mov	sl, r3
 8009d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d30:	b10a      	cbz	r2, 8009d36 <_vfiprintf_r+0xa2>
 8009d32:	2a25      	cmp	r2, #37	; 0x25
 8009d34:	d1f9      	bne.n	8009d2a <_vfiprintf_r+0x96>
 8009d36:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3a:	d00b      	beq.n	8009d54 <_vfiprintf_r+0xc0>
 8009d3c:	465b      	mov	r3, fp
 8009d3e:	4622      	mov	r2, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff ff94 	bl	8009c70 <__sfputs_r>
 8009d48:	3001      	adds	r0, #1
 8009d4a:	f000 80aa 	beq.w	8009ea2 <_vfiprintf_r+0x20e>
 8009d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d50:	445a      	add	r2, fp
 8009d52:	9209      	str	r2, [sp, #36]	; 0x24
 8009d54:	f89a 3000 	ldrb.w	r3, [sl]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 80a2 	beq.w	8009ea2 <_vfiprintf_r+0x20e>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f04f 32ff 	mov.w	r2, #4294967295
 8009d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d68:	f10a 0a01 	add.w	sl, sl, #1
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	9307      	str	r3, [sp, #28]
 8009d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d74:	931a      	str	r3, [sp, #104]	; 0x68
 8009d76:	4654      	mov	r4, sl
 8009d78:	2205      	movs	r2, #5
 8009d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d7e:	4858      	ldr	r0, [pc, #352]	; (8009ee0 <_vfiprintf_r+0x24c>)
 8009d80:	f7f6 fa46 	bl	8000210 <memchr>
 8009d84:	9a04      	ldr	r2, [sp, #16]
 8009d86:	b9d8      	cbnz	r0, 8009dc0 <_vfiprintf_r+0x12c>
 8009d88:	06d1      	lsls	r1, r2, #27
 8009d8a:	bf44      	itt	mi
 8009d8c:	2320      	movmi	r3, #32
 8009d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d92:	0713      	lsls	r3, r2, #28
 8009d94:	bf44      	itt	mi
 8009d96:	232b      	movmi	r3, #43	; 0x2b
 8009d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009da0:	2b2a      	cmp	r3, #42	; 0x2a
 8009da2:	d015      	beq.n	8009dd0 <_vfiprintf_r+0x13c>
 8009da4:	9a07      	ldr	r2, [sp, #28]
 8009da6:	4654      	mov	r4, sl
 8009da8:	2000      	movs	r0, #0
 8009daa:	f04f 0c0a 	mov.w	ip, #10
 8009dae:	4621      	mov	r1, r4
 8009db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db4:	3b30      	subs	r3, #48	; 0x30
 8009db6:	2b09      	cmp	r3, #9
 8009db8:	d94e      	bls.n	8009e58 <_vfiprintf_r+0x1c4>
 8009dba:	b1b0      	cbz	r0, 8009dea <_vfiprintf_r+0x156>
 8009dbc:	9207      	str	r2, [sp, #28]
 8009dbe:	e014      	b.n	8009dea <_vfiprintf_r+0x156>
 8009dc0:	eba0 0308 	sub.w	r3, r0, r8
 8009dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	46a2      	mov	sl, r4
 8009dce:	e7d2      	b.n	8009d76 <_vfiprintf_r+0xe2>
 8009dd0:	9b03      	ldr	r3, [sp, #12]
 8009dd2:	1d19      	adds	r1, r3, #4
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	9103      	str	r1, [sp, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bfbb      	ittet	lt
 8009ddc:	425b      	neglt	r3, r3
 8009dde:	f042 0202 	orrlt.w	r2, r2, #2
 8009de2:	9307      	strge	r3, [sp, #28]
 8009de4:	9307      	strlt	r3, [sp, #28]
 8009de6:	bfb8      	it	lt
 8009de8:	9204      	strlt	r2, [sp, #16]
 8009dea:	7823      	ldrb	r3, [r4, #0]
 8009dec:	2b2e      	cmp	r3, #46	; 0x2e
 8009dee:	d10c      	bne.n	8009e0a <_vfiprintf_r+0x176>
 8009df0:	7863      	ldrb	r3, [r4, #1]
 8009df2:	2b2a      	cmp	r3, #42	; 0x2a
 8009df4:	d135      	bne.n	8009e62 <_vfiprintf_r+0x1ce>
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	1d1a      	adds	r2, r3, #4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	9203      	str	r2, [sp, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bfb8      	it	lt
 8009e02:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e06:	3402      	adds	r4, #2
 8009e08:	9305      	str	r3, [sp, #20]
 8009e0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ef0 <_vfiprintf_r+0x25c>
 8009e0e:	7821      	ldrb	r1, [r4, #0]
 8009e10:	2203      	movs	r2, #3
 8009e12:	4650      	mov	r0, sl
 8009e14:	f7f6 f9fc 	bl	8000210 <memchr>
 8009e18:	b140      	cbz	r0, 8009e2c <_vfiprintf_r+0x198>
 8009e1a:	2340      	movs	r3, #64	; 0x40
 8009e1c:	eba0 000a 	sub.w	r0, r0, sl
 8009e20:	fa03 f000 	lsl.w	r0, r3, r0
 8009e24:	9b04      	ldr	r3, [sp, #16]
 8009e26:	4303      	orrs	r3, r0
 8009e28:	3401      	adds	r4, #1
 8009e2a:	9304      	str	r3, [sp, #16]
 8009e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e30:	482c      	ldr	r0, [pc, #176]	; (8009ee4 <_vfiprintf_r+0x250>)
 8009e32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e36:	2206      	movs	r2, #6
 8009e38:	f7f6 f9ea 	bl	8000210 <memchr>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d03f      	beq.n	8009ec0 <_vfiprintf_r+0x22c>
 8009e40:	4b29      	ldr	r3, [pc, #164]	; (8009ee8 <_vfiprintf_r+0x254>)
 8009e42:	bb1b      	cbnz	r3, 8009e8c <_vfiprintf_r+0x1f8>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	3307      	adds	r3, #7
 8009e48:	f023 0307 	bic.w	r3, r3, #7
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e52:	443b      	add	r3, r7
 8009e54:	9309      	str	r3, [sp, #36]	; 0x24
 8009e56:	e767      	b.n	8009d28 <_vfiprintf_r+0x94>
 8009e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	2001      	movs	r0, #1
 8009e60:	e7a5      	b.n	8009dae <_vfiprintf_r+0x11a>
 8009e62:	2300      	movs	r3, #0
 8009e64:	3401      	adds	r4, #1
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e74:	3a30      	subs	r2, #48	; 0x30
 8009e76:	2a09      	cmp	r2, #9
 8009e78:	d903      	bls.n	8009e82 <_vfiprintf_r+0x1ee>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0c5      	beq.n	8009e0a <_vfiprintf_r+0x176>
 8009e7e:	9105      	str	r1, [sp, #20]
 8009e80:	e7c3      	b.n	8009e0a <_vfiprintf_r+0x176>
 8009e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e86:	4604      	mov	r4, r0
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e7f0      	b.n	8009e6e <_vfiprintf_r+0x1da>
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	462a      	mov	r2, r5
 8009e92:	4b16      	ldr	r3, [pc, #88]	; (8009eec <_vfiprintf_r+0x258>)
 8009e94:	a904      	add	r1, sp, #16
 8009e96:	4630      	mov	r0, r6
 8009e98:	f7fd fdd6 	bl	8007a48 <_printf_float>
 8009e9c:	4607      	mov	r7, r0
 8009e9e:	1c78      	adds	r0, r7, #1
 8009ea0:	d1d6      	bne.n	8009e50 <_vfiprintf_r+0x1bc>
 8009ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ea4:	07d9      	lsls	r1, r3, #31
 8009ea6:	d405      	bmi.n	8009eb4 <_vfiprintf_r+0x220>
 8009ea8:	89ab      	ldrh	r3, [r5, #12]
 8009eaa:	059a      	lsls	r2, r3, #22
 8009eac:	d402      	bmi.n	8009eb4 <_vfiprintf_r+0x220>
 8009eae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb0:	f000 faaf 	bl	800a412 <__retarget_lock_release_recursive>
 8009eb4:	89ab      	ldrh	r3, [r5, #12]
 8009eb6:	065b      	lsls	r3, r3, #25
 8009eb8:	f53f af12 	bmi.w	8009ce0 <_vfiprintf_r+0x4c>
 8009ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ebe:	e711      	b.n	8009ce4 <_vfiprintf_r+0x50>
 8009ec0:	ab03      	add	r3, sp, #12
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	4b09      	ldr	r3, [pc, #36]	; (8009eec <_vfiprintf_r+0x258>)
 8009ec8:	a904      	add	r1, sp, #16
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7fe f860 	bl	8007f90 <_printf_i>
 8009ed0:	e7e4      	b.n	8009e9c <_vfiprintf_r+0x208>
 8009ed2:	bf00      	nop
 8009ed4:	0800acec 	.word	0x0800acec
 8009ed8:	0800ad0c 	.word	0x0800ad0c
 8009edc:	0800accc 	.word	0x0800accc
 8009ee0:	0800ab74 	.word	0x0800ab74
 8009ee4:	0800ab7e 	.word	0x0800ab7e
 8009ee8:	08007a49 	.word	0x08007a49
 8009eec:	08009c71 	.word	0x08009c71
 8009ef0:	0800ab7a 	.word	0x0800ab7a

08009ef4 <__swbuf_r>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	460e      	mov	r6, r1
 8009ef8:	4614      	mov	r4, r2
 8009efa:	4605      	mov	r5, r0
 8009efc:	b118      	cbz	r0, 8009f06 <__swbuf_r+0x12>
 8009efe:	6983      	ldr	r3, [r0, #24]
 8009f00:	b90b      	cbnz	r3, 8009f06 <__swbuf_r+0x12>
 8009f02:	f000 f9e7 	bl	800a2d4 <__sinit>
 8009f06:	4b21      	ldr	r3, [pc, #132]	; (8009f8c <__swbuf_r+0x98>)
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d12b      	bne.n	8009f64 <__swbuf_r+0x70>
 8009f0c:	686c      	ldr	r4, [r5, #4]
 8009f0e:	69a3      	ldr	r3, [r4, #24]
 8009f10:	60a3      	str	r3, [r4, #8]
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	071a      	lsls	r2, r3, #28
 8009f16:	d52f      	bpl.n	8009f78 <__swbuf_r+0x84>
 8009f18:	6923      	ldr	r3, [r4, #16]
 8009f1a:	b36b      	cbz	r3, 8009f78 <__swbuf_r+0x84>
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	6820      	ldr	r0, [r4, #0]
 8009f20:	1ac0      	subs	r0, r0, r3
 8009f22:	6963      	ldr	r3, [r4, #20]
 8009f24:	b2f6      	uxtb	r6, r6
 8009f26:	4283      	cmp	r3, r0
 8009f28:	4637      	mov	r7, r6
 8009f2a:	dc04      	bgt.n	8009f36 <__swbuf_r+0x42>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f000 f93c 	bl	800a1ac <_fflush_r>
 8009f34:	bb30      	cbnz	r0, 8009f84 <__swbuf_r+0x90>
 8009f36:	68a3      	ldr	r3, [r4, #8]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	60a3      	str	r3, [r4, #8]
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	6022      	str	r2, [r4, #0]
 8009f42:	701e      	strb	r6, [r3, #0]
 8009f44:	6963      	ldr	r3, [r4, #20]
 8009f46:	3001      	adds	r0, #1
 8009f48:	4283      	cmp	r3, r0
 8009f4a:	d004      	beq.n	8009f56 <__swbuf_r+0x62>
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	07db      	lsls	r3, r3, #31
 8009f50:	d506      	bpl.n	8009f60 <__swbuf_r+0x6c>
 8009f52:	2e0a      	cmp	r6, #10
 8009f54:	d104      	bne.n	8009f60 <__swbuf_r+0x6c>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 f927 	bl	800a1ac <_fflush_r>
 8009f5e:	b988      	cbnz	r0, 8009f84 <__swbuf_r+0x90>
 8009f60:	4638      	mov	r0, r7
 8009f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f64:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <__swbuf_r+0x9c>)
 8009f66:	429c      	cmp	r4, r3
 8009f68:	d101      	bne.n	8009f6e <__swbuf_r+0x7a>
 8009f6a:	68ac      	ldr	r4, [r5, #8]
 8009f6c:	e7cf      	b.n	8009f0e <__swbuf_r+0x1a>
 8009f6e:	4b09      	ldr	r3, [pc, #36]	; (8009f94 <__swbuf_r+0xa0>)
 8009f70:	429c      	cmp	r4, r3
 8009f72:	bf08      	it	eq
 8009f74:	68ec      	ldreq	r4, [r5, #12]
 8009f76:	e7ca      	b.n	8009f0e <__swbuf_r+0x1a>
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f000 f81a 	bl	8009fb4 <__swsetup_r>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d0cb      	beq.n	8009f1c <__swbuf_r+0x28>
 8009f84:	f04f 37ff 	mov.w	r7, #4294967295
 8009f88:	e7ea      	b.n	8009f60 <__swbuf_r+0x6c>
 8009f8a:	bf00      	nop
 8009f8c:	0800acec 	.word	0x0800acec
 8009f90:	0800ad0c 	.word	0x0800ad0c
 8009f94:	0800accc 	.word	0x0800accc

08009f98 <__ascii_wctomb>:
 8009f98:	b149      	cbz	r1, 8009fae <__ascii_wctomb+0x16>
 8009f9a:	2aff      	cmp	r2, #255	; 0xff
 8009f9c:	bf85      	ittet	hi
 8009f9e:	238a      	movhi	r3, #138	; 0x8a
 8009fa0:	6003      	strhi	r3, [r0, #0]
 8009fa2:	700a      	strbls	r2, [r1, #0]
 8009fa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009fa8:	bf98      	it	ls
 8009faa:	2001      	movls	r0, #1
 8009fac:	4770      	bx	lr
 8009fae:	4608      	mov	r0, r1
 8009fb0:	4770      	bx	lr
	...

08009fb4 <__swsetup_r>:
 8009fb4:	4b32      	ldr	r3, [pc, #200]	; (800a080 <__swsetup_r+0xcc>)
 8009fb6:	b570      	push	{r4, r5, r6, lr}
 8009fb8:	681d      	ldr	r5, [r3, #0]
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	b125      	cbz	r5, 8009fca <__swsetup_r+0x16>
 8009fc0:	69ab      	ldr	r3, [r5, #24]
 8009fc2:	b913      	cbnz	r3, 8009fca <__swsetup_r+0x16>
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 f985 	bl	800a2d4 <__sinit>
 8009fca:	4b2e      	ldr	r3, [pc, #184]	; (800a084 <__swsetup_r+0xd0>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d10f      	bne.n	8009ff0 <__swsetup_r+0x3c>
 8009fd0:	686c      	ldr	r4, [r5, #4]
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd8:	0719      	lsls	r1, r3, #28
 8009fda:	d42c      	bmi.n	800a036 <__swsetup_r+0x82>
 8009fdc:	06dd      	lsls	r5, r3, #27
 8009fde:	d411      	bmi.n	800a004 <__swsetup_r+0x50>
 8009fe0:	2309      	movs	r3, #9
 8009fe2:	6033      	str	r3, [r6, #0]
 8009fe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	f04f 30ff 	mov.w	r0, #4294967295
 8009fee:	e03e      	b.n	800a06e <__swsetup_r+0xba>
 8009ff0:	4b25      	ldr	r3, [pc, #148]	; (800a088 <__swsetup_r+0xd4>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d101      	bne.n	8009ffa <__swsetup_r+0x46>
 8009ff6:	68ac      	ldr	r4, [r5, #8]
 8009ff8:	e7eb      	b.n	8009fd2 <__swsetup_r+0x1e>
 8009ffa:	4b24      	ldr	r3, [pc, #144]	; (800a08c <__swsetup_r+0xd8>)
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	bf08      	it	eq
 800a000:	68ec      	ldreq	r4, [r5, #12]
 800a002:	e7e6      	b.n	8009fd2 <__swsetup_r+0x1e>
 800a004:	0758      	lsls	r0, r3, #29
 800a006:	d512      	bpl.n	800a02e <__swsetup_r+0x7a>
 800a008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a00a:	b141      	cbz	r1, 800a01e <__swsetup_r+0x6a>
 800a00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a010:	4299      	cmp	r1, r3
 800a012:	d002      	beq.n	800a01a <__swsetup_r+0x66>
 800a014:	4630      	mov	r0, r6
 800a016:	f7ff fb31 	bl	800967c <_free_r>
 800a01a:	2300      	movs	r3, #0
 800a01c:	6363      	str	r3, [r4, #52]	; 0x34
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	2300      	movs	r3, #0
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f043 0308 	orr.w	r3, r3, #8
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	b94b      	cbnz	r3, 800a04e <__swsetup_r+0x9a>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a044:	d003      	beq.n	800a04e <__swsetup_r+0x9a>
 800a046:	4621      	mov	r1, r4
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 fa09 	bl	800a460 <__smakebuf_r>
 800a04e:	89a0      	ldrh	r0, [r4, #12]
 800a050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a054:	f010 0301 	ands.w	r3, r0, #1
 800a058:	d00a      	beq.n	800a070 <__swsetup_r+0xbc>
 800a05a:	2300      	movs	r3, #0
 800a05c:	60a3      	str	r3, [r4, #8]
 800a05e:	6963      	ldr	r3, [r4, #20]
 800a060:	425b      	negs	r3, r3
 800a062:	61a3      	str	r3, [r4, #24]
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	b943      	cbnz	r3, 800a07a <__swsetup_r+0xc6>
 800a068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a06c:	d1ba      	bne.n	8009fe4 <__swsetup_r+0x30>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	0781      	lsls	r1, r0, #30
 800a072:	bf58      	it	pl
 800a074:	6963      	ldrpl	r3, [r4, #20]
 800a076:	60a3      	str	r3, [r4, #8]
 800a078:	e7f4      	b.n	800a064 <__swsetup_r+0xb0>
 800a07a:	2000      	movs	r0, #0
 800a07c:	e7f7      	b.n	800a06e <__swsetup_r+0xba>
 800a07e:	bf00      	nop
 800a080:	2000020c 	.word	0x2000020c
 800a084:	0800acec 	.word	0x0800acec
 800a088:	0800ad0c 	.word	0x0800ad0c
 800a08c:	0800accc 	.word	0x0800accc

0800a090 <abort>:
 800a090:	b508      	push	{r3, lr}
 800a092:	2006      	movs	r0, #6
 800a094:	f000 fa54 	bl	800a540 <raise>
 800a098:	2001      	movs	r0, #1
 800a09a:	f7f8 fe0d 	bl	8002cb8 <_exit>
	...

0800a0a0 <__sflush_r>:
 800a0a0:	898a      	ldrh	r2, [r1, #12]
 800a0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	0710      	lsls	r0, r2, #28
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	d458      	bmi.n	800a160 <__sflush_r+0xc0>
 800a0ae:	684b      	ldr	r3, [r1, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dc05      	bgt.n	800a0c0 <__sflush_r+0x20>
 800a0b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	dc02      	bgt.n	800a0c0 <__sflush_r+0x20>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0c2:	2e00      	cmp	r6, #0
 800a0c4:	d0f9      	beq.n	800a0ba <__sflush_r+0x1a>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0cc:	682f      	ldr	r7, [r5, #0]
 800a0ce:	602b      	str	r3, [r5, #0]
 800a0d0:	d032      	beq.n	800a138 <__sflush_r+0x98>
 800a0d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	075a      	lsls	r2, r3, #29
 800a0d8:	d505      	bpl.n	800a0e6 <__sflush_r+0x46>
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	1ac0      	subs	r0, r0, r3
 800a0de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0e0:	b10b      	cbz	r3, 800a0e6 <__sflush_r+0x46>
 800a0e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0e4:	1ac0      	subs	r0, r0, r3
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0ec:	6a21      	ldr	r1, [r4, #32]
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	47b0      	blx	r6
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	d106      	bne.n	800a106 <__sflush_r+0x66>
 800a0f8:	6829      	ldr	r1, [r5, #0]
 800a0fa:	291d      	cmp	r1, #29
 800a0fc:	d82c      	bhi.n	800a158 <__sflush_r+0xb8>
 800a0fe:	4a2a      	ldr	r2, [pc, #168]	; (800a1a8 <__sflush_r+0x108>)
 800a100:	40ca      	lsrs	r2, r1
 800a102:	07d6      	lsls	r6, r2, #31
 800a104:	d528      	bpl.n	800a158 <__sflush_r+0xb8>
 800a106:	2200      	movs	r2, #0
 800a108:	6062      	str	r2, [r4, #4]
 800a10a:	04d9      	lsls	r1, r3, #19
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	6022      	str	r2, [r4, #0]
 800a110:	d504      	bpl.n	800a11c <__sflush_r+0x7c>
 800a112:	1c42      	adds	r2, r0, #1
 800a114:	d101      	bne.n	800a11a <__sflush_r+0x7a>
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	b903      	cbnz	r3, 800a11c <__sflush_r+0x7c>
 800a11a:	6560      	str	r0, [r4, #84]	; 0x54
 800a11c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a11e:	602f      	str	r7, [r5, #0]
 800a120:	2900      	cmp	r1, #0
 800a122:	d0ca      	beq.n	800a0ba <__sflush_r+0x1a>
 800a124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a128:	4299      	cmp	r1, r3
 800a12a:	d002      	beq.n	800a132 <__sflush_r+0x92>
 800a12c:	4628      	mov	r0, r5
 800a12e:	f7ff faa5 	bl	800967c <_free_r>
 800a132:	2000      	movs	r0, #0
 800a134:	6360      	str	r0, [r4, #52]	; 0x34
 800a136:	e7c1      	b.n	800a0bc <__sflush_r+0x1c>
 800a138:	6a21      	ldr	r1, [r4, #32]
 800a13a:	2301      	movs	r3, #1
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b0      	blx	r6
 800a140:	1c41      	adds	r1, r0, #1
 800a142:	d1c7      	bne.n	800a0d4 <__sflush_r+0x34>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0c4      	beq.n	800a0d4 <__sflush_r+0x34>
 800a14a:	2b1d      	cmp	r3, #29
 800a14c:	d001      	beq.n	800a152 <__sflush_r+0xb2>
 800a14e:	2b16      	cmp	r3, #22
 800a150:	d101      	bne.n	800a156 <__sflush_r+0xb6>
 800a152:	602f      	str	r7, [r5, #0]
 800a154:	e7b1      	b.n	800a0ba <__sflush_r+0x1a>
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15c:	81a3      	strh	r3, [r4, #12]
 800a15e:	e7ad      	b.n	800a0bc <__sflush_r+0x1c>
 800a160:	690f      	ldr	r7, [r1, #16]
 800a162:	2f00      	cmp	r7, #0
 800a164:	d0a9      	beq.n	800a0ba <__sflush_r+0x1a>
 800a166:	0793      	lsls	r3, r2, #30
 800a168:	680e      	ldr	r6, [r1, #0]
 800a16a:	bf08      	it	eq
 800a16c:	694b      	ldreq	r3, [r1, #20]
 800a16e:	600f      	str	r7, [r1, #0]
 800a170:	bf18      	it	ne
 800a172:	2300      	movne	r3, #0
 800a174:	eba6 0807 	sub.w	r8, r6, r7
 800a178:	608b      	str	r3, [r1, #8]
 800a17a:	f1b8 0f00 	cmp.w	r8, #0
 800a17e:	dd9c      	ble.n	800a0ba <__sflush_r+0x1a>
 800a180:	6a21      	ldr	r1, [r4, #32]
 800a182:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a184:	4643      	mov	r3, r8
 800a186:	463a      	mov	r2, r7
 800a188:	4628      	mov	r0, r5
 800a18a:	47b0      	blx	r6
 800a18c:	2800      	cmp	r0, #0
 800a18e:	dc06      	bgt.n	800a19e <__sflush_r+0xfe>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	f04f 30ff 	mov.w	r0, #4294967295
 800a19c:	e78e      	b.n	800a0bc <__sflush_r+0x1c>
 800a19e:	4407      	add	r7, r0
 800a1a0:	eba8 0800 	sub.w	r8, r8, r0
 800a1a4:	e7e9      	b.n	800a17a <__sflush_r+0xda>
 800a1a6:	bf00      	nop
 800a1a8:	20400001 	.word	0x20400001

0800a1ac <_fflush_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	690b      	ldr	r3, [r1, #16]
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	b913      	cbnz	r3, 800a1bc <_fflush_r+0x10>
 800a1b6:	2500      	movs	r5, #0
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	b118      	cbz	r0, 800a1c6 <_fflush_r+0x1a>
 800a1be:	6983      	ldr	r3, [r0, #24]
 800a1c0:	b90b      	cbnz	r3, 800a1c6 <_fflush_r+0x1a>
 800a1c2:	f000 f887 	bl	800a2d4 <__sinit>
 800a1c6:	4b14      	ldr	r3, [pc, #80]	; (800a218 <_fflush_r+0x6c>)
 800a1c8:	429c      	cmp	r4, r3
 800a1ca:	d11b      	bne.n	800a204 <_fflush_r+0x58>
 800a1cc:	686c      	ldr	r4, [r5, #4]
 800a1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0ef      	beq.n	800a1b6 <_fflush_r+0xa>
 800a1d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1d8:	07d0      	lsls	r0, r2, #31
 800a1da:	d404      	bmi.n	800a1e6 <_fflush_r+0x3a>
 800a1dc:	0599      	lsls	r1, r3, #22
 800a1de:	d402      	bmi.n	800a1e6 <_fflush_r+0x3a>
 800a1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1e2:	f000 f915 	bl	800a410 <__retarget_lock_acquire_recursive>
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	f7ff ff59 	bl	800a0a0 <__sflush_r>
 800a1ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1f0:	07da      	lsls	r2, r3, #31
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	d4e0      	bmi.n	800a1b8 <_fflush_r+0xc>
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	059b      	lsls	r3, r3, #22
 800a1fa:	d4dd      	bmi.n	800a1b8 <_fflush_r+0xc>
 800a1fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1fe:	f000 f908 	bl	800a412 <__retarget_lock_release_recursive>
 800a202:	e7d9      	b.n	800a1b8 <_fflush_r+0xc>
 800a204:	4b05      	ldr	r3, [pc, #20]	; (800a21c <_fflush_r+0x70>)
 800a206:	429c      	cmp	r4, r3
 800a208:	d101      	bne.n	800a20e <_fflush_r+0x62>
 800a20a:	68ac      	ldr	r4, [r5, #8]
 800a20c:	e7df      	b.n	800a1ce <_fflush_r+0x22>
 800a20e:	4b04      	ldr	r3, [pc, #16]	; (800a220 <_fflush_r+0x74>)
 800a210:	429c      	cmp	r4, r3
 800a212:	bf08      	it	eq
 800a214:	68ec      	ldreq	r4, [r5, #12]
 800a216:	e7da      	b.n	800a1ce <_fflush_r+0x22>
 800a218:	0800acec 	.word	0x0800acec
 800a21c:	0800ad0c 	.word	0x0800ad0c
 800a220:	0800accc 	.word	0x0800accc

0800a224 <std>:
 800a224:	2300      	movs	r3, #0
 800a226:	b510      	push	{r4, lr}
 800a228:	4604      	mov	r4, r0
 800a22a:	e9c0 3300 	strd	r3, r3, [r0]
 800a22e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a232:	6083      	str	r3, [r0, #8]
 800a234:	8181      	strh	r1, [r0, #12]
 800a236:	6643      	str	r3, [r0, #100]	; 0x64
 800a238:	81c2      	strh	r2, [r0, #14]
 800a23a:	6183      	str	r3, [r0, #24]
 800a23c:	4619      	mov	r1, r3
 800a23e:	2208      	movs	r2, #8
 800a240:	305c      	adds	r0, #92	; 0x5c
 800a242:	f7fd fb59 	bl	80078f8 <memset>
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <std+0x38>)
 800a248:	6263      	str	r3, [r4, #36]	; 0x24
 800a24a:	4b05      	ldr	r3, [pc, #20]	; (800a260 <std+0x3c>)
 800a24c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a24e:	4b05      	ldr	r3, [pc, #20]	; (800a264 <std+0x40>)
 800a250:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a252:	4b05      	ldr	r3, [pc, #20]	; (800a268 <std+0x44>)
 800a254:	6224      	str	r4, [r4, #32]
 800a256:	6323      	str	r3, [r4, #48]	; 0x30
 800a258:	bd10      	pop	{r4, pc}
 800a25a:	bf00      	nop
 800a25c:	0800a579 	.word	0x0800a579
 800a260:	0800a59b 	.word	0x0800a59b
 800a264:	0800a5d3 	.word	0x0800a5d3
 800a268:	0800a5f7 	.word	0x0800a5f7

0800a26c <_cleanup_r>:
 800a26c:	4901      	ldr	r1, [pc, #4]	; (800a274 <_cleanup_r+0x8>)
 800a26e:	f000 b8af 	b.w	800a3d0 <_fwalk_reent>
 800a272:	bf00      	nop
 800a274:	0800a1ad 	.word	0x0800a1ad

0800a278 <__sfmoreglue>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	2268      	movs	r2, #104	; 0x68
 800a27c:	1e4d      	subs	r5, r1, #1
 800a27e:	4355      	muls	r5, r2
 800a280:	460e      	mov	r6, r1
 800a282:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a286:	f7ff fa65 	bl	8009754 <_malloc_r>
 800a28a:	4604      	mov	r4, r0
 800a28c:	b140      	cbz	r0, 800a2a0 <__sfmoreglue+0x28>
 800a28e:	2100      	movs	r1, #0
 800a290:	e9c0 1600 	strd	r1, r6, [r0]
 800a294:	300c      	adds	r0, #12
 800a296:	60a0      	str	r0, [r4, #8]
 800a298:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a29c:	f7fd fb2c 	bl	80078f8 <memset>
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}

0800a2a4 <__sfp_lock_acquire>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	; (800a2ac <__sfp_lock_acquire+0x8>)
 800a2a6:	f000 b8b3 	b.w	800a410 <__retarget_lock_acquire_recursive>
 800a2aa:	bf00      	nop
 800a2ac:	20011e09 	.word	0x20011e09

0800a2b0 <__sfp_lock_release>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	; (800a2b8 <__sfp_lock_release+0x8>)
 800a2b2:	f000 b8ae 	b.w	800a412 <__retarget_lock_release_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	20011e09 	.word	0x20011e09

0800a2bc <__sinit_lock_acquire>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	; (800a2c4 <__sinit_lock_acquire+0x8>)
 800a2be:	f000 b8a7 	b.w	800a410 <__retarget_lock_acquire_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	20011e0a 	.word	0x20011e0a

0800a2c8 <__sinit_lock_release>:
 800a2c8:	4801      	ldr	r0, [pc, #4]	; (800a2d0 <__sinit_lock_release+0x8>)
 800a2ca:	f000 b8a2 	b.w	800a412 <__retarget_lock_release_recursive>
 800a2ce:	bf00      	nop
 800a2d0:	20011e0a 	.word	0x20011e0a

0800a2d4 <__sinit>:
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	f7ff fff0 	bl	800a2bc <__sinit_lock_acquire>
 800a2dc:	69a3      	ldr	r3, [r4, #24]
 800a2de:	b11b      	cbz	r3, 800a2e8 <__sinit+0x14>
 800a2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e4:	f7ff bff0 	b.w	800a2c8 <__sinit_lock_release>
 800a2e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <__sinit+0x68>)
 800a2f0:	4a13      	ldr	r2, [pc, #76]	; (800a340 <__sinit+0x6c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	bf04      	itt	eq
 800a2fa:	2301      	moveq	r3, #1
 800a2fc:	61a3      	streq	r3, [r4, #24]
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 f820 	bl	800a344 <__sfp>
 800a304:	6060      	str	r0, [r4, #4]
 800a306:	4620      	mov	r0, r4
 800a308:	f000 f81c 	bl	800a344 <__sfp>
 800a30c:	60a0      	str	r0, [r4, #8]
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 f818 	bl	800a344 <__sfp>
 800a314:	2200      	movs	r2, #0
 800a316:	60e0      	str	r0, [r4, #12]
 800a318:	2104      	movs	r1, #4
 800a31a:	6860      	ldr	r0, [r4, #4]
 800a31c:	f7ff ff82 	bl	800a224 <std>
 800a320:	68a0      	ldr	r0, [r4, #8]
 800a322:	2201      	movs	r2, #1
 800a324:	2109      	movs	r1, #9
 800a326:	f7ff ff7d 	bl	800a224 <std>
 800a32a:	68e0      	ldr	r0, [r4, #12]
 800a32c:	2202      	movs	r2, #2
 800a32e:	2112      	movs	r1, #18
 800a330:	f7ff ff78 	bl	800a224 <std>
 800a334:	2301      	movs	r3, #1
 800a336:	61a3      	str	r3, [r4, #24]
 800a338:	e7d2      	b.n	800a2e0 <__sinit+0xc>
 800a33a:	bf00      	nop
 800a33c:	0800a954 	.word	0x0800a954
 800a340:	0800a26d 	.word	0x0800a26d

0800a344 <__sfp>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	4607      	mov	r7, r0
 800a348:	f7ff ffac 	bl	800a2a4 <__sfp_lock_acquire>
 800a34c:	4b1e      	ldr	r3, [pc, #120]	; (800a3c8 <__sfp+0x84>)
 800a34e:	681e      	ldr	r6, [r3, #0]
 800a350:	69b3      	ldr	r3, [r6, #24]
 800a352:	b913      	cbnz	r3, 800a35a <__sfp+0x16>
 800a354:	4630      	mov	r0, r6
 800a356:	f7ff ffbd 	bl	800a2d4 <__sinit>
 800a35a:	3648      	adds	r6, #72	; 0x48
 800a35c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a360:	3b01      	subs	r3, #1
 800a362:	d503      	bpl.n	800a36c <__sfp+0x28>
 800a364:	6833      	ldr	r3, [r6, #0]
 800a366:	b30b      	cbz	r3, 800a3ac <__sfp+0x68>
 800a368:	6836      	ldr	r6, [r6, #0]
 800a36a:	e7f7      	b.n	800a35c <__sfp+0x18>
 800a36c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a370:	b9d5      	cbnz	r5, 800a3a8 <__sfp+0x64>
 800a372:	4b16      	ldr	r3, [pc, #88]	; (800a3cc <__sfp+0x88>)
 800a374:	60e3      	str	r3, [r4, #12]
 800a376:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a37a:	6665      	str	r5, [r4, #100]	; 0x64
 800a37c:	f000 f847 	bl	800a40e <__retarget_lock_init_recursive>
 800a380:	f7ff ff96 	bl	800a2b0 <__sfp_lock_release>
 800a384:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a388:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a38c:	6025      	str	r5, [r4, #0]
 800a38e:	61a5      	str	r5, [r4, #24]
 800a390:	2208      	movs	r2, #8
 800a392:	4629      	mov	r1, r5
 800a394:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a398:	f7fd faae 	bl	80078f8 <memset>
 800a39c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a8:	3468      	adds	r4, #104	; 0x68
 800a3aa:	e7d9      	b.n	800a360 <__sfp+0x1c>
 800a3ac:	2104      	movs	r1, #4
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f7ff ff62 	bl	800a278 <__sfmoreglue>
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	6030      	str	r0, [r6, #0]
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d1d5      	bne.n	800a368 <__sfp+0x24>
 800a3bc:	f7ff ff78 	bl	800a2b0 <__sfp_lock_release>
 800a3c0:	230c      	movs	r3, #12
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	e7ee      	b.n	800a3a4 <__sfp+0x60>
 800a3c6:	bf00      	nop
 800a3c8:	0800a954 	.word	0x0800a954
 800a3cc:	ffff0001 	.word	0xffff0001

0800a3d0 <_fwalk_reent>:
 800a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	4688      	mov	r8, r1
 800a3d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3dc:	2700      	movs	r7, #0
 800a3de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a3e6:	d505      	bpl.n	800a3f4 <_fwalk_reent+0x24>
 800a3e8:	6824      	ldr	r4, [r4, #0]
 800a3ea:	2c00      	cmp	r4, #0
 800a3ec:	d1f7      	bne.n	800a3de <_fwalk_reent+0xe>
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f4:	89ab      	ldrh	r3, [r5, #12]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d907      	bls.n	800a40a <_fwalk_reent+0x3a>
 800a3fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3fe:	3301      	adds	r3, #1
 800a400:	d003      	beq.n	800a40a <_fwalk_reent+0x3a>
 800a402:	4629      	mov	r1, r5
 800a404:	4630      	mov	r0, r6
 800a406:	47c0      	blx	r8
 800a408:	4307      	orrs	r7, r0
 800a40a:	3568      	adds	r5, #104	; 0x68
 800a40c:	e7e9      	b.n	800a3e2 <_fwalk_reent+0x12>

0800a40e <__retarget_lock_init_recursive>:
 800a40e:	4770      	bx	lr

0800a410 <__retarget_lock_acquire_recursive>:
 800a410:	4770      	bx	lr

0800a412 <__retarget_lock_release_recursive>:
 800a412:	4770      	bx	lr

0800a414 <__swhatbuf_r>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	460e      	mov	r6, r1
 800a418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41c:	2900      	cmp	r1, #0
 800a41e:	b096      	sub	sp, #88	; 0x58
 800a420:	4614      	mov	r4, r2
 800a422:	461d      	mov	r5, r3
 800a424:	da08      	bge.n	800a438 <__swhatbuf_r+0x24>
 800a426:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	602a      	str	r2, [r5, #0]
 800a42e:	061a      	lsls	r2, r3, #24
 800a430:	d410      	bmi.n	800a454 <__swhatbuf_r+0x40>
 800a432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a436:	e00e      	b.n	800a456 <__swhatbuf_r+0x42>
 800a438:	466a      	mov	r2, sp
 800a43a:	f000 f903 	bl	800a644 <_fstat_r>
 800a43e:	2800      	cmp	r0, #0
 800a440:	dbf1      	blt.n	800a426 <__swhatbuf_r+0x12>
 800a442:	9a01      	ldr	r2, [sp, #4]
 800a444:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a448:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a44c:	425a      	negs	r2, r3
 800a44e:	415a      	adcs	r2, r3
 800a450:	602a      	str	r2, [r5, #0]
 800a452:	e7ee      	b.n	800a432 <__swhatbuf_r+0x1e>
 800a454:	2340      	movs	r3, #64	; 0x40
 800a456:	2000      	movs	r0, #0
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	b016      	add	sp, #88	; 0x58
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a460 <__smakebuf_r>:
 800a460:	898b      	ldrh	r3, [r1, #12]
 800a462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a464:	079d      	lsls	r5, r3, #30
 800a466:	4606      	mov	r6, r0
 800a468:	460c      	mov	r4, r1
 800a46a:	d507      	bpl.n	800a47c <__smakebuf_r+0x1c>
 800a46c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	6123      	str	r3, [r4, #16]
 800a474:	2301      	movs	r3, #1
 800a476:	6163      	str	r3, [r4, #20]
 800a478:	b002      	add	sp, #8
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	ab01      	add	r3, sp, #4
 800a47e:	466a      	mov	r2, sp
 800a480:	f7ff ffc8 	bl	800a414 <__swhatbuf_r>
 800a484:	9900      	ldr	r1, [sp, #0]
 800a486:	4605      	mov	r5, r0
 800a488:	4630      	mov	r0, r6
 800a48a:	f7ff f963 	bl	8009754 <_malloc_r>
 800a48e:	b948      	cbnz	r0, 800a4a4 <__smakebuf_r+0x44>
 800a490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a494:	059a      	lsls	r2, r3, #22
 800a496:	d4ef      	bmi.n	800a478 <__smakebuf_r+0x18>
 800a498:	f023 0303 	bic.w	r3, r3, #3
 800a49c:	f043 0302 	orr.w	r3, r3, #2
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	e7e3      	b.n	800a46c <__smakebuf_r+0xc>
 800a4a4:	4b0d      	ldr	r3, [pc, #52]	; (800a4dc <__smakebuf_r+0x7c>)
 800a4a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	6020      	str	r0, [r4, #0]
 800a4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	9b00      	ldr	r3, [sp, #0]
 800a4b4:	6163      	str	r3, [r4, #20]
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	6120      	str	r0, [r4, #16]
 800a4ba:	b15b      	cbz	r3, 800a4d4 <__smakebuf_r+0x74>
 800a4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f000 f8d1 	bl	800a668 <_isatty_r>
 800a4c6:	b128      	cbz	r0, 800a4d4 <__smakebuf_r+0x74>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f023 0303 	bic.w	r3, r3, #3
 800a4ce:	f043 0301 	orr.w	r3, r3, #1
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	89a0      	ldrh	r0, [r4, #12]
 800a4d6:	4305      	orrs	r5, r0
 800a4d8:	81a5      	strh	r5, [r4, #12]
 800a4da:	e7cd      	b.n	800a478 <__smakebuf_r+0x18>
 800a4dc:	0800a26d 	.word	0x0800a26d

0800a4e0 <_malloc_usable_size_r>:
 800a4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e4:	1f18      	subs	r0, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfbc      	itt	lt
 800a4ea:	580b      	ldrlt	r3, [r1, r0]
 800a4ec:	18c0      	addlt	r0, r0, r3
 800a4ee:	4770      	bx	lr

0800a4f0 <_raise_r>:
 800a4f0:	291f      	cmp	r1, #31
 800a4f2:	b538      	push	{r3, r4, r5, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	d904      	bls.n	800a504 <_raise_r+0x14>
 800a4fa:	2316      	movs	r3, #22
 800a4fc:	6003      	str	r3, [r0, #0]
 800a4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a506:	b112      	cbz	r2, 800a50e <_raise_r+0x1e>
 800a508:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a50c:	b94b      	cbnz	r3, 800a522 <_raise_r+0x32>
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 f830 	bl	800a574 <_getpid_r>
 800a514:	462a      	mov	r2, r5
 800a516:	4601      	mov	r1, r0
 800a518:	4620      	mov	r0, r4
 800a51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a51e:	f000 b817 	b.w	800a550 <_kill_r>
 800a522:	2b01      	cmp	r3, #1
 800a524:	d00a      	beq.n	800a53c <_raise_r+0x4c>
 800a526:	1c59      	adds	r1, r3, #1
 800a528:	d103      	bne.n	800a532 <_raise_r+0x42>
 800a52a:	2316      	movs	r3, #22
 800a52c:	6003      	str	r3, [r0, #0]
 800a52e:	2001      	movs	r0, #1
 800a530:	e7e7      	b.n	800a502 <_raise_r+0x12>
 800a532:	2400      	movs	r4, #0
 800a534:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a538:	4628      	mov	r0, r5
 800a53a:	4798      	blx	r3
 800a53c:	2000      	movs	r0, #0
 800a53e:	e7e0      	b.n	800a502 <_raise_r+0x12>

0800a540 <raise>:
 800a540:	4b02      	ldr	r3, [pc, #8]	; (800a54c <raise+0xc>)
 800a542:	4601      	mov	r1, r0
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	f7ff bfd3 	b.w	800a4f0 <_raise_r>
 800a54a:	bf00      	nop
 800a54c:	2000020c 	.word	0x2000020c

0800a550 <_kill_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	; (800a570 <_kill_r+0x20>)
 800a554:	2300      	movs	r3, #0
 800a556:	4604      	mov	r4, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	4611      	mov	r1, r2
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	f7f8 fb9b 	bl	8002c98 <_kill>
 800a562:	1c43      	adds	r3, r0, #1
 800a564:	d102      	bne.n	800a56c <_kill_r+0x1c>
 800a566:	682b      	ldr	r3, [r5, #0]
 800a568:	b103      	cbz	r3, 800a56c <_kill_r+0x1c>
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	bf00      	nop
 800a570:	20011e04 	.word	0x20011e04

0800a574 <_getpid_r>:
 800a574:	f7f8 bb88 	b.w	8002c88 <_getpid>

0800a578 <__sread>:
 800a578:	b510      	push	{r4, lr}
 800a57a:	460c      	mov	r4, r1
 800a57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a580:	f000 f894 	bl	800a6ac <_read_r>
 800a584:	2800      	cmp	r0, #0
 800a586:	bfab      	itete	ge
 800a588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a58a:	89a3      	ldrhlt	r3, [r4, #12]
 800a58c:	181b      	addge	r3, r3, r0
 800a58e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a592:	bfac      	ite	ge
 800a594:	6563      	strge	r3, [r4, #84]	; 0x54
 800a596:	81a3      	strhlt	r3, [r4, #12]
 800a598:	bd10      	pop	{r4, pc}

0800a59a <__swrite>:
 800a59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59e:	461f      	mov	r7, r3
 800a5a0:	898b      	ldrh	r3, [r1, #12]
 800a5a2:	05db      	lsls	r3, r3, #23
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	d505      	bpl.n	800a5b8 <__swrite+0x1e>
 800a5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f000 f868 	bl	800a688 <_lseek_r>
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	4632      	mov	r2, r6
 800a5c6:	463b      	mov	r3, r7
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ce:	f000 b817 	b.w	800a600 <_write_r>

0800a5d2 <__sseek>:
 800a5d2:	b510      	push	{r4, lr}
 800a5d4:	460c      	mov	r4, r1
 800a5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5da:	f000 f855 	bl	800a688 <_lseek_r>
 800a5de:	1c43      	adds	r3, r0, #1
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	bf15      	itete	ne
 800a5e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ee:	81a3      	strheq	r3, [r4, #12]
 800a5f0:	bf18      	it	ne
 800a5f2:	81a3      	strhne	r3, [r4, #12]
 800a5f4:	bd10      	pop	{r4, pc}

0800a5f6 <__sclose>:
 800a5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5fa:	f000 b813 	b.w	800a624 <_close_r>
	...

0800a600 <_write_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	4d07      	ldr	r5, [pc, #28]	; (800a620 <_write_r+0x20>)
 800a604:	4604      	mov	r4, r0
 800a606:	4608      	mov	r0, r1
 800a608:	4611      	mov	r1, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	602a      	str	r2, [r5, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	f7f8 fb79 	bl	8002d06 <_write>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_write_r+0x1e>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_write_r+0x1e>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20011e04 	.word	0x20011e04

0800a624 <_close_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d06      	ldr	r5, [pc, #24]	; (800a640 <_close_r+0x1c>)
 800a628:	2300      	movs	r3, #0
 800a62a:	4604      	mov	r4, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	f7f8 fb85 	bl	8002d3e <_close>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d102      	bne.n	800a63e <_close_r+0x1a>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	b103      	cbz	r3, 800a63e <_close_r+0x1a>
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	20011e04 	.word	0x20011e04

0800a644 <_fstat_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d07      	ldr	r5, [pc, #28]	; (800a664 <_fstat_r+0x20>)
 800a648:	2300      	movs	r3, #0
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	4611      	mov	r1, r2
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	f7f8 fb80 	bl	8002d56 <_fstat>
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	d102      	bne.n	800a660 <_fstat_r+0x1c>
 800a65a:	682b      	ldr	r3, [r5, #0]
 800a65c:	b103      	cbz	r3, 800a660 <_fstat_r+0x1c>
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	bd38      	pop	{r3, r4, r5, pc}
 800a662:	bf00      	nop
 800a664:	20011e04 	.word	0x20011e04

0800a668 <_isatty_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d06      	ldr	r5, [pc, #24]	; (800a684 <_isatty_r+0x1c>)
 800a66c:	2300      	movs	r3, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	602b      	str	r3, [r5, #0]
 800a674:	f7f8 fb7f 	bl	8002d76 <_isatty>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d102      	bne.n	800a682 <_isatty_r+0x1a>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b103      	cbz	r3, 800a682 <_isatty_r+0x1a>
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	20011e04 	.word	0x20011e04

0800a688 <_lseek_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4d07      	ldr	r5, [pc, #28]	; (800a6a8 <_lseek_r+0x20>)
 800a68c:	4604      	mov	r4, r0
 800a68e:	4608      	mov	r0, r1
 800a690:	4611      	mov	r1, r2
 800a692:	2200      	movs	r2, #0
 800a694:	602a      	str	r2, [r5, #0]
 800a696:	461a      	mov	r2, r3
 800a698:	f7f8 fb78 	bl	8002d8c <_lseek>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_lseek_r+0x1e>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_lseek_r+0x1e>
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	20011e04 	.word	0x20011e04

0800a6ac <_read_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d07      	ldr	r5, [pc, #28]	; (800a6cc <_read_r+0x20>)
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f7f8 fb06 	bl	8002ccc <_read>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_read_r+0x1e>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_read_r+0x1e>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	20011e04 	.word	0x20011e04

0800a6d0 <sqrt>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	ed2d 8b02 	vpush	{d8}
 800a6d6:	ec55 4b10 	vmov	r4, r5, d0
 800a6da:	f000 f825 	bl	800a728 <__ieee754_sqrt>
 800a6de:	4622      	mov	r2, r4
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	eeb0 8a40 	vmov.f32	s16, s0
 800a6ea:	eef0 8a60 	vmov.f32	s17, s1
 800a6ee:	f7f6 fa35 	bl	8000b5c <__aeabi_dcmpun>
 800a6f2:	b990      	cbnz	r0, 800a71a <sqrt+0x4a>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7f6 fa06 	bl	8000b0c <__aeabi_dcmplt>
 800a700:	b158      	cbz	r0, 800a71a <sqrt+0x4a>
 800a702:	f7fd f8cf 	bl	80078a4 <__errno>
 800a706:	2321      	movs	r3, #33	; 0x21
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	2200      	movs	r2, #0
 800a70c:	2300      	movs	r3, #0
 800a70e:	4610      	mov	r0, r2
 800a710:	4619      	mov	r1, r3
 800a712:	f7f6 f8b3 	bl	800087c <__aeabi_ddiv>
 800a716:	ec41 0b18 	vmov	d8, r0, r1
 800a71a:	eeb0 0a48 	vmov.f32	s0, s16
 800a71e:	eef0 0a68 	vmov.f32	s1, s17
 800a722:	ecbd 8b02 	vpop	{d8}
 800a726:	bd38      	pop	{r3, r4, r5, pc}

0800a728 <__ieee754_sqrt>:
 800a728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a72c:	ec55 4b10 	vmov	r4, r5, d0
 800a730:	4e55      	ldr	r6, [pc, #340]	; (800a888 <__ieee754_sqrt+0x160>)
 800a732:	43ae      	bics	r6, r5
 800a734:	ee10 0a10 	vmov	r0, s0
 800a738:	ee10 3a10 	vmov	r3, s0
 800a73c:	462a      	mov	r2, r5
 800a73e:	4629      	mov	r1, r5
 800a740:	d110      	bne.n	800a764 <__ieee754_sqrt+0x3c>
 800a742:	ee10 2a10 	vmov	r2, s0
 800a746:	462b      	mov	r3, r5
 800a748:	f7f5 ff6e 	bl	8000628 <__aeabi_dmul>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4620      	mov	r0, r4
 800a752:	4629      	mov	r1, r5
 800a754:	f7f5 fdb2 	bl	80002bc <__adddf3>
 800a758:	4604      	mov	r4, r0
 800a75a:	460d      	mov	r5, r1
 800a75c:	ec45 4b10 	vmov	d0, r4, r5
 800a760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a764:	2d00      	cmp	r5, #0
 800a766:	dc10      	bgt.n	800a78a <__ieee754_sqrt+0x62>
 800a768:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a76c:	4330      	orrs	r0, r6
 800a76e:	d0f5      	beq.n	800a75c <__ieee754_sqrt+0x34>
 800a770:	b15d      	cbz	r5, 800a78a <__ieee754_sqrt+0x62>
 800a772:	ee10 2a10 	vmov	r2, s0
 800a776:	462b      	mov	r3, r5
 800a778:	ee10 0a10 	vmov	r0, s0
 800a77c:	f7f5 fd9c 	bl	80002b8 <__aeabi_dsub>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	f7f6 f87a 	bl	800087c <__aeabi_ddiv>
 800a788:	e7e6      	b.n	800a758 <__ieee754_sqrt+0x30>
 800a78a:	1512      	asrs	r2, r2, #20
 800a78c:	d074      	beq.n	800a878 <__ieee754_sqrt+0x150>
 800a78e:	07d4      	lsls	r4, r2, #31
 800a790:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a794:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a798:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a79c:	bf5e      	ittt	pl
 800a79e:	0fda      	lsrpl	r2, r3, #31
 800a7a0:	005b      	lslpl	r3, r3, #1
 800a7a2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a7a6:	2400      	movs	r4, #0
 800a7a8:	0fda      	lsrs	r2, r3, #31
 800a7aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a7ae:	107f      	asrs	r7, r7, #1
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	2516      	movs	r5, #22
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a7ba:	1886      	adds	r6, r0, r2
 800a7bc:	428e      	cmp	r6, r1
 800a7be:	bfde      	ittt	le
 800a7c0:	1b89      	suble	r1, r1, r6
 800a7c2:	18b0      	addle	r0, r6, r2
 800a7c4:	18a4      	addle	r4, r4, r2
 800a7c6:	0049      	lsls	r1, r1, #1
 800a7c8:	3d01      	subs	r5, #1
 800a7ca:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a7ce:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a7d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7d6:	d1f0      	bne.n	800a7ba <__ieee754_sqrt+0x92>
 800a7d8:	462a      	mov	r2, r5
 800a7da:	f04f 0e20 	mov.w	lr, #32
 800a7de:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a7e2:	4281      	cmp	r1, r0
 800a7e4:	eb06 0c05 	add.w	ip, r6, r5
 800a7e8:	dc02      	bgt.n	800a7f0 <__ieee754_sqrt+0xc8>
 800a7ea:	d113      	bne.n	800a814 <__ieee754_sqrt+0xec>
 800a7ec:	459c      	cmp	ip, r3
 800a7ee:	d811      	bhi.n	800a814 <__ieee754_sqrt+0xec>
 800a7f0:	f1bc 0f00 	cmp.w	ip, #0
 800a7f4:	eb0c 0506 	add.w	r5, ip, r6
 800a7f8:	da43      	bge.n	800a882 <__ieee754_sqrt+0x15a>
 800a7fa:	2d00      	cmp	r5, #0
 800a7fc:	db41      	blt.n	800a882 <__ieee754_sqrt+0x15a>
 800a7fe:	f100 0801 	add.w	r8, r0, #1
 800a802:	1a09      	subs	r1, r1, r0
 800a804:	459c      	cmp	ip, r3
 800a806:	bf88      	it	hi
 800a808:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a80c:	eba3 030c 	sub.w	r3, r3, ip
 800a810:	4432      	add	r2, r6
 800a812:	4640      	mov	r0, r8
 800a814:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a818:	f1be 0e01 	subs.w	lr, lr, #1
 800a81c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a820:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a824:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a828:	d1db      	bne.n	800a7e2 <__ieee754_sqrt+0xba>
 800a82a:	430b      	orrs	r3, r1
 800a82c:	d006      	beq.n	800a83c <__ieee754_sqrt+0x114>
 800a82e:	1c50      	adds	r0, r2, #1
 800a830:	bf13      	iteet	ne
 800a832:	3201      	addne	r2, #1
 800a834:	3401      	addeq	r4, #1
 800a836:	4672      	moveq	r2, lr
 800a838:	f022 0201 	bicne.w	r2, r2, #1
 800a83c:	1063      	asrs	r3, r4, #1
 800a83e:	0852      	lsrs	r2, r2, #1
 800a840:	07e1      	lsls	r1, r4, #31
 800a842:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a846:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a84a:	bf48      	it	mi
 800a84c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a850:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a854:	4614      	mov	r4, r2
 800a856:	e781      	b.n	800a75c <__ieee754_sqrt+0x34>
 800a858:	0ad9      	lsrs	r1, r3, #11
 800a85a:	3815      	subs	r0, #21
 800a85c:	055b      	lsls	r3, r3, #21
 800a85e:	2900      	cmp	r1, #0
 800a860:	d0fa      	beq.n	800a858 <__ieee754_sqrt+0x130>
 800a862:	02cd      	lsls	r5, r1, #11
 800a864:	d50a      	bpl.n	800a87c <__ieee754_sqrt+0x154>
 800a866:	f1c2 0420 	rsb	r4, r2, #32
 800a86a:	fa23 f404 	lsr.w	r4, r3, r4
 800a86e:	1e55      	subs	r5, r2, #1
 800a870:	4093      	lsls	r3, r2
 800a872:	4321      	orrs	r1, r4
 800a874:	1b42      	subs	r2, r0, r5
 800a876:	e78a      	b.n	800a78e <__ieee754_sqrt+0x66>
 800a878:	4610      	mov	r0, r2
 800a87a:	e7f0      	b.n	800a85e <__ieee754_sqrt+0x136>
 800a87c:	0049      	lsls	r1, r1, #1
 800a87e:	3201      	adds	r2, #1
 800a880:	e7ef      	b.n	800a862 <__ieee754_sqrt+0x13a>
 800a882:	4680      	mov	r8, r0
 800a884:	e7bd      	b.n	800a802 <__ieee754_sqrt+0xda>
 800a886:	bf00      	nop
 800a888:	7ff00000 	.word	0x7ff00000

0800a88c <_init>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	bf00      	nop
 800a890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a892:	bc08      	pop	{r3}
 800a894:	469e      	mov	lr, r3
 800a896:	4770      	bx	lr

0800a898 <_fini>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr
